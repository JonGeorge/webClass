How to Run an AJAX call that returns HTML (using jQuery and Grails)
-------------------------------------------------------------------
If you have an AJAX call and you just want to return HTML, here's how to do it:


Assumptions:
 A) You want to use jquery to make a web service call
 B) Your web app is running the Grails framework
 C) Your Grails webapp is called 'grailsWebApp1'  
    [see howToSetupAndDebugGrails2.4WebAppWithIntellij.txt]
 D) Your Grails webapp has the jquery resource or asset added]
    [see howToAddJQueryToGrailsAppUsingIntellij.txt]
    
 
Overall Steps
-------------
 A) Setup a controller call that returns HTML
 B) Adjust your GSP to make an AJAX call and show the results
 C) Use the HttpRequestor Firefox plugin to verify your ajax call
 D) Verify that your AJAX call works from the web page
 
 
 
Procedures
----------
 1. Add this method to your WelcomeController.groovy
 
        def getPersonDetails()
        {
            logger.debug("getPersonDetails() started")
    
            String sPersonid = params.id;
            logger.debug("personId={}", sPersonid)
    
            Person person = new Person(firstName: 'John', lastName:'Doe', age:55)
    
            // Return the person object as JSON
            render person as JSON
        }
 


 
    After this change, my WelcomeController.groovy looks like this:
    
        package grailswebappa
    
        import demo.Person
        import grails.converters.JSON
        import org.slf4j.Logger
        import org.slf4j.LoggerFactory
        
        import static org.slf4j.LoggerFactory.getLogger
        
        class WelcomeController
        {
            private static final Logger logger = LoggerFactory.getLogger(WelcomeController.class)
        
            def index()
            {
                logger.debug("index() started")
        
                Person person = new Person(firstName: 'John', lastName:'Doe', age:55)
        
                render view: "/welcome/index", model: [person: person]
            }
        
        
            def getPersonDetails()
            {
                logger.debug("getPersonDetails() started")
        
                String sPersonid = params.id;
                logger.debug("personId={}", sPersonid)
        
                Person person = new Person(firstName: 'John', lastName:'Doe', age:55)
        
                // Return the person object as JSON
                render person as JSON
            }
        }

    
    
 2. Verify that your ajax call returns valid JSON using HttpRequestor
    a. Download and Install the "HttpRequestor" plugin for Firefox
       1) Open Firefox
       2) Go to https://addons.mozilla.org/en-Us/firefox/addon/httprequester/
       3) Press "Add to Firefox"
       4) Press "Install Now"
       5) Restart Firefox
       
    b. Use the HttpRequestor to simulate the ajax call 
       1) Open Firefox
       2) Pull Tools / HttpRequestor
       3) Enter these fields
          URL:  http://localhost:8080/grailsWebApp1/welcome/getPersonDetails?id=15
          press the "GET" button
           
                    
          In the Respose window [on the right], you should see this:
            Status:  200 OK
 
          This is the detials page<br><br>
            
                Last Name: Doe <br/>
                First Name: John <br/>
                Age: 55 <br/>
                            
                
 
  3. Make sure asset pipeline is configured to show deferred scripts
    a. Add this to your views / layouts / main.gsp
    
        <asset:deferredScripts/>
          
          
    b. Verify it was added:
       After this change, your main.gsp should look like this:
       
        <!DOCTYPE html>
        <!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
        <!--[if IE 7 ]>    <html lang="en" class="no-js ie7"> <![endif]-->
        <!--[if IE 8 ]>    <html lang="en" class="no-js ie8"> <![endif]-->
        <!--[if IE 9 ]>    <html lang="en" class="no-js ie9"> <![endif]-->
        <!--[if (gt IE 9)|!(IE)]><!--> <html lang="en" class="no-js"><!--<![endif]-->
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
                <title><g:layoutTitle default="Grails"/></title>
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <link rel="shortcut icon" href="${assetPath(src: 'favicon.ico')}" type="image/x-icon">
                <link rel="apple-touch-icon" href="${assetPath(src: 'apple-touch-icon.png')}">
                <link rel="apple-touch-icon" sizes="114x114" href="${assetPath(src: 'apple-touch-icon-retina.png')}">
                <asset:stylesheet src="application.css"/>
                <asset:javascript src="application.js"/>
                <asset:deferredScripts/>
                <g:layoutHead/>
            </head>
            <body>
                <div id="grailsLogo" role="banner"><a href="http://grails.org"><asset:image src="grails_logo.png" alt="Grails"/></a></div>
                <g:layoutBody/>
                <div class="footer" role="contentinfo"></div>
                <div id="spinner" class="spinner" style="display:none;"><g:message code="spinner.alt" default="Loading&hellip;"/></div>
            </body>
        </html>
  
 
 
 4. Edit your index.jsp to make the ajax call
    ASSUMPTION:  You are using the asset-pipeline grails plugin to handle javascript
    
     
        
         <asset:script type="text/javascript">

               var gsContextPath = '${request.contextPath}';


                /*****************************************************************
                 * clearPersonDetails()
                 *****************************************************************/
                function clearPersonDetails()
                {
                   // Clear the divPageInfo of HTMl
                   $('#divPageInfo').html('');
                }


                /*****************************************************************
                 * getPersonDetails()
                 *  1) Make an ajax call
                 *  2) Get a Person object back as json
                 *  3) Display some of the info in an alert box
                 *****************************************************************/
                function getPersonDetails(aUserid)
                {
                     var sUrl = gsContextPath + '/welcome/getPersonDetails';

                      $.ajax({
                             type: 'GET',
                             cache: false,
                             url:   sUrl,
                             data: 'id=' + aUserid,
                             headers:
                             {
                                  "Content-Type": "application/html",
                                  "Accept":       "application/html"
                             },
                             success: function(aData, aTextStatus, aXhr)
                             {
                                // Put the returned HTMl into the div
                                $('#divPageInfo').html(aData);

                                // Show the div
                                $('#divPageInfo').show();
                             },
                             error: function(aXhr, aTextStatus, aErrorThrown)
                             {
                                alert("Ajax call failed:  " + aErrorThrown);
                             }
                          });
                };

        </asset:script>




    My updated /grails-app/views/welcome/index.gsp page looks like this:
    
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="layout" content="main"/>
            <title>Render Domain</title>
        </head>
        
        <body>
            Last Name: ${person.lastName} <br/>
            First Name: ${person.firstName} <br/>
            Age: ${person.age} <br/>
        
            <br/>
        
        
        
            <a href="#" onclick="getPersonDetails(15)">Get Person Details as Html</a> <br/>
            <a href="#" onclick="clearPersonDetails()">Clear Details</a>
        
            <div id="divPageInfo" style="display: none; border: 1px dashed black">
                  <%-- The AJAX call will fill this with info --%>
            </div>
        
        
            
                 <asset:script type="text/javascript">
        
                       var gsContextPath = '${request.contextPath}';
        
        
                        /*****************************************************************
                         * clearPersonDetails()
                         *****************************************************************/
                        function clearPersonDetails()
                        {
                           // Clear the divPageInfo of HTMl
                           $('#divPageInfo').html('');
                        }
        
        
                        /*****************************************************************
                         * getPersonDetails()
                         *  1) Make an ajax call
                         *  2) Get a Person object back as json
                         *  3) Display some of the info in an alert box
                         *****************************************************************/
                        function getPersonDetails(aUserid)
                        {
                             var sUrl = gsContextPath + '/welcome/getPersonDetails';
        
                              $.ajax({
                                     type: 'GET',
                                     cache: false,
                                     url:   sUrl,
                                     data: 'id=' + aUserid,
                                     headers:
                                     {
                                          "Content-Type": "application/html",
                                          "Accept":       "application/html"
                                     },
                                     success: function(aData, aTextStatus, aXhr)
                                     {
                                        // Put the returned HTMl into the div
                                        $('#divPageInfo').html(aData);
        
                                        // Show the div
                                        $('#divPageInfo').show();
                                     },
                                     error: function(aXhr, aTextStatus, aErrorThrown)
                                     {
                                        alert("Ajax call failed:  " + aErrorThrown);
                                     }
                                  });
                        };
        
                </asset:script>
        </body>
        </html>


 5. Test your AJAX call
    a. In a dos window, type-in this:
       DOS> cd /d c:\tools\intellij\workspace\grailsWebApp1\
       DOS> mvn jetty:run
       
    b. Open Firefox and go to http://localhost:8080/grailsWebApp1/welcome
    c. In the web page click on the "Click to make ajax call"
    d. You should see the alert box show the json details
    
    