How to setup a Spring Bean Connection Pool with C3P0
----------------------------------------------------

ASSUMPTIONS:
 A) You want your Tomcat webapp to talk with a postgreSQL database
 B) You want to use C3P0 to manage the pool of connections
 C) You want to store your jdbc properties in a simple property file
    (and not in context.xml)
 D) You do no want to use JNDI
 E) Your postgreSQL database runs on a server called centosVM


Procedures
----------
 1. Add these dependencies to your pom.xml

        <!-- Add the dependency for your postgreSQL driver -->
		<dependency>
		    <groupId>postgresql</groupId>
		    <artifactId>postgresql</artifactId>
		    <version>9.1-901-1.jdbc4</version>
		</dependency>


        <!-- Add the dependency for the C3P0 connection pool classes -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.1</version>
        </dependency>



  
 2. Add the postgresDataSource bean to your applicationContext.xml    

    <!-- Setup a spring bean that acts as a C3P0 Connection pool                          -->
    <!-- NOTE:  Set destroy-method="close" so that Spring will close the connection pool  -->
    <bean id="postgresDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"  destroy-method="close">
        <property name="driverClass"              value="org.postgresql.Driver"/>
        <property name="jdbcUrl"                  value="jdbc:postgresql://centosVM:5432/postgres"  />
        <property name="user"                     value="postgres" />
        <property name="password"                 value="secret" />
        <property name="initialPoolSize"          value="1" />
        <property name="maxPoolSize"              value="15" />
        <property name="minPoolSize"              value="1" />
        <property name="maxIdleTime"              value="240" />
        <property name="maxConnectionAge"         value="3600" />
        <property name="preferredTestQuery"       value="select now() "/>
        <property name="idleConnectionTestPeriod" value="30000" />
    </bean>




 3. Adjust c3p0 logging level (by adjusting the com.mchange class)
    NOTE:  If you are using logback, then edit your logback.xml like this:
    
        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>
        
        <configuration debug="true">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                </encoder>
            </appender>
             
            <logger name="org.springframework" level="WARN" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
        
            <logger name="app1" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/> 
             </logger>
            
            <logger name="com.mchange" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
        
            
            <root level="WARN" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </root>
        
        </configuration>
    
        
        
        
    
    Here is a sample contextInitialized()
    
    public void contextInitialized(ServletContextEvent aServetContextEvent)
    {
        // Get a pointer to the ServletContext
        ServletContext ctx = aServetContextEvent.getServletContext();
        
        final String sWebAppName = ctx.getContextPath().substring(1);
        logger.debug("{} contextInitialized() started.", sWebAppName);

         try 
         {         
             // Initialize Spring Context
             // NOTE:  Initializes spring beans
             // NOTE:  This must be done before using SpringAppContextUtils
             super.contextInitialized( aServetContextEvent);
             
             // At this point all of the spring beans should be initialized (that need to be)
          }
         catch (Exception e)
         {
             throw new RuntimeException("Critical Error in contextInitialized().  WEB APP WILL NOT STARTUP.", e);
         }
         
         
         logger.debug("{} contextInitialized() finished.", sWebAppName);
    }
    
    

    

 4. Add the SpringApplicationUtils class to your project
    NOTE:  This will be used to get access to spring beans from anywhere within your web app

        package app1.utilities;
        
        
        /**
         * To work, this line must be in the applicationContext.xml file
         *    <bean id="applicationContextProvider" class="app1.utilities.SpringAppContextUtils" />
         * 
         *  MySpringBean mySpringBean = (MySpringBean) SpringApplicationContext.getBean("mySpringBean");
         * // do something with MySpringBean
         * 
        * Create a class which implements ApplicationContextAware. 
        * The method, “setApplicationContext(…)” gets called during the creation of this bean
        * providing the reference to the context. 
        * 
        * Our program should store this for a later interaction with the context.
        */
        import org.springframework.beans.BeansException;
        import org.springframework.context.ApplicationContext;
        import org.springframework.context.ApplicationContextAware;
        
        public class SpringAppContextUtils implements ApplicationContextAware
        {
             private static ApplicationContext applicationContext = null;
        
              public static ApplicationContext getApplicationContext() {
                  return applicationContext;
              }
              
              public void setApplicationContext(ApplicationContext aApplicationContext) throws BeansException
              {
                   // Assign the ApplicationContext into a static variable
                   applicationContext = aApplicationContext;
              }
              
              
              public static Object getBean(String aName)
              {
                  if (applicationContext == null)
                  {
                      throw new RuntimeException("Error in SpringAppContextUtils.getBean().  The applicationContext is null");
                  }
                  
                  return applicationContext.getBean(aName);
              }
              
        }


 5. Setup SpringAppContextUtils so that it has the applicationContext passed into it
    Add this line to your applicationContext.xml file 

      <bean id="applicationContextProvider" class="app1.utilities.SpringAppContextUtils" />
  
 
 
 

  At this point, you can get to your datasource bean in one of two ways:
    a) Use the SpringAppContextUtils.getBean("postgresDataSource")
       NOTE:  This will work anywhere in your web application
         
        // Get a reference to the postgresDataSource bean
        DataSource postgresDataSource = (DataSource) SpringAppContextUtils.getBean("postgresDataSource");
  
  
    b) Inject your spring bean into your class by using
        @Resource
        private DataSource postgresDataSource
  
 
 
 
  
  
 6. Verify that this works 
    a. Delete any mysql-connector-java.jar file in your Tomcat/lib 
       -- Browse to C:\tools\apache-tomcat-7.0.55\lib
       -- If you see mysql-connector-java-5.1.33.jar, then *delete* it
       
    b. Add this method to your MyApplicationWatcher class
    
            /*******************************************************************************
             * verifyConnectionPool()
             *******************************************************************************/
            private void verifyConnectionPool() throws Exception
            {
                logger.debug("initializeConnectionPool() started");
                 
                // Get a reference to the postgresDataSource bean
                DataSource postgresDataSource = (DataSource) SpringAppContextUtils.getBean("postgresDataSource");
                 
                JdbcTemplate jt = new JdbcTemplate( postgresDataSource );
                
                final String sSql = "Select now()";
                
                // Run a query -- which initialized the connection pool
                String sDatabaseTime = jt.queryForObject(sSql, String.class);
                
                logger.debug("initializeConnectionPool() finished successfully.  Database Time is {}", sDatabaseTime);
            }
    

    c. Adjust your MyApplicationWatcher so it looks like this:
    
        public class MyApplicationWatcher extends ContextLoaderListener
        {
            private static final Logger logger = LoggerFactory.getLogger(MyApplicationWatcher.class);
            
            
            /*******************************************************************************
             * contextInitialized()
             *   1) Verify the connection pool by attempting to run a query
             *******************************************************************************/
            @Override
            public void contextInitialized(ServletContextEvent aServetContextEvent)
            {
                // Get a pointer to the ServletContext
                ServletContext ctx = aServetContextEvent.getServletContext();
                
                final String sWebAppName = ctx.getContextPath().substring(1);
                logger.debug("{} contextInitialized() started.", sWebAppName);
        
                 try 
                 {
                     // Initialize Spring Context (which creates your spring beans)
                     super.contextInitialized( aServetContextEvent);
                     
                     // NOTE:  This should be called *after* the Spring Context is initialized
                     listSpringBeans( aServetContextEvent);
                       
                     // Verify your connection pool
                     verifyConnectionPool();
                 }
                 catch (Exception e)
                 {
                     throw new RuntimeException("Critical Error in contextInitialized().  WEB APP WILL NOT STARTUP.", e);
                 }
                 
                 
                 logger.debug("{} contextInitialized() finished.", sWebAppName);
            }
        
        
        
        
            /***********************************************************************************
             * contextDestroyed()
             * The webapp is about to be shutdown
             *   1) Shutdown any database connection pools manually
             *   2) Shutdown the spring context
             ************************************************************************************/
            @Override
            public void contextDestroyed( ServletContextEvent aContextEvent )
            {
                // Get the name of the web application
                final String sWebAppName = aContextEvent.getServletContext().getContextPath().substring(1);
        
                logger.debug("{} contextDestroyed() started", sWebAppName);
        
                // S H U T D O W N     S P R I N G     C O N T E X T
                // NOTE:  Because our JDBC connection pool is managed by spring, it should also close down
                super.contextDestroyed( aContextEvent);
        
                logger.debug("{} contextDestroyed() finished", sWebAppName);
            }        
                
                
                
            /*******************************************************************************
             * listSpringBeans()
             * 
             * NOTE:  This method must be called *after* Spring is initialized
             *******************************************************************************/
            private void listSpringBeans(ServletContextEvent aServletContextEvent)
            {
                // Get a reference to the ServletContext
                ServletContext srvContext = aServletContextEvent.getServletContext();
                    
                // Get a reference to the SpringAppContext
                WebApplicationContext springAppContext = WebApplicationContextUtils.getWebApplicationContext(srvContext);
                 
                // Get a list of all spring bean names
                String[] allSpringBeanNames = springAppContext.getBeanDefinitionNames();
                
                // Sort the list of spring bean names
                Arrays.sort(allSpringBeanNames);
                
                // Display info about every bean
                logger.debug("-All Spring Beans-");
                for (int i=0; i< allSpringBeanNames.length; i++)
                {
                    String sBeanName = allSpringBeanNames[i];
                    String sBeanClassInfo = springAppContext.getBean(sBeanName).getClass().toString();
                    
                    logger.debug("  Bean #{} {} -> {}", String.format("%-3d", i+1), sBeanName, sBeanClassInfo);
                }
                
            }    
        
        
        
            
            /*******************************************************************************
             * verifyConnectionPool()
             *******************************************************************************/
            private void verifyConnectionPool() throws Exception
            {
                logger.debug("initializeConnectionPool() started");
                 
                // Get a reference to the postgresDataSource bean
                DataSource postgresDataSource = (DataSource) SpringAppContextUtils.getBean("postgresDataSource");
                 
                JdbcTemplate jt = new JdbcTemplate( postgresDataSource );
                
                final String sSql = "Select now()";
                
                // Run a query -- which initialized the connection pool
                String sDatabaseTime = jt.queryForObject(sSql, String.class);
                
                logger.debug("initializeConnectionPool() finished successfully.  Database Time is {}", sDatabaseTime);
            }
        
        }
        

 7. Inject your postgresDataSource into a class and try to use it

    a. Add this to the top of your WelcomeController class
    
        @Resource
        private DataSource postgresDataSource;
    
    
    
    b. Add this method to your WelcomeController class
    
            /*******************************************************************************
             * getDatabaseTime()
             *******************************************************************************/
            private String getDatabaseTime() throws Exception
            {                 
                JdbcTemplate jt = new JdbcTemplate( this.postgresDataSource );
                
                final String sSql = "Select now()";
                
                // Run a query -- which initialized the connection pool
                String sDatabaseTime = jt.queryForObject(sSql, String.class);
                
                return sDatabaseTime;
            }
 
 
     c. Add this line to your controller
            String sDatabaseTime = getDatabaseTime();
            logger.debug("Current database time is {}", sDatabaseTime);
            
 



Move Property Values to their own property file
-----------------------------------------------
 8. Setup a property file in WAR / WEB-INF / classes
    a. Create the property file
       Filename:  jdbc.properties
      
       NOTE:  The name of the property file does not matter as spring will load all of them that end with .properties
     
      
   b. Copy + Paste this to your property file
   
        #
        # JDBC Connection Pool Properties
        #
        jdbc.driverClass=org.postgresql.Driver
        jdbc.jdbcUrl=jdbc:postgresql://centosVM:5432/postgres
        jdbc.user=postgres
        jdbc.password=secret
        jdbc.initialPoolSize=1
        jdbc.minPoolSize=1
        jdbc.maxPoolSize=15
        jdbc.maxIdleTime=240
        jdbc.maxConnectionAge=3600
        jdbc.preferredTestQuery=select now()
        jdbc.idleConnectionTestPeriod=30000



   
     
 9. Tell Spring to read the values from your property file   
    Add this to your applicationContext.xml file
       
        <!-- Move the data source values to a property file -->
        <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
           <property name="locations" value="classpath:jdbc.properties" />
        </bean>
        
        **OR**
        
        <!-- Load any file that is found in WEB-INF/classes that ends with .properties -->
        <context:property-placeholder location="classpath*:*.properties" />
 




10. Replace the hard-coded values with variables
    Your postgresDataSource bean should look like this now:
   
    <!-- Setup a spring bean that acts as a C3P0 Connection pool                          -->
    <!-- NOTE:  Set destroy-method="close" so that Spring will close the connection pool  -->
    <bean id="postgresDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"  destroy-method="close">
        <property name="driverClass"              value="${jdbc.driverClass}"        />
        <property name="jdbcUrl"                  value="${jdbc.jdbcUrl}"            />
        <property name="user"                     value="${jdbc.user}"               />
        <property name="password"                 value="${jdbc.password}"           />
        <property name="initialPoolSize"          value="${jdbc.initialPoolSize}"    />
        <property name="maxPoolSize"              value="${jdbc.maxPoolSize}"        />
        <property name="minPoolSize"              value="${jdbc.minPoolSize}"        />
        <property name="maxIdleTime"              value="${jdbc.maxIdleTime}"        />
        <property name="maxConnectionAge"         value="${jdbc.maxConnectionAge}"   />
        <property name="preferredTestQuery"       value="${jdbc.preferredTestQuery}" />
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
    </bean>





11. Verify that it works

    After the spring beans are loaded, you should see this:
    
    Jun 14, 2015 7:53:25 PM org.apache.catalina.core.AprLifecycleListener init
    INFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: C:\Program Files\Java\jre7\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Perl\site\bin;C:\Perl\bin;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\TortoiseSVN\bin;C:\Program Files (x86)\sbt\\bin;C:\Program Files (x86)\scala\bin;C:\tools\apache-maven-3.2.3\bin;C:\tools\apache-ant-1.9.4\bin;.
    Jun 14, 2015 7:53:25 PM org.apache.tomcat.util.digester.SetPropertiesRule begin
    WARNING: [SetPropertiesRule]{Server/Service/Engine/Host/Context} Setting property 'source' to 'org.eclipse.jst.jee.server:mywebapp4' did not find a matching property.
    Jun 14, 2015 7:53:25 PM org.apache.tomcat.util.digester.SetPropertiesRule begin
    WARNING: [SetPropertiesRule]{Server/Service/Engine/Host/Context} Setting property 'source' to 'org.eclipse.jst.jee.server:stripes1' did not find a matching property.
    Jun 14, 2015 7:53:25 PM org.apache.coyote.AbstractProtocol init
    INFO: Initializing ProtocolHandler ["http-bio-8080"]
    Jun 14, 2015 7:53:25 PM org.apache.coyote.AbstractProtocol init
    INFO: Initializing ProtocolHandler ["ajp-bio-8009"]
    Jun 14, 2015 7:53:25 PM org.apache.catalina.startup.Catalina load
    INFO: Initialization processed in 361 ms
    Jun 14, 2015 7:53:25 PM org.apache.catalina.core.StandardService startInternal
    INFO: Starting service Catalina
    Jun 14, 2015 7:53:25 PM org.apache.catalina.core.StandardEngine startInternal
    INFO: Starting Servlet Engine: Apache Tomcat/7.0.55
    Jun 14, 2015 7:53:27 PM org.apache.catalina.core.ApplicationContext log
    INFO: No Spring WebApplicationInitializer types detected on classpath
    06/14/2015 19:53:27 app1.utilities.MyApplicationWatcher mywebapp4 contextInitialized() started.
    Jun 14, 2015 7:53:29 PM org.apache.catalina.core.ApplicationContext log
    INFO: Initializing Spring root WebApplicationContext
    06/14/2015 19:53:29 org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization started
    06/14/2015 19:53:29 org.springframework.web.context.support.XmlWebApplicationContext Refreshing Root WebApplicationContext: startup date [Sun Jun 14 19:53:29 EDT 2015]; root of context hierarchy
    06/14/2015 19:53:29 org.springframework.beans.factory.xml.XmlBeanDefinitionReader Loading XML bean definitions from ServletContext resource [/WEB-INF/spring/applicationContext.xml]
    06/14/2015 19:53:31 org.springframework.context.support.PropertySourcesPlaceholderConfigurer Loading properties file from file [C:\tools\eclipse_kepler\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\mywebapp4\WEB-INF\classes\stuff.properties]
    06/14/2015 19:53:31 org.springframework.web.servlet.handler.SimpleUrlHandlerMapping Mapped URL path [/resources/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
    Jun 14, 2015 7:53:31 PM com.mchange.v2.log.MLog <clinit>
    INFO: MLog clients using java 1.4+ standard logging.
    Jun 14, 2015 7:53:31 PM com.mchange.v2.c3p0.C3P0Registry banner
    INFO: Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
    06/14/2015 19:53:32 app1.utilities.UnitedStatesCache UnitedStatesCache() constructor started.
    06/14/2015 19:53:32 app1.utilities.UnitedStatesCache UnitedStatesCache() constructor finished.
    06/14/2015 19:53:32 app1.utilities.UnitedStatesCache initializeCache() is started.
    Jun 14, 2015 7:53:32 PM com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource getPoolManager
    INFO: Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hge136991vu6050j82f44|444de7a, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hge136991vu6050j82f44|444de7a, idleConnectionTestPeriod -> 30000, initialPoolSize -> 1, jdbcUrl -> jdbc:mysql://127.0.0.1:3306/world, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 3600, maxIdleTime -> 240, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> select now(), properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
    
    
        