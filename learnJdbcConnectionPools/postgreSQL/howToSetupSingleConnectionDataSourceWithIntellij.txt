How to Create a Simple Java App to Query Database w/Single Connection Data Source
---------------------------------------------------------------------------------

Assumptions
 A) You want to use Intellij to run/debug your Java JAR
 B) You want your java app to talk with a Postgres database
 C) You want to use a Java datasource that reuses single connection



Procedures
----------
 1. Create your "simpleDbApp" command-line project in Intellij
    a. Startup Intellij
       NOTE:  If an existing Intellij project appear, then pull File / Close Project
       
    b. Press "Create New Project"
       1) In the "New Project" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java JDK
            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next
               
       2) In the next screen
          GroupId:     com.lessons
          ArtifactId:  simpleDbApp      
          Version:     1.0-SNAPSHOT
          Press Next
          
          
       3) In the next screen,
          Maven home directory:  /opt/apache-maven-3.3.9
          User settings file:    Use the default value
          Press Next                       
                                 
       
       4) Project Name:      simpleDbApp
          Project Location:  ~/intellijProjects/simpleDbApp
          Press Finish
          
       5) If you are prompted
          Maven projects need to be imported
          Press "Enable Auto-Import"
          
          Now, maven has created a simple Java JAR project
       
       
       
 3. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
          a) Single-click on Inspections
          b) next to Typo -- Uncheck the checkbox
          c) Press Apply
          
          

 4. Setup the Maven test directories for your Intellij project

    Add these directories
       src/test/resources/             # Holds the logback.xml used by unit test code
       src/main/resources/             # Holds the logback.xml used by main program


    a. Right-click on src/test   -> New -> Directory:    resources
    b. Right-click on src/main   -> New -> Directory:    resources


    Now, you should have this directory structure
      src/main/java/ 
      src/main/resources/               # Holds logback.xml used by java main program     
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code
   


           
 5. Add dependencies for your project
    Your pom.xml should already have one dependency:
      <dependencies>
      
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.12</version>
          <scope>test</scope>
        </dependency>
        
      </dependencies>
    
        
        
    Copy and paste these dependencies into your pom.xml
    NOTE:  Add all of these dependencies should be between these tags:
       <dependencies>
       . . .
       </dependencies>
       


        <dependency>
            <!-- Spring JDBC -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.0.3.RELEASE</version>
        </dependency>

        <dependency>
            <!-- Spring Core -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>5.0.3.RELEASE</version>

            <exclusions>
                <exclusion>
                    <!-- Remove commons logging from spring as we will use logback -->
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
                
               
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        </dependency>
           
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.5</version>
        </dependency>

        <dependency>
            <!-- Postgres Database Driver -->
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.1.4</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>      




 6. Create this file:  logback.xml
    a. Browse to src/main/resources
    b. Right-click on classes -> New -> File
       filename:  logback.xml
    c. Copy this contents to your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
    
        <?xml version="1.0" encoding="windows-1252" ?>
        <configuration debug="false">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                </encoder>
            </appender>

            <logger name="org.springframework" level="INFO" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>

            <logger name="com.lessons" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>

            <root level="INFO">
                <appender-ref ref="CONSOLE"/>
            </root>
        </configuration>
        


 7. Edit the App class to look like this

         package com.lessons;

         import org.slf4j.Logger;
         import org.slf4j.LoggerFactory;
         import org.springframework.jdbc.core.JdbcTemplate;
         import org.springframework.jdbc.datasource.SingleConnectionDataSource;

         public class App
         {

             private static final Logger logger = LoggerFactory.getLogger(App.class);


             public static void main(String[] args)
             {
                 logger.debug("main() started");

                 SingleConnectionDataSource dataSource = null;

                 try
                 {
                     // Create the data source object (that re-uses one connection)
                     dataSource = new SingleConnectionDataSource();

                     // Initialize the data source by setting its properties
                     dataSource.setDriverClassName("org.postgresql.Driver");
                     dataSource.setUrl("jdbc:postgresql://localhost:5432/app1_db");
                     dataSource.setUsername("app1_user");
                     dataSource.setPassword("secret");


                     // Run query #1 -- get database time in default format
                     JdbcTemplate jt = new JdbcTemplate(dataSource);
                     String sSql1 = "Select now()";
                     String sDatabaseTime = jt.queryForObject(sSql1, String.class);
                     logger.debug("Database Time is {}", sDatabaseTime);


                     // Run query #2 -- get database time with some formatting
                     String sSql2 = "Select date_format( now(), '%d/%m/%Y %H:%i:%s')  ";
                     String sDatabaseTime2 = jt.queryForObject(sSql2, String.class);
                     logger.debug("Database Time is {}", sDatabaseTime2);

                 }
                 catch (Exception e)
                 {
                     // Log the error *and* include a stack trace
                     logger.error("Something bad happened", e);
                 }
                 finally
                 {
                     if (dataSource != null) {
                         // Close the data source
                         dataSource.destroy();
                     }
                 }

                 logger.debug("main() finished");
             }

         }

        
        
      
 8. Setup your debugger
    a. Set a breakpoint or or near line 18 in your main by clicking in the margin
 
    b. Browse to src/main/java -> com.lessons -> App -> Right-Click -> Debug 'App.main()'
     
    c. Press F9 to continue the program and you should see this in your Console:
        05/04/2019 21:48:54 DEBUG com.lessons.App main() started
        05/04/2019 21:48:58 INFO  org.springframework.jdbc.datasource.SingleConnectionDataSource Loaded JDBC driver: org.postgresql.Driver
        05/04/2019 21:48:58 INFO  org.springframework.jdbc.datasource.SingleConnectionDataSource Established shared JDBC Connection: org.postgresql.jdbc.PgConnection@223d2c72
        05/04/2019 21:48:58 DEBUG com.lessons.App Database Time is 2019-05-04 21:48:58.371137-04
        05/04/2019 21:48:58 INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml]
        05/04/2019 21:48:58 INFO  org.springframework.jdbc.support.SQLErrorCodesFactory SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, Hana]
        05/04/2019 21:48:59 ERROR com.lessons.App Something bad happened
        org.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [Select date_format( now(), '%d/%m/%Y %H:%i:%s')  ]; nested exception is org.postgresql.util.PSQLException: ERROR: function date_format(timestamp with time zone, unknown) does not exist
          Hint: No function matches the given name and argument types. You might need to add explicit type casts.
          Position: 8
            at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
            at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
            at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
            at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
            at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1402)
            at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:388)
            at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:446)
            at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:456)
            at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:467)
            at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:474)
            at com.lessons.App.main(App.java:41)
        Caused by: org.postgresql.util.PSQLException: ERROR: function date_format(timestamp with time zone, unknown) does not exist
          Hint: No function matches the given name and argument types. You might need to add explicit type casts.
          Position: 8
            at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2477)
            at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2190)
            at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:300)
            at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:428)
            at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:354)
            at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:301)
            at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:287)
            at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:264)
            at org.postgresql.jdbc.PgStatement.executeQuery(PgStatement.java:231)
            at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:433)
            at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:376)
            ... 5 common frames omitted
        05/04/2019 21:49:01 DEBUG com.lessons.App main() finished
        Disconnected from the target VM, address: '127.0.0.1:32910', transport: 'socket'

        Process finished with exit code 0




    
