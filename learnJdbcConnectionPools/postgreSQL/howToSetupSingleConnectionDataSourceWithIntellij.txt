How to Create a Simple Java App to Query Database w/Single Connection Data Source
---------------------------------------------------------------------------------

Assumptions
 A) You want to use Intellij to run/debug your Java JAR
 B) You want your java app to talk with a Postgres database
 C) You want to use a Java datasource that reuses single connection



Procedures
----------
 1. Create your "simpleDbApp" command-line project in Intellij
    a. Startup Intellij
       NOTE:  If an existing Intellij project appear, then pull File / Close Project
       
    b. Press "Create New Project"
       1) In the "New Project" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java JDK
            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next
               
       2) In the next screen
          GroupId:     com.lessons
          ArtifactId:  simpleDbApp      
          Version:     1.0-SNAPSHOT
          Press Next
          
          
       3) In the next screen,
          Maven home directory:  /opt/apache-maven-3.3.9
          User settings file:    Use the default value
          Press Next                       
                                 
       
       4) Project Name:      simpleDbApp
          Project Location:  ~/intellijProjects/simpleDbApp
          Press Finish
          
       5) If you are prompted
          Maven projects need to be imported
          Press "Enable Auto-Import"
          
          Now, maven has created a simple Java JAR project
       
       
       
 3. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
          a) Single-click on Inspections
          b) next to Typo -- Uncheck the checkbox
          c) Press Apply
          
          

 4. Setup the Maven test directories for your Intellij project

    Add these directories
       src/test/resources/             # Holds the logback.xml used by unit test code
       src/main/resources/             # Holds the logback.xml used by main program


    a. Right-click on src/test   -> New -> Directory:    resources
    b. Right-click on src/main   -> New -> Directory:    resources


    Now, you should have this directory structure
      src/main/java/ 
      src/main/resources/               # Holds logback.xml used by java main program     
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code
   


           
 5. Add dependencies for your project
    Your pom.xml should already have one dependency:
      <dependencies>
      
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.12</version>
          <scope>test</scope>
        </dependency>
        
      </dependencies>
    
        
        
    Copy and paste these dependencies into your pom.xml
    NOTE:  Add all of these dependencies should be between these tags:
       <dependencies>
       . . .
       </dependencies>
       


        <dependency>
            <!-- Spring JDBC -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.0.3.RELEASE</version>
        </dependency>

        <dependency>
            <!-- Spring Core -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>5.0.3.RELEASE</version>

            <exclusions>
                <exclusion>
                    <!-- Remove commons logging from spring as we will use logback -->
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
                
               
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        </dependency>
           
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.5</version>
        </dependency>

        <dependency>
            <!-- Postgres Database Driver -->
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.1.4</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>      




 6. Create this file:  logback.xml
    a. Browse to src/main/resources
    b. Right-click on classes -> New -> File
       filename:  logback.xml
    c. Copy this contents to your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
    
        <?xml version="1.0" encoding="windows-1252" ?>
        <configuration debug="false">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                </encoder>
            </appender>

            <logger name="org.springframework" level="INFO" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>

            <logger name="com.lessons" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>

            <root level="INFO">
                <appender-ref ref="CONSOLE"/>
            </root>
        </configuration>
        


 7. Edit the App class to look like this

         package com.lessons;

         import org.slf4j.Logger;
         import org.slf4j.LoggerFactory;
         import org.springframework.jdbc.core.BeanPropertyRowMapper;
         import org.springframework.jdbc.core.JdbcTemplate;
         import org.springframework.jdbc.datasource.SingleConnectionDataSource;
         import org.springframework.jdbc.support.rowset.SqlRowSet;
         import java.sql.Timestamp;
         import java.util.List;
         import java.util.Map;

         public class App
         {

             private static final Logger logger = LoggerFactory.getLogger(App.class);


             public static void main(String[] args)
             {
                 logger.debug("main() started");

                 SingleConnectionDataSource dataSource = null;

                 try
                 {
                     // Create the data source object (that re-uses one connection)
                     dataSource = new SingleConnectionDataSource();

                     // Initialize the data source by setting its properties
                     dataSource.setDriverClassName("org.postgresql.Driver");
                     dataSource.setUrl("jdbc:postgresql://localhost:5432/app1_db");
                     dataSource.setUsername("app1_user");
                     dataSource.setPassword("secret");


                     // Setup the JdbcTemplate object (once set, we can reuse it)
                     JdbcTemplate jt = new JdbcTemplate(dataSource);


                     // Run query #1 -- get database time in default format
                     String sql1 = "Select now()";
                     String sDatabaseTime = jt.queryForObject(sql1, String.class);
                     logger.debug("Database Time is {}", sDatabaseTime);

                 }
                 catch (Exception e)
                 {
                     // Log the error *and* include a stack trace
                     logger.error("Something bad happened", e);
                 }
                 finally
                 {
                     if (dataSource != null) {
                         // Manually close the data source
                         dataSource.destroy();
                     }
                 }

                 // End of the program
                 logger.debug("main() finished");
             }

         }



 8. Setup your debugger
    a. Set a breakpoint or or near line 18 in your main by clicking in the margin
    b. Browse to src/main/java -> com.lessons -> App -> Right-Click -> Debug 'App.main()'
    c. Activate the debugger and step through the code


 9. Add query #2 to the code:
    a. Add this code block to your main()
         // Run query #2 -- to query the reports table and manually loop through a SqlRowSet
         String sqlGetReportInfo = "select id, display_name, reviewed, created_date " +
                                   "from reports " +
                                   "order by id ";

         // Execute the query and return a read-only recordset
         SqlRowSet rs = jt.queryForRowSet(sqlGetReportInfo);

         // Loop through the recordset
         while (rs.next() ) {
             Integer id = rs.getInt("id");
             String displayName = rs.getString("display_name");
             String reviewed = rs.getString("reviewed");
             Timestamp createdDate = rs.getTimestamp("created_date");

             logger.debug("id={}  displayName={}  reviewed={}  createdDate={}", id, displayName, reviewed, createdDate );
         }

    b. Set a breakpoint on the line where the reviewed variable is set
    c. Run the debugger
       -- Is the reviewed value come back as false or null?

    d. Change thie line:
          String reviewed = rs.getString("reviewed");
       To this line:
          Boolean reviewed = rs.getBoolean("reviewed");

       And, step through it with th debugger?
       -- Is the reviewed field a null field?  False?  True?



10. Add query #3 to the code:
    a. Add this code block to your main()
         // Run query #3 -- to query the reports table and return a list of map objects
         List<Map<String, Object>> listOfMaps = jt.queryForList(sqlGetReportInfo);

         // Loop through the list of maps
         for (Map map: listOfMaps) {
            logger.debug("id={}  displayName={}  reviewed={}  createdDate={}", map.get("id"), map.get("display_name"), map.get("reviewed"), map.get("created_date") );
         }

    b. Step through the code with the debugger
       -- Is the reviewed field a null field?  False?  True?



11. Add query #4 to the code
    a. Add this code block to your main()
         // Run query #4 -- to query the reports table and return a list of model objects
         BeanPropertyRowMapper rowMapper = new BeanPropertyRowMapper(Report.class);
         List<Report> listOfReports = jt.query(sqlGetReportInfo, rowMapper);

         // Loop through the list
         for (Report r: listOfReports) {
              logger.debug("id={}  displayName={}  reviewed={}  createdDate={}", r.getId(), r.getDisplayName(), r.getReviewed(), r.getCreatedDate() );
         }

    b. Add a new java class called Report to your com.lessons package with this code:
         package com.lessons;

         import java.sql.Timestamp;

         public class Report {
                private Integer id;
                private String displayName;
                private Boolean reviewed;
                private Timestamp createdDate;

                public Integer getId() {
                    return id;
                }

                public void setId(Integer id) {
                    this.id = id;
                }

                public String getDisplayName() {
                    return displayName;
                }

                public void setDisplayName(String displayName) {
                    this.displayName = displayName;
                }

                public Boolean getReviewed() {
                    return reviewed;
                }

                public void setReviewed(Boolean reviewed) {
                    this.reviewed = reviewed;
                }

                public Timestamp getCreatedDate() {
                    return createdDate;
                }

                public void setCreatedDate(Timestamp createdDate) {
                    this.createdDate = createdDate;
                }

          }

    c. Step through the code with the debugger
       -- Is the reviewed field a null field?  False?  True?



12. Add query #5 to the code (that will throw an exception)

    a. Add this code block to your main()

            // Run query #5 -- to throw an error
            String sql4 = "select count(*) from users25";
            Integer count = jt.queryForObject(sql4, Integer.class);
            logger.debug("Count of records in users={}", count);

    b. Step through the code with the debugger
        -- What happens


