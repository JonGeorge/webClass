How to Setup a JNDI Connection Pool using Tomcat 7
--------------------------------------------------

Assumptions:
 A) You want your Tomcat webapp to talk with a MySql database
 B) You want to JDNI to get the connection info for your database
 C) Your web app will be deployed on Tomcat 7
 
 
Tomcat 7 comes with its own java classes to implement a JDBC connection pool
  -- The data source factory is called org.apache.tomcat.jdbc.pool.DataSourceFactory
  -- You will need to extend this class to encode the database username/password
  
  
  



Outline
-------
Setting-up a connection pool involves the following steps:
 1) Add a listener to web.xml 
    -- Tells the app server to look at the MyApplicationWatcher class upon web context startup and shutdown
    
 2) Add a JDNI resource to context.xml  
    -- Holds the plain-text database username & password
    -- Holds the encoded    database username & password
   
 3) Setup DaoUtilities to hold your datasource object
    -- Java singleton that is used to get a datasource

 4) Setup ApplicationWatcher class
    -- Starts the connection pool upon web app startup 
    -- Stops the connection pool upon web app shutdown
    
 5) Verify that it works
 
 6) EncryptedDataSourceFactoryForTomcat7.java **FOR BETTER SECURITY -- but optional**
    -- Java class that extends the data source factory used by C3P0
    -- This class decodes the username & password    



    
    
Part 1:  Update web.xml
-----------------------
1. Add these lines to your web.xml
   NOTE:  This will tell your webapp to call contextInitialized() and contextDestroyed() 

    <listener>
        <listener-class>app1.utilities.MyApplicationWatcher</listener-class>
    </listener>  
 
2. Add a package called app1.utilities

3. Add a class to app1.utilities called "MyApplicationWatcher"




Part 2:  Add a context.xml  (using plaintext database username/password
------------------------------------------------------------------------
Create a directory under WAR called META-INF
Add a context.xml file to the webapp's WAR -> META-INF 

<?xml version="1.0" encoding="UTF-8"?>

<Context>

    <!--
        S E T U P        J D B C       C O N N E C T I O N      P O O L
        
        NOTES:
            1) The java code will use the JNDI name to use this data source
            2) Requires the following JARs in Tomcat-home/lib
                TOMCAT_HOME/lib/tomcat-dbcp.jar                 [provided with Tomcat 7]
            3) This JNDI shows has a plain-text username and password
        
    -->
    
    <Resource
        name="jdbc/sqlDatabase"
        destroy-method="close
        auth="Container"
        type="javax.sql.DataSource"
        factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
        description="My database connection info"
        username="root"
        password="secret"
        driverClassName="com.mysql.jdbc.Driver"
        url="jdbc:mysql://localhost:3306/world?autoReconnect=true"
        removeAbandoned="true"
        initialSize="5"
        maxActive="10"
        validationQuery="Select now()"
    />
    
</Context>




Part 3:  Add DaoUtilities class
-------------------------------
 1) Create a package called app1.utilities
 2) Create a class called DaoUtilities
 3) Copy the following text to your DaoUtilities class
 
package app1.utilities;

import javax.naming.InitialContext;
import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DaoUtilities
{

    // ASSUMPTION 1: jdbc/sqlDatabase is defined in web.xml as a javax.sql.DataSource
    // ASSUMPTION 2: jdbc/sqlDatabase is defined in either context.xml or server.xml
    // ASSUMPTION 3: BasicDataSource is the same data source defined in context.xml
    private final static String TOMCAT_JNDI_NAME = "java:comp/env/jdbc/sqlDatabase";
    
    private static DataSource ds;
    private static boolean bDataSourceInitialized = false;
    private static Logger logger = LoggerFactory.getLogger(DaoUtilities.class);
    
    /******************************************************************************
     * initializeDataSource()
     *******************************************************************************/
    private synchronized static void initializeDataSource() throws Exception
    {
        logger.debug("initializeDataSource() started");
        
        // Get a reference to the web application's context
        InitialContext initialCtx = new InitialContext();
        
        // Attempt to lookup the JNDI name in the context.xml or server.xml
        ds = (DataSource) initialCtx.lookup(TOMCAT_JNDI_NAME);
        
        // Set the flag to indicate that the datasource is initialized
        bDataSourceInitialized = true;
        
        logger.debug("initializeDataSource() finished successfully.");
    }
    
    
    /******************************************************************************
     * getDataSource()
     * 
     * Return the data source back to the caller 
     * Initialize the data source (if needed)
     *******************************************************************************/
    public static DataSource getDataSource() throws Exception
    {
        if (bDataSourceInitialized == false)
        {
            initializeDataSource();
        }
        
        return(ds);
    }
    
    
    
    /******************************************************************************
     * closeDataSource()
     * 
     * Close the connection pool
     *******************************************************************************/
    public static void closeDataSource() throws Exception
    {
        if ((bDataSourceInitialized == true) && (ds != null))
        {
            // Get a reference to the Tomcat-DBCP connection pool
            org.apache.tomcat.jdbc.pool.DataSource bds = (org.apache.tomcat.jdbc.pool.DataSource) ds;
        
            // Close the connection pool
            bds.close();
        }
    }
    
}




Part 4:  Add MyApplicationWatcher class
---------------------------------------
 1) Create a class called MyApplicationWatcher
 2) Copy the following text to your MyApplicationWatcher class

 
package app1.utilities;

import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import org.springframework.jdbc.core.JdbcTemplate;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;


public class MyApplicationWatcher implements ServletContextListener
{
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    /*******************************************************************************
     * contextInitialized()
     *   1) Initialize the connection pool by attempting to run a query
     *******************************************************************************/
    @Override
    public void contextInitialized(ServletContextEvent aServetContextEvent)
    {
         final String sWebAppName = aServetContextEvent.getServletContext().getContextPath().substring(1);
         logger.debug("{} contextInitialized() started.", sWebAppName);

         try 
         {
            // Attempt to initialize the jdbc connection pool
            initializeConnectionPool();
         }
         catch (Exception e)
         {
             // Something is wrong -- so throw a runtime exception
             // NOTE:  Throwing a runtime exception here will prevent this webapp from starting-up
             //        Then, someone should notice that the web application did not startup successfully
             throw new RuntimeException("Critical Error in contextInitialized().  WEB APP WILL NOT STARTUP.", e);
         }
         
         
         logger.debug("{} contextInitialized() finished.", sWebAppName);
    }
    
    
    /*******************************************************************************
     * contextDestroyed()
     *******************************************************************************/
    @Override
    public void contextDestroyed(ServletContextEvent aServetContextEvent)
    {
         final String sWebAppName = aServetContextEvent.getServletContext().getContextPath().substring(1);
         logger.debug("{} contextDestroyed() started.", sWebAppName);

         try
         {
             // Close the connection pool
             DaoUtilities.closeDataSource();
         }
         catch(Exception e)
         {
             // Something bad happened -- just log it and keep on going
             logger.warn("Ignoring exception in contextDestroyed()", e);
         }
         
         logger.debug("{} contextDestroyed() finished.", sWebAppName);
    }

    
    
    /*******************************************************************************
     * initializeConnectionPool()
     *
     * NOTE:  If any SQL query runs successfully, then your connection pool is initialized
     *******************************************************************************/
    private void initializeConnectionPool() throws Exception
    {
        logger.debug("initializeConnectionPool() started");

        JdbcTemplate jt = new JdbcTemplate(DaoUtilities.getDataSource() );
        
        final String sSql = "Select now()";
        
        // Run a query -- which initialized the connection pool
        String sDatabaseTime = jt.queryForObject(sSql, String.class);
        
        logger.debug("initializeConnectionPool() finished successfully.  Database Time is {}", sDatabaseTime);
    }

}



Part 5:  Verify that your JDBC connection pool works
----------------------------------------------------
 1) Startup your mysql database 
    Press <Start><Run>services.msc
    Find your MySql service and start it
    
 2) Run MySqlWorkbench and connect to your local mysql database
    a) Run this SQL query to see 
    
        # Put this session in mysql's read-committed mode
        SET SESSION tx_isolation='READ-COMMITTED';
        SELECT @@GLOBAL.tx_isolation, @@SESSION.tx_isolation;

        # Show the number of database sessions
        select * from information_schema.processlist;
 
 
    You probably should see these 2 rows
    
    ID  USER    HOST             DB        COMMAND  TIME    STATE       INFO
     4  root    localhost:49256            Sleep    87      
     5  root    localhost:49257            Query    0       executing   select * from information_schema.processlist

 
 
 3) Startup your webapp
    NOTE:  You set the *initial* connection pool size to 5 in your context.xml
    
    Now, run this query again
    
    # Show the number of database sessions
    select * from information_schema.processlist;
 
    ID  USER    HOST             DB        COMMAND  TIME    STATE       INFO
     4  root    localhost:49256            Sleep    87      
     5  root    localhost:49257            Query    0       executing   select * from information_schema.processlist
    15  root    localhost:49382  world     Sleep    5       
    16  root    localhost:49383  world     Sleep    5       
    17  root    localhost:49384  world     Sleep    5       
    14  root    localhost:49381  world     Sleep    5       
    13  root    localhost:49380  world     Sleep    5       
    
    
    Now, there are 5 sleeping connections that are waiting to serve your webapp
    


    
Part 6:  Improve security by encoding the database username and password
------------------------------------------------------------------------
So, the current setup works, but it's not very secure.  The database username and password are plain-text (open to anyone to see).

Here's how we will encode it:
 1) Adjust your context.xml to use this line:
       factory="app1.utilities.EncryptedDataSourceFactoryForTomcat7"  

 
 2) Create a class called EncryptedDataSourceFactoryForTomcat7 (that extends org.apache.tomcat.jdbc.pool.DataSourceFactory)
 
 
 3) Copy the following contents to your new java class
 
package app1.utilities;

import java.util.Enumeration;
import java.util.Hashtable;

import javax.naming.Context;
import javax.naming.Name;
import javax.naming.RefAddr;
import javax.naming.Reference;
import javax.naming.StringRefAddr;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EncryptedBasicDataSourceFactory extends org.apache.tomcat.jdbc.pool.DataSourceFactory
{
    private static final Logger logger = LoggerFactory.getLogger(EncryptedBasicDataSourceFactory.class);
    
    public Object getObjectInstance(Object aObj, Name aName, Context aNameCtx, Hashtable aEnvironment) throws Exception
    {
        if (aObj instanceof Reference)
        {
            // I am reading the username and password values from context.xml
            
            // Decrypt the username and store the decrypted value in the object
            setUsername( (Reference) aObj);
            
            // Decrypt the password and store the drcrypted value in the object
            setPassword( (Reference) aObj);
        }
        
        Object object = super.getObjectInstance(aObj,  aName,  aNameCtx,  aEnvironment);
        return object;
    }
    
    
    private void setUsername(Reference aRef) throws javax.naming.NamingException
    {
        findDecryptAndReplace("username", aRef);
    }
    
    
    private void setPassword(Reference aRef) throws javax.naming.NamingException
    {
        findDecryptAndReplace("password", aRef);
    }
    
    
    /*****************************************************************************************
     * findDecryptAndReplace()
     * 1) Find this item (such as username or password) in the Reference object
     * 2) Get the encoded text from the Reference object
     * 3) Get the decoded text
     * 4) Replace the encoded text with decoded text
     ******************************************************************************************/
    private void findDecryptAndReplace(String aRefType, Reference aRef) throws javax.naming.NamingException
    {
        logger.debug("findDecryptAndReplace() started:    aRefType={}", aRefType);
        
        // Get the reference index (which holds the encoded information)
        int idx = getReferenceIndex(aRefType, aRef);
        
        // Get the encoded string
        String encodedText = aRef.get(idx).getContent().toString();
        
        // Decrypt the string
        String decodedText = decryptText(encodedText);
        
        // Replace the encoded string with the newly-decrypted string in the Reference object
        aRef.remove(idx);
        aRef.add(idx, new StringRefAddr(aRefType, decodedText));
        logger.debug("findDecryptAndReplace() finished:   aRefType={}", aRefType);
    }
    
    
    
    private int getReferenceIndex(String aAddrType, Reference aRef) throws javax.naming.NamingException
    {
        Enumeration<?> enu = aRef.getAll();
        for (int i=0; enu.hasMoreElements(); i++)
        {
            RefAddr addr = (RefAddr) enu.nextElement();
            if (addr.getType().compareTo(aAddrType) == 0)
            {
                // I found this item.  So, return the index
                return(i);
            }
        }
        
        // If I got here, then something bad happaened
        throw new javax.naming.NamingException("The name/value pair with the name of '" + aAddrType + "' was not found");
    }
    
    
    private String decryptText(String aEncodedText)
    {
        // This does nothing 
        // TODO:  Replace this with a real decoding algorithm
        return aEncodedText;
    }
    
}

