How to Add D3 to your Spring MVC Web App using Intellij
-------------------------------------------------------

Assumptions:
 A) You have an Intellij webapp already setup using Spring MVC  
    [see howToCreateSpringMvcWebApp_usingIntellijMaven_tomcatPlugin.txt]
    
 B) Your webapp has a src/main/webapp/resources directory
 
 C) If you are using Spring-MVC, then you have this line in dispatch-servlet.xml
           <!-- Map the relative address for certain locations -->
           <mvc:resources  mapping="/resources/**"  location="/resources/" />
           

References
----------
https://maptimeboston.github.io/d3-maptime/#/16
https://github.com/maptimeBoston/d3-maptime


Procedures
----------
 1. Download and Install D3 4.1.1
    a. Go to http://d3js.org/
    b. Click on d3.zip
       or
       https://github.com/d3/d3/releases/download/v4.1.1/d3.zip
          
    c. Save d3.zip to your c:\vault\
       
    d. Right-click on c:\vault\d3.zip -> 7zip -> Extract Files...
       Extract to:  c:\vault\d3\
       dd 
       Now, you should have a few files here:
             C:\vault\d3\API.md
             C:\vault\d3\d3.js
             C:\vault\d3\d3.min.js
             C:\vault\d3\LICENSE
             C:\vault\d3\README.md
             

                  
         
    d. In Intellij, Right-click on src/main/webapp/resources -> new -> folder
       Folder name:  d3-4.1.1
           
    e. Browse to the c:\vault\d3\ and highlight everything -> Right-Click -> Copy
    
    f. In Intellij, Right-click on src/main/webapp/resources/d3-4.1.1/ -> Right-Click -> Paste
       Intellij will prompt you to copy files, press OK
       
       Now, you should have these directories
          /src/main/webapp/resources/d3-4.1.1/API.md
          /src/main/webapp/resources/d3-4.1.1/d3.js
          /src/main/webapp/resources/d3-4.1.1/d3.min.js
          /src/main/webapp/resources/d3-4.1.1/LICENSE
          /src/main/webapp/resources/d3-4.1.1/README.md




    
 2. Add an event handler for /map1 to your WelcomeController.java
    a.  Add this code to your existing WelcomeController.java    
            
        /**********************************************************************
         * showMap1()
         *
         * The user browsed to the /sample page
         *  1) Forward the user to the sample.jsp page
         ***********************************************************************/
        @RequestMapping("/map1")
        public ModelAndView showMap1( Model aModel )
        {
            logger.debug("showMap1() started");
    
            // Create a modelAndView object
            ModelAndView mav = new ModelAndView();
    
            // Show the sample.jsp page
            mav.setViewName("map1.jsp");
    
            return mav;
        }
    
   
   
 3. Create this file:  map1.jsp
    a. Browse to src/main/webapp/WEB-INF/jsp -> Right-click -> New File
    b. Filename:  map1.jsp
    c. Copy this to your map1.jsp
    
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <!DOCTYPE HTML>
        
        <html xmlns="http://www.w3.org/1999/xhtml">
        
        <head>
            <title>sample.jsp</title>
        </head>
        
        
        
        <body>
        <%-- S T A N D A R D       H E A D E R  --%>
        <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
        
        <h2>map1.jsp</h2>
        
        <br/>
        
        
        <!--  B I G      M A P -->
        
        <br/>
        <br/>
        
        <%-- S T A N D A R D       F O O T E R  --%>
        <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
        
        
        <script src="${contextPath}/resources/d3-4.1.1/d3.js"></script>
        
        <script type="text/javascript">
        
        
        
            function drawChart( aSvg, dataArray )
            {
                // create a selection
                var selection = aSvg.selectAll( "rect" )
                        .data( dataArray );
        
                // create new elements wherever needed
                selection.enter()
                            .append( "rect" )
                            .attr( "x", function(d,i){
                                return i*25;
                            })
                            .attr( "width", 15 )
                            .attr( "fill", "#d1c9b8" )
                            .attr( "height", function(d){
                                return d/10 * 1.5;
                            })
                            .attr( "y", function(d){
                                return 150 - d/10 * 1.5;
                            });
        
                // remove any unused bars
                selection.exit()
                        .remove();
            }
        
        
        
        
            var ratData = [ 400, 900, 300, 600 ];
        
            // Append an SVG element into which our bar chart goes into
            // Returns a pointer to the newly-created element
            var svg = d3.select("body")
                    .append("svg")
                    .attr("width", 500)
                    .attr("height", 150);
        
        
            // Draw the chart
            drawChart( svg, ratData );
        
        
        </script>
        
        </body>
        </html>
                       
         
    
    
 4. Setup the Jetty maven plugin to startup a Jetty instance
    Right now, the end of your pom.xml should look like this:
    
            <build>
              <finalName>webapp1</finalName>
            </build>
         </project>
     
     
    a. Change the end of the of the pom.xml to this:
    
          <build>
            <finalName>webapp1</finalName>
    
            <plugins>
              <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
        
                <!-- NOTE:  The jetty 9.1.5.v2014050 version works with Java 1.7 -->
                <version>9.1.5.v20140505</version>
        
                <configuration>
                  <httpConnector>
                      <!-- Your local jetty listens on port 8080 -->
                      <port>8080</port>
                  </httpConnector>
        
                  <webApp>
                     <!-- If your project is called webapp1, then jetty listens on http://localhost:8080/webapp1  -->
                     <contextPath>/${project.artifactId}</contextPath>
                  </webApp>
        
                  <!-- Jetty will scan every 10 seconds to pickup front-end changes -->
                  <scanIntervalSeconds>10</scanIntervalSeconds>
                </configuration>
              </plugin>
            </plugins>
         </build>
       </project>

  
  
 5. Use IntelliJ to set a breakpoint
    a. In Intellij, Pull File / Save All
    b. Set a breakpoint
       -- Browse to src/main/java -> app1.controllers -> WelcomeController.java
       -- Single-click in the left margin and add a breakpoint on this line
             logger.debug("mainPage() started");
        
        
        
6. Startup the webapp in debug mode
    a. Open the Maven Projects window
       Pull View -> Tool Window -> Maven Project
    
    b. Single-click on Plugins -> jetty -> jetty:run
    
    c. Right-click on jetty:run -> Debug....  
       -- This will activate the jetty maven plugin in debug mode
          *AND*
       -- This will create a menu option :
          Run -> Debug '<your webapp's name> [jetty:run]'
        
       NOTE:  The next time, you just pull Run -> Debug '<your web app's name> [jetty:run]'    
  
  
        
 7. Open a web browser to your local webapp's /sample page
    a. Open Firefox
    b. Connect to http://localhost:8080/webapp1/map1
       You should reach your breakpoint
    c. Press F9 to continue
       

      
  
              
