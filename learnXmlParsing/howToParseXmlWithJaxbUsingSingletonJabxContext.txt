How to Parse XML Faster using a Singleton JAXB Context
-------------------------------------------------------
JAXBContext is thread safe and should only be created once and reused to avoid the cost of initializing the metadata multiple times.


Assumptions:
 A) You have Java JDK installed
 B) You have Apache Maven installed
 C) You have Intellij Community Edition installed
 
 

Procedures
----------
 1. Create your "parseXML" Maven project in Intellij
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project
       
    b. Press "Create New Project"
       1) In the "New Project" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java JDK:  C:\Program Files\Java\jdk1.7.0_60
                      -- Press OK
               
            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next
               
               
       2) In the next screen
          GroupId:     whatever
          ArtifactId:  parseXml
          Version:     1.0-SNAPSHOT
          Press Next
          
       3) In the next screen,
          Maven home directory:  C:/tools/apache-maven-3.2.3
          Check the checkbox to "Override"
          User settings file:   C:\tools\apache-maven-3.2.3\conf\settings.xml
          Press Next                       
       
       4) Project Name:      parseXml
          Project Location:  C:\tools\intellij\workspace\parseXml
          Press Finish
          
       5) If you get prompted that "C:\tools\intellij\workspace\parseXml" does not exist
          It will be created by Intellij
          Press OK 
     
       6) If you get prompted 
          "New projects can either be opened in a new window or replace the project"
          Press "This Window"
          
       7) If you are prompted 
          Maven projects need to be imported
          Press "Enable Auto-Import"
          
          Now, maven has created a simple Java JAR project
       
       
          
 2. Add these dependencies to your pom.xml
 
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>1.7.5</version>
    </dependency>

    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.0.13</version>
    </dependency>

    <dependency>
        <groupId>javax.xml.bind</groupId>
        <artifactId>jaxb-api</artifactId>
        <version>2.2.12</version>
    </dependency>
 
 
 
 3. Add your logback.xml to your src/main/java/resources/ directory
 
     <?xml version="1.0" encoding="windows-1252" ?>
     <!DOCTYPE project>
    
     <configuration debug="false">
        <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{MM/dd/yyyy HH:mm:ss} %c %m%n</pattern>
            </encoder>
        </appender>
    
    
        <logger name="whatever" level="DEBUG" additivity="false">
            <appender-ref ref="CONSOLE"/>
        </logger>
    
    
        <logger name="javax.xml.bind" level="DEBUG" additivity="false">
            <appender-ref ref="CONSOLE"/>
        </logger>
    
        <root level="DEBUG">
            <appender-ref ref="CONSOLE"/>
        </root>
     </configuration>
 
 
 
  4. Create your Employee Class
  
        package whatever;
        
        import javax.xml.bind.annotation.*;
        
        /**
         * Created by adam on 8/1/2015.
         */
        @XmlRootElement(name="Employee")
        @XmlAccessorType(XmlAccessType.FIELD)
        public class Employee
        {
            @XmlAttribute
            private int id;
        
            // Employee's first name
            @XmlElement
            private String firstName;
        
            // Employee's middle name
            @XmlElement
            private String middleName;
        
            // Employee's last name
            @XmlElement
            private String lastName;
        
            // Employee no argument constructor
            public Employee()
            {
            }
        
            public int getId()
            {
                return id;
            }
        
            public void setId(int id)
            {
                this.id = id;
            }
        
            public String getLastName()
            {
                return lastName;
            }
        
            public void setLastName(String lastName)
            {
                this.lastName = lastName;
            }
        
            public String getMiddleName()
            {
                return middleName;
            }
        
            public void setMiddleName(String middleName)
            {
                this.middleName = middleName;
            }
        
            public String getFirstName()
            {
                return firstName;
            }
        
            public void setFirstName(String firstName)
            {
                this.firstName = firstName;
            }
        
            @Override
            public boolean equals(Object o)
            {
                if (this == o) return true;
                if (o == null || getClass() != o.getClass()) return false;
        
                Employee employee = (Employee) o;
        
                if (id != employee.id) return false;
                if (firstName != null ? !firstName.equals(employee.firstName) :
                        employee.firstName != null) return false;
                if (lastName != null ? !lastName.equals(employee.lastName) :
                        employee.lastName != null) return false;
                if (middleName != null ? !middleName.equals(employee.middleName) :
                        employee.middleName != null) return false;
        
                return true;
            }
        
            @Override
            public int hashCode()
            {
                int result = id;
                result = 31 * result + (firstName != null ? firstName.hashCode() : 0);
                result = 31 * result + (middleName != null ? middleName.hashCode() : 0);
                result = 31 * result + (lastName != null ? lastName.hashCode() : 0);
                return result;
            }
        
            @Override
            public String toString()
            {
                return "Employee{" +
                        "id=" + id +
                        ", firstName='" + firstName + '\'' +
                        ", middleName='" + middleName + '\'' +
                        ", lastName='" + lastName + '\'' +
                        '}';
            }
        }
          

 5. Create your JaxbContextHelper singleton Class
 
        package whatever;
        
        import javax.xml.bind.JAXBContext;
        
        /**
         * Created by adam on 8/2/2015.
         */
        public enum JaxbContextHelper
        {
            INSTANCE;
        
            private JAXBContext jaxbContext;
        
        
            public JAXBContext getJaxbContext()
            {
                return jaxbContext;
            }
        
            public void setJaxbContext(JAXBContext aJaxbContext)
            {
                jaxbContext = aJaxbContext;
            }
        
        }
 
 
 
 6. Create your Parser1 class [which will do the actual XML processing using JAXB]
 
        package whatever;
        
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        
        import javax.xml.bind.JAXBContext;
        import java.io.StringReader;
        import java.io.StringWriter;
        
        public class Parser1
        {
            private static final Logger logger = LoggerFactory.getLogger(Parser1.class);
        
        
            /***************************************************************
             * main()
             ***************************************************************/
            public static void main(String[] args) throws Exception
            {
                logger.debug("main() started");
        
                long startTime;
                long estimatedTime;
                Parser1 parser1 = new Parser1();
        
                // Run marshalTest1() 5000 times
                startTime = System.nanoTime();
                for (int i=0; i<=10000; i++)
                {
                    parser1.marshalTest1();
                }
                estimatedTime = System.nanoTime() - startTime;
                logger.debug("Running marshalTest1 10000 times took {} milliseconds or {} secs ",  estimatedTime/1000000, (double) estimatedTime/1000000000);
        
        
        
                // Run marshalTest2() 10000 times
                startTime = System.nanoTime();
                JAXBContext jaxbContext = JAXBContext.newInstance(Employee.class);
                JaxbContextHelper.INSTANCE.setJaxbContext(jaxbContext);
                for (int i=0; i<=10000; i++)
                {
                    parser1.marshalTest2();
                }
                estimatedTime = System.nanoTime() - startTime;
                logger.debug("Running marshalTest2 10000 times took {} milliseconds or {} secs ",  estimatedTime/1000000, (double) estimatedTime/1000000000);
        
        
        
                logger.debug("main() finished.");
            }
        
        
            /***************************************************************
             * marshalTest1()
             *
             * In this case, we *create* a new jaxbContext every time
             * NOTE:  This is an expensive operation
             ***************************************************************/
            private void marshalTest1() throws Exception
            {
                final Employee john = new Employee();
                john.setId(1);
                john.setFirstName("John");
                john.setMiddleName("Robert");
                john.setLastName("Doe");
        
                // write it out as XML
                final JAXBContext jaxbContext = JAXBContext.newInstance(Employee.class);
                StringWriter writer = new StringWriter();
                jaxbContext.createMarshaller().marshal(john, writer);
        
                // read it from XML
                final Employee johnRead =
                        (Employee) jaxbContext.createUnmarshaller().unmarshal(
                                new StringReader(writer.toString()));
                if (john.equals(johnRead))
                {   // write the new object out as XML again.
                    writer = new StringWriter();
                    jaxbContext.createMarshaller().marshal(johnRead, writer);
               //     logger.debug("johnRead was identical to john: \n{}", writer.toString());
                }
                else
                {
                    throw new Exception("The john and johnRead are not equal");
                }
            }
        
            /***************************************************************
             * marshalTest1()
             *
             * In this case, we get the JaxbContext from JaxbContextHelper
             * Because the JaxbContext is only created once, this method is much faster
             ***************************************************************/
            private void marshalTest2() throws Exception
            {
                final Employee john = new Employee();
                john.setId(1);
                john.setFirstName("John");
                john.setMiddleName("Robert");
                john.setLastName("Doe");
      
                // Get the JaxbContext from the JaxbContextHelper class
                JAXBContext jaxbContext = JaxbContextHelper.INSTANCE.getJaxbContext();
        
                // write it out as XML
                StringWriter writer = new StringWriter();
                jaxbContext.createMarshaller().marshal(john, writer);
        
                // read it from XML
                final Employee johnRead =
                        (Employee) jaxbContext.createUnmarshaller().unmarshal(
                                new StringReader(writer.toString()));
                if (john.equals(johnRead))
                {   // write the new object out as XML again.
                    writer = new StringWriter();
                    jaxbContext.createMarshaller().marshal(johnRead, writer);
                    //     logger.debug("johnRead was identical to john: \n{}", writer.toString());
                }
                else
                {
                    throw new Exception("The john and johnRead are not equal");
                }
        
        
            }
        }
        
             



  
  
  7. Run your Parser1 class
     You should see this output:
        08/02/2015 17:29:22 whatever.Parser1 main() started
        08/02/2015 17:29:29 whatever.Parser1 Running marshalTest1 10000 times took 7082 milliseconds or 7.082836215 secs 
        08/02/2015 17:29:31 whatever.Parser1 Running marshalTest2 10000 times took 1671 milliseconds or 1.671714542 secs 
        08/02/2015 17:29:31 whatever.Parser1 main() finished.    
        
     Notice that using the JaxbContextHelper class made it run 4.2 times faster!
     