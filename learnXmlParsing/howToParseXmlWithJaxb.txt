How to Parse XML with JAXB
--------------------------

Assumptions
 A) You have Intellij Community Edition installed
 B) You have Maven installed


Marshalling vs Serialization
----------------------------
 Marshaling:      Converting data to a byte-stream 
                  Marshalling means bundling up parameters for a remote method call. Under RMI, marshalling uses serialization. 

 Serialization:   Converting java objects into byestream.
                  Converting java objects to sequences of bits that can be transported to a different VM. 
                  

 Marshalling and serializing are loosly synonymous in the context of remote procedure calls.

 Serialization:  When you serialize an object, only the member data within that object is written to the byte stream; not the code that actually implements the object
 Marshalling:    Means to records its state and codebase in such a way that when it is "unmarshalled", a copy of the original object is obtained.
                 You can marshall any object that is serializable
                   
 
 Marshalling refers to converting the signature and parameters of a function into a single byte array
 Serialization more often refers to converting an entire object / object tree into a byte array


Notes about JAXB Thread Safety
------------------------------
JAXBContext is thread safe and should only be created once and reused to avoid the cost of initializing the metadata multiple times.
Marshaller and Unmarshaller are not thread safe, but are lightweight to create and could be created per operation.
-- You want a singleton JAXBContext 
-- You want local instances of Marshaller and Unmarshaller


References
----------
http://blog.bdoughan.com/2010/10/how-does-jaxb-compare-to-xstream.html
http://stackoverflow.com/questions/6768544/jaxb-class-has-two-properties-of-the-same-name
https://jaxb.java.net/2.2.11/docs/ch03.html
 
 
Create a Simple Java Project to Parse XML into a Java Object
------------------------------------------------------------
 1. Create your "parseXML" Maven project in Intellij
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project
       
    b. Press "Create New Project"
       1) In the "New Project" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java JDK:  C:\Program Files\Java\jdk1.7.0_60
                      -- Press OK
               
            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next
               
       2) In the next screen
          GroupId:     whatever
          ArtifactId:  parseXml
          Version:     1.0-SNAPSHOT
          Press Next
          
       3) In the next screen,
          Maven home directory:  C:/tools/apache-maven-3.2.3
          Check the checkbox to "Override"
          User settings file:   C:\tools\apache-maven-3.2.3\conf\settings.xml
          Press Next                       
       
       4) Project Name:      parseXml
          Project Location:  C:\tools\intellij\workspace\parseXml
          Press Finish
          
       5) If you get prompted that "C:\tools\intellij\workspace\parseXml" does not exist
          It will be created by Intellij
          Press OK 
     
       6) If you get prompted 
          "New projects can either be opened in a new window or replace the project"
          Press "This Window"
          
       7) If you are prompted 
          Maven projects need to be imported
          Press "Enable Auto-Import"
          
          Now, maven has created a simple Java JAR project
       
       
       
 2. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
          a) Single-click on Inspections
          b) next to Typo -- Uncheck the checkbox
          c) Press Apply
          d) press OK
          

 3. Setup the Maven test directories for your Intellij project

    Add these directories
       src/test/resources/             # Holds the logback.xml used by unit test code
       src/main/resources/             # Holds the logback.xml used by main program


    a. Right-click on src/test   -> New -> Directory:    resources
    b. Right-click on src/main   -> New -> Directory:    resources


    Now, you should have this directory structure
      src/main/java/ 
      src/main/resources/               # Holds logback.xml used by java main program     
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code
   


           
 4. Add dependencies for your project
    Your pom.xml should already have one dependency:
      <dependencies>
      
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.12</version>
          <scope>test</scope>
        </dependency>
        
      </dependencies>
    
        
        
    Copy and paste these dependencies into your pom.xml
    NOTE:  Add all of these dependencies should be between these tags:
       <dependencies>
       . . .
       </dependencies>
       
       

    
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.5</version>
        </dependency>
        
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
        </dependency>

        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.2.12</version>
        </dependency>




 5. Create this file:  logback.xml
    a. Browse to src/main/resources
    b. Right-click on classes -> New -> File
       filename:  logback.xml

    c. Copy this contents to your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
    
        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>
        
        <configuration debug="false">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                </encoder>
            </appender>
            
            
            <logger name="whatever" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>   
            
            <root level="WARN">
                <appender-ref ref="CONSOLE"/>
            </root>
            
        </configuration>
        

 6. Create your class: Employee
    a. Right-click on src/main/java/whatever -> New Class 
       Name:  Employee
       Press OK
       
    b. Change your class to look like this:

        package whatever;
        
        import javax.xml.bind.annotation.*;
        
        /**
         * Created by adam on 8/1/2015.
         */
        @XmlRootElement(name="Employee")
        @XmlAccessorType(XmlAccessType.FIELD)
        public class Employee
        {
            @XmlAttribute
            private int id;
        
            // Employee's first name
            @XmlElement
            private String firstName;
        
            // Employee's middle name
            @XmlElement
            private String middleName;
        
            // Employee's last name
            @XmlElement
            private String lastName;
        
            // Employee no argument constructor
            public Employee()
            {
            }
        
            public int getId()
            {
                return id;
            }
        
            public void setId(int id)
            {
                this.id = id;
            }
        
            public String getLastName()
            {
                return lastName;
            }
        
            public void setLastName(String lastName)
            {
                this.lastName = lastName;
            }
        
            public String getMiddleName()
            {
                return middleName;
            }
        
            public void setMiddleName(String middleName)
            {
                this.middleName = middleName;
            }
        
            public String getFirstName()
            {
                return firstName;
            }
        
            public void setFirstName(String firstName)
            {
                this.firstName = firstName;
            }
        
            @Override
            public boolean equals(Object o)
            {
                if (this == o) return true;
                if (o == null || getClass() != o.getClass()) return false;
        
                Employee employee = (Employee) o;
        
                if (id != employee.id) return false;
                if (firstName != null ? !firstName.equals(employee.firstName) :
                        employee.firstName != null) return false;
                if (lastName != null ? !lastName.equals(employee.lastName) :
                        employee.lastName != null) return false;
                if (middleName != null ? !middleName.equals(employee.middleName) :
                        employee.middleName != null) return false;
        
                return true;
            }
        
            @Override
            public int hashCode()
            {
                int result = id;
                result = 31 * result + (firstName != null ? firstName.hashCode() : 0);
                result = 31 * result + (middleName != null ? middleName.hashCode() : 0);
                result = 31 * result + (lastName != null ? lastName.hashCode() : 0);
                return result;
            }
        
            @Override
            public String toString()
            {
                return "Employee{" +
                        "id=" + id +
                        ", firstName='" + firstName + '\'' +
                        ", middleName='" + middleName + '\'' +
                        ", lastName='" + lastName + '\'' +
                        '}';
            }
        }


 

 7. Create your class:  Parser1
    a. Right-click on src/main/java/whatever -> New Class 
       Name:  Parser1
       Press OK
       
    b. Change your class to look like this:
        
        package whatever;
        
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        
        import javax.xml.bind.JAXBContext;
        import java.io.StringReader;
        import java.io.StringWriter;
        
        public class Parser1
        {
            private static final Logger logger = LoggerFactory.getLogger(Parser1.class);
        
            /***************************************************************
             * main()
             *
             ***************************************************************/
            public static void main(String[] args) throws Exception
            {
                logger.debug("main() started");
        
                final Employee john = new Employee();
                john.setId(1);
                john.setFirstName("John");
                john.setMiddleName("Robert");
                john.setLastName("Doe");
        
                // write it out as XML
                final JAXBContext jaxbContext = JAXBContext.newInstance(Employee.class);
                StringWriter writer = new StringWriter();
                jaxbContext.createMarshaller().marshal(john, writer);
        
                // read it from XML
                final Employee johnRead =
                        (Employee) jaxbContext.createUnmarshaller().unmarshal(
                                new StringReader(writer.toString()));
                if (john.equals(johnRead))
                {   // write the new object out as XML again.
                    writer = new StringWriter();
                    jaxbContext.createMarshaller().marshal(johnRead, writer);
                    System.out.println(
                            "johnRead was identical to john: \n" + writer.toString());
                }
                else
                {
                    System.out.println("john and johnRead are not equal");
                }
        
                logger.debug("main() finished.");
            }
        
        
        }

     
 
      
 8. Setup your debugger
    a. Set a breakpoint in your main() of Parser1
    b. Browse to src/main/java/whatever/Parser1 -> Right-click -> Debug 'Parser1.main()'
     
       Press F9 to continue the program and you should see this in your Console:
       Connected to the target VM, address: '127.0.0.1:51219', transport: 'socket'
       08/01/2015 16:05:15 whatever.Parser1 main() started
       johnRead was identical to john: 
       <?xml version="1.0" encoding="UTF-8" standalone="yes"?><Employee id="1"><firstName>John</firstName><middleName>Robert</middleName><lastName>Doe</lastName></Employee>
       08/01/2015 16:05:19 whatever.Parser1 main() finished.
       Disconnected from the target VM, address: '127.0.0.1:51219', transport: 'socket'

       Process finished with exit code 0
    
    
