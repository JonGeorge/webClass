How to Use the SolrJ client to Index a File
--------------------------------------------

Assumptions:
 A) You have solr 4.10.4 installed


References
----------
https://cwiki.apache.org/confluence/display/solr/Using+SolrJ


Procedure
---------
 1. Create a Java command line program
 
 
 2. Add this maven dependency:
         
       <dependency>
           <groupId>org.apache.solr</groupId>
           <artifactId>solr-solrj</artifactId>
           <version>4.10.4</version>
           <type>jar</type>
       </dependency>
        
 
 3. Add this code to your class
 
// Connect to a single-node solr instance
String urlString = "http://localhost:8983/solr/techproducts";
SolrClient solrClient = new HttpSolrClient(urlString);

*OR*

// Connect to a multi-mode solr (SolrCloud client)
String zkHostString = "zkServerA:2181,zkServerB:2181,zkServerC:2181/solr";
SolrClient solrClient = new CloudSolrClient(zkHostString);


// Create a new Solr Document
SolrInputDocument document = new SolrInputDocument();
document.addField("id", "552199");
document.addField("name", "Gouda cheese wheel");
document.addField("price", "49.99");
UpdateResponse response = solrClient.add(document);
 
// Commit your changes
solrClient.commit();



Using the ConcurrentUpdateSolrClient
------------------------------------
When implementing java applications that will be bulk loading a lot of documents at once, 
ConcurrentUpdateSolrClient is an alternative to consider instead of using HttpSolrClient. 
-- The ConcurrentUpdateSolrClient buffers all added documents and 
-- It writes them into open HTTP connections. 
-- This class is thread safe. 
-- Although any SolrClient request can be made with this implementation, it is only recommended to use the ConcurrentUpdateSolrClient for /update requests.

