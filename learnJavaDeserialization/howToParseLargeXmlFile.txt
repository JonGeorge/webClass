How to Parse a Large Xml File
-----------------------------
Problem:  I have a 1-gigabyte xml file that I need to parse.
Solution: Use XMLStreamReader


Why is it fast?  Because it's not reading and parsing the entire humongous file into memory.  It's doing a little at-a-time.


Sample XML File
---------------
 <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:MyReport xmlns:ns2="http://www.myCompany.com/Report">
    <MyList>
        <MyListItem><companyId>A123</companyId><SocialSecurityNumber>111-22-3333</SocialSecurityNumber><PrimaryName><LastName>Smith</LastName><FirstName>John</FirstName><MiddleName>A</MiddleName></PrimaryName><EnrollmentDate>2020-08-12T04:18:36Z</EnrollmentDate><PersonType>Unknown</PersonType></MyListItem>
        <MyListItem><companyId>A124</companyId><SocialSecurityNumber>222-22-2222</SocialSecurityNumber><PrimaryName><LastName>Ford</LastName><FirstName>Harrison</FirstName><MiddleName>Albert</MiddleName></PrimaryName><EnrollmentDate>2020-08-12T04:18:36Z</EnrollmentDate><PersonType>Actor</PersonType></MyListItem>
        <MyListItem><companyId>A125</companyId><SocialSecurityNumber>333-33-3333</SocialSecurityNumber><PrimaryName><LastName>Lincoln</LastName><FirstName>Abe</FirstName><MiddleName>Honest</MiddleName></PrimaryName><EnrollmentDate>2020-08-12T04:18:36Z</EnrollmentDate><PersonType>President</PersonType></MyListItem>
    </MyList>
</ns2:MyReport>


Java Code to Parse a Huge XML File that looks like above and write-it out into files that holds 10,000 entries each
-------------------------------------------------------------------------------------------------------------------
 1. Create model object:  MyPrimaryName
 
        package com.lessons;

        import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;

        public class MyPrimaryName {

            @JacksonXmlProperty(localName = "LastName")
            private String lastName;

            @JacksonXmlProperty(localName = "FirstName")
            private String firstName;

            @JacksonXmlProperty(localName = "MiddleName")
            private String middleName;



            public String getLastName() {
                return lastName;
            }

            public void setLastName(String lastName) {
                this.lastName = lastName;
            }

            public String getFirstName() {
                return firstName;
            }

            public void setFirstName(String firstName) {
                this.firstName = firstName;
            }

            public String getMiddleName() {
                return middleName;
            }

            public void setMiddleName(String middleName) {
                this.middleName = middleName;
            }
        }

 
 
 2. Create model object:  MyListItem

        package com.lessons;

        import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;

        public class MyListItem {

            @JacksonXmlProperty(localName = "companyId")
            private String companyId;

            @JacksonXmlProperty(localName = "SocialSecurityNumber")
            private String socialSecurityNumber;

            @JacksonXmlProperty(localName = "PrimaryName")
            private MyPrimaryName primaryName = new MyPrimaryName();

            @JacksonXmlProperty(localName = "EnrollmentDate")
            private String enrollmentDate;

            @JacksonXmlProperty(localName = "PersonType")
            private String personType;


            // -------------------- Getters and Setters ------------------------------
            // NOTE:  The Fasterxml Jackson library calls the setters when reading XML
            // -----------------------------------------------------------------------


            public String getCompanyId() {
                return companyId;
            }

            public void setCompanyId(String companyId) {
                this.companyId = companyId;
            }

            public String getSocialSecurityNumber() {
                return socialSecurityNumber;
            }

            public void setSocialSecurityNumber(String socialSecurityNumber) {
                this.socialSecurityNumber = socialSecurityNumber;
            }

            public MyPrimaryName getPrimaryName() {
                return primaryName;
            }

            public void setPrimaryName(MyPrimaryName primaryName) {
                this.primaryName = primaryName;
            }

            public String getEnrollmentDate() {
                return enrollmentDate;
            }

            public void setEnrollmentDate(String enrollmentDate) {
                this.enrollmentDate = enrollmentDate;
            }

            public String getPersonType() {
                return personType;
            }

            public void setPersonType(String personType) {
                this.personType = personType;
            }
        }

 
 3. Create a test class called MyParseLargeFileTest
        package com.lessons;

        import org.junit.Test;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;

        import javax.xml.stream.XMLInputFactory;
        import javax.xml.stream.XMLStreamConstants;
        import javax.xml.stream.XMLStreamReader;
        import java.io.File;
        import java.io.FileInputStream;
        import java.io.InputStream;
        import java.util.ArrayList;
        import java.util.List;

        import static org.junit.Assert.assertTrue;

        public class MyParseLargeFileTest {

            private static final Logger logger = LoggerFactory.getLogger(MyParseLargeFileTest.class);

            @Test
            public void testParseReallyLargeXmlFile() throws Exception {

                final int TOTAL_RECORDS_PER_FILE = 100000;

                String inputFilePath = "./docs/sample.xml";
                File inputFile = new File(inputFilePath);
                InputStream inputStream = new FileInputStream(inputFile);

                List<MyListItem> itemList = null;
                MyListItem currentListItem = null;
                String tagContent = null;
                XMLInputFactory factory = XMLInputFactory.newInstance();
                XMLStreamReader reader = factory.createXMLStreamReader(inputStream);

                while(reader.hasNext()){
                    int event = reader.next();

                    switch(event){
                        case XMLStreamConstants.START_ELEMENT:
                            if ("MyListItem".equals(reader.getLocalName())){
                                currentListItem = new MyListItem();

                            }
                            if("MyList".equals(reader.getLocalName())){
                                itemList = new ArrayList<>();
                            }
                            break;

                        case XMLStreamConstants.CHARACTERS:
                            tagContent = reader.getText().trim();
                            break;

                        case XMLStreamConstants.END_ELEMENT:
                            switch(reader.getLocalName()){
                                case "MyListItem":
                                    // I have reached the end of an AbridgedEnrollee tag -- so add it to the list
                                    if (currentListItem != null) {

                                        // Add this object to the list
                                        itemList.add(currentListItem);


                                        if (itemList.size() == TOTAL_RECORDS_PER_FILE) {
                                            // write the information to a file



                                            // Clear the list
                                            itemList.clear();

                                        }
                                    }
                                    break;

                                case "companyId":
                                    currentListItem.setCompanyId(tagContent);
                                    break;

                                case "EnrollmentDate":
                                    currentListItem.setEnrollmentDate(tagContent);
                                    break;

                                case "PersonType":
                                    currentListItem.setPersonType(tagContent);
                                    break;

                                case "SocialSecurityNumber":
                                    currentListItem.setSocialSecurityNumber(tagContent);
                                    break;

                                case "LastName":
                                    currentListItem.getPrimaryName().setLastName(tagContent);
                                    break;

                                case "FirstName":
                                    currentListItem.getPrimaryName().setFirstName(tagContent);
                                    break;

                                case "MiddleName":
                                    currentListItem.getPrimaryName().setMiddleName(tagContent);
                                    break;
                            }
                            break;

                        case XMLStreamConstants.START_DOCUMENT:
                            itemList = new ArrayList<>();
                            break;
                    }

                }

                assertTrue(true);
            }


        }


 
