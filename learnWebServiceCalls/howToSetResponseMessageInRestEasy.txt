How to Set the Response Message in a Spring MVC Rest Call
----------------------------------------------------------

Assumptions:
 A) You have a Spring MVC Web App
 B) You setup resteasy [see howToInstallRestEasyIntoSpringWebApp.txt]
 
 
  
  
Solution
--------
 A) For success message, end point returns this:
      return Response.ok().type(MediaType.APPLICATION_XML_TYPE).entity(sMessage).build();
    
 B) For failure message, end point returns this:
      return Response.serverError().type(MediaType.APPLICATION_XML_TYPE).entity(sMessage).build();
 
 
 
 
 
Example
-------
 1. Create an endpoint that returns a Response object
    
    
    package app1.rest;
    
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.stereotype.Component;
    import org.springframework.util.StringUtils;
    
    import javax.ws.rs.GET;
    import javax.ws.rs.Path;
    import javax.ws.rs.Produces;
    import javax.ws.rs.QueryParam;
    import javax.ws.rs.core.MediaType;
    import javax.ws.rs.core.Response;
    
    /**
     * Created by adam on 11/19/2015.
     */
    @Component
    @Path("/sample")
    public class SampleRestService
    {
        private static final Logger logger = LoggerFactory.getLogger(SampleRestService.class);
    
        public SampleRestService()
        {
            logger.debug("SampleRestService called");
        }
        
        /***************************************************************************
         * add()   EndPoint
         ****************************************************************************/
        @GET
        @Path("/add")
        @Produces(MediaType.TEXT_HTML)
        public Response add(@QueryParam("name") String aName)
        {
            logger.debug("add() started  aName={}", aName);
    
            try
            {
    
                if ( StringUtils.endsWithIgnoreCase(aName, "bad"))
                {
                    throw new RuntimeException("Something bad happened!!");
                }
    
                // Do something and is succeeds.  So, return 200 and a success message
                String sMessage = "I successfully added this: " + aName;
                return Response.ok().type(MediaType.APPLICATION_XML_TYPE).entity(sMessage).build();
            }
            catch (Exception e)
            {
               // Get a formatted message from an exception
                String sMessage = getFormattedMessageFromException(e);
                return Response.serverError().type(MediaType.APPLICATION_XML_TYPE).entity(sMessage).build();
            }
        }



        /***************************************************************************
         * getFormattedMessageFromException()
         ****************************************************************************/
        private String getFormattedMessageFromException(Exception aException)
        {
            StringBuilder sbMessage = new StringBuilder();
    
            String sStackTrace = getStackTraceAsString(aException);
    
            sbMessage.append("Message: ")
                     .append(aException.getMessage())
                     .append("\n\n")
                     .append("Cause: ")
                     .append(aException.getCause())
                     .append("\n\n")
                     .append("StackTrace:\n")
                     .append(sStackTrace);
    
            return sbMessage.toString();
        }
    
    
    
        /***************************************************************************
         * getStackTraceAsString()
         ****************************************************************************/
        public String getStackTraceAsString(Exception aException)
        {
            StringBuilder sb = new StringBuilder();
            for (StackTraceElement element : aException.getStackTrace()) {
                sb.append(element.toString());
                sb.append("\n");
            }
            return sb.toString();
        }