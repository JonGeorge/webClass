How to Store a Cache in the Spring Bean  (Using Gauva Libraries)
----------------------------------------------------------------

Assumptions:
 A) You want your java app to cache something (that might take awhile to load or calculate)
 
 B) You have added this dependency to your java app
        <dependency>    
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>18.0</version>
         </dependency>
 
 C) You have a database table called usa_states
    If not, run this SQL:
    
         CREATE TABLE usa_states(
          abbreviation varchar(2) not null,
          name         varchar(60) not null,
          primary key(abbreviation)
          );
          
         insert into usa_states(abbreviation, name) values('MD', 'Maryland');
         insert into usa_states(abbreviation, name) values('VA', 'Virigina'); 
         insert into usa_states(abbreviation, name) values('DC', 'Washington DC');
         commit;
    
 
 
 
What are the Guave libraries? 
-----------------------------
The Guava project contains several of Google’s core libraries that we rely on in our Java-based projects: collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O, and so forth.
 

The Guava LoadingCache class caches data in a key-object map, 
 + lets you define a cache refreshing mechanism, all done in a thread safe manner.

 
 
 
Procedures
----------
1) Create a utility class called SpringAppContextUtils
   NOTES:
     a) This class is a springbean
     b) This class is a helper class to allow any class get access to the ApplicationContext
     c) Once you have access to the ApplicationContext object, you can get access to a spring bean that holds the cache
     
     
        package app1.utilities;
        
        
        /**
         * To work, this line must be in the applicationContext.xml file
         *    <bean id="applicationContextProvider" class="app1.utilities.SpringAppContextUtils" />
         * 
         *  MySpringBean mySpringBean = (MySpringBean) SpringApplicationContext.getBean("mySpringBean");
         * // do something with MySpringBean
         * 
        * Create a class which implements ApplicationContextAware. 
        * The method, “setApplicationContext(…)” gets called during the creation of this bean
        * providing the reference to the context. 
        * 
        * Our program should store this for a later interaction with the context.
        */
        import org.springframework.beans.BeansException;
        import org.springframework.context.ApplicationContext;
        import org.springframework.context.ApplicationContextAware;
        
        public class SpringAppContextUtils implements ApplicationContextAware
        {
             private static ApplicationContext applicationContext = null;
        
              public static ApplicationContext getApplicationContext() {
                  return applicationContext;
              }
              
              public void setApplicationContext(ApplicationContext aApplicationContext) throws BeansException
              {
                   // Assign the ApplicationContext into a static variable
                   applicationContext = aApplicationContext;
              }
              
              
              public static Object getBean(String aName)
              {
                  if (applicationContext == null)
                  {
                      throw new RuntimeException("Error in SpringAppContextUtils.getBean().  The applicationContext is null");
                  }
                  
                  return applicationContext.getBean(aName);
              }
              
        }


2) Tell Spring that SpringAppContextUtils is a spring-bean
   Add this line to your WAR / WEB-INF / spring / applicationContext.xml
               
        <bean id="applicationContextProvider" class="app1.utilities.SpringAppContextUtils" />



3) Create a class called UnitedStatesCache
   NOTE:  This class will hold the cache object
   

        package app1.utilities;

        import java.util.concurrent.TimeUnit;
        import org.springframework.jdbc.core.JdbcTemplate;
        import org.springframework.jdbc.support.rowset.SqlRowSet;
        import com.google.common.cache.CacheBuilder;
        import com.google.common.cache.CacheLoader;
        import com.google.common.cache.LoadingCache;

        public class UnitedStatesCache 
        {

            // The cache holds key=<State abbreviation>   value=<Full State Name>
            private final LoadingCache<String, String> cache;
                 
            
            public UnitedStatesCache()
            {
                  cache = CacheBuilder.newBuilder()
                       .expireAfterWrite(1, TimeUnit.DAYS)         // Expire item after 1 day
                       .refreshAfterWrite(60, TimeUnit.MINUTES)    // Refresh item after 60 minutes
                       .build( new CacheLoader<String, String>()
                       {
                             
                           public String load( String aStateAbbreviation ) throws Exception 
                           {
                                 return queryDatabaseForOneValue(aStateAbbreviation);
                           }
                           
                       }
                 );
             }
            
            
            

            public String getFullName( String aStateAbbreviation ) 
            {
                  String sStateFullName =  cache.getUnchecked( aStateAbbreviation );
                  return(sStateFullName);
             }
            
            
            public void initializeCache() throws Exception
            {
                // Get a reference to the mySqlDataSource bean
                DataSource mysqlDataSource = (DataSource) SpringAppContextUtils.getBean("mysqlDataSource");

                JdbcTemplate jt = new JdbcTemplate(mysqlDataSource);
                String sSql = "select abbreviation, name from usa_states";
                
                SqlRowSet rs = jt.queryForRowSet(sSql);
                while (rs.next() )
                {
                    String sAbbreviatedName = rs.getString(1);
                    String sFullName = rs.getString(2);
                    
                    cache.put(sAbbreviatedName, sFullName);
                }
            }
            

            
            private String queryDatabaseForOneValue(String aStateAbbreviation) throws Exception
            {
                 // Get a reference to the mySqlDataSource bean
                DataSource mysqlDataSource = (DataSource) SpringAppContextUtils.getBean("mysqlDataSource");
 
                // Return the full name
                JdbcTemplate jt = new JdbcTemplate(mysqlDataSource);
                String sSql = "select name from usa_states where abbreviation=?";
                String sStateName = jt.queryForObject(sSql, String.class, aStateAbbreviation);
                return(sStateName);
             }
             
             
            public int getNumberOfElementsInCache()
            {
                Set<String> keyset = cache.asMap().keySet();
        
                return(keyset.size());
            }
             
        }


4) Tell Spring that UnitedStatesCache is a spring-bean
        <!-- Setup the usaCache spring bean -->
        <bean id="usaCache" class="app1.utilities.UnitedStatesCache" init-method="initializeCache"/>
  





5) Now, your applicationContext.xml should have these beans (in this order)
           
       <!-- Setup the applicationContextProvider bean                                    -->
       <!-- NOTE:  Make sure this bean is created *FIRST* so that other beans can use it --> 
       <bean id="applicationContextProvider" class="app1.utilities.SpringAppContextUtils" />
    
    
       <!-- Setup a spring bean that acts as a Database Connection pool                      -->
       <!-- NOTE:  Set destroy-method="close" so that Spring will close the connection pool  -->
       <bean id="mysqlDataSource" class="org.apache.tomcat.jdbc.pool.DataSource"  destroy-method="close">
            <property name="driverClassName"         value="com.mysql.jdbc.Driver"/>
            <property name="url"                     value="jdbc:mysql://127.0.0.1:3306/world"  />
            <property name="username"                value="root" />
            <property name="password"                value="secret" />
            <property name="initialSize"             value="1" />
            <property name="maxActive"               value="15" />
            <property name="removeAbandoned"         value="true" />
            <property name="removeAbandonedTimeout"  value="60000" />
            <property name="validationQuery"         value="select now() "/>
            <property name="validationQueryTimeout"  value="30000" />
            <property name="validationInterval"      value="30000" />
        </bean>
    
        <!-- Setup the usaCache spring bean -->
        <bean id="usaCache" class="app1.utilities.UnitedStatesCache" init-method="initializeCache"/>
    





6) Initialize the cache in MyApplicationWatcher.contextInitialized()
   NOTE:  Your "MyApplicationWatcher" class must extend ContextLoaderListener
   
   
   public class MyApplicationWatcher extends ContextLoaderListener
   {
     . . .
     
   
        /*******************************************************************************
         * contextInitialized()
         *******************************************************************************/
         @Override
         public void contextInitialized(ServletContextEvent aServetContextEvent)
        {
            . . .
             // Initialize Spring Context
             // NOTE:  Initializes spring beans (which initializes SpringAppContextUtils and useCache)
             // NOTE:  This must be done before using SpringAppContextUtils
             super.contextInitialized( aServetContextEvent);

             // Verify that the web app can talk with the database
             verifyDatabaseConnectionPool();

             // Verify that the cache is working
             verifyCaches();
        }



        /*******************************************************************************
         * verifyDatabaseConnectionPool()
         *******************************************************************************/
        private void verifyDatabaseConnectionPool() throws Exception
        {
            logger.debug("verifyDatabaseConnectionPool() started");
             
            // Get a reference to the mySqlDataSource bean
            DataSource mySqlDataSource = (DataSource) SpringAppContextUtils.getBean("mysqlDataSource");
             
            JdbcTemplate jt = new JdbcTemplate( mySqlDataSource );
            
            final String sSql = "Select now()";
            
            // Run a query -- which initialized the connection pool
            String sDatabaseTime = jt.queryForObject(sSql, String.class);
            
            logger.debug("verifyDatabaseConnectionPool() finished successfully.  Database Time is {}", sDatabaseTime);
        }
    
    
        
        /*******************************************************************************
         * verifyCaches()
         *******************************************************************************/
        private void verifyCaches() throws Exception
        {
            logger.debug("verifyCaches() started");
             
             // UnitedStatesCache is a spring-bean.  Get a reference to it
             UnitedStatesCache usaCache = (UnitedStatesCache) SpringAppContextUtils.getBean("usaCache");
             
             if (usaCache == null) 
             {
                 throw new RuntimeException("Error in verifyCaches():  The usaCache is null.");
             }
             
             String sExpectedNameForMD = "Maryland";
             String sNameFoundInCacheForMd = usaCache.getFullName("MD");
             if (! sExpectedNameForMD.equalsIgnoreCase(sNameFoundInCacheForMd))
             {
                 throw new RuntimeException("Error in verifyCaches():  I expected to get " + sExpectedNameForMD + " but instead I got " + sNameFoundInCacheForMd);
             }
            
             logger.debug("This cache has {} elements.", usaCache.getNumberOfElementsInCache() );
             if (usaCache.getNumberOfElementsInCache() < 3)
             {
                 throw new RuntimeException("Error in verifyCaches():  The cache has fewer than 3 items.  This is bad");
             }
    
             logger.debug("verifyCaches() finished successfully.");
        }

    
        
        
7) Now, Your controllers can get to the cache using the request object
   NOTES:
     a) Because we are using SpringAppContextUtils.getBean("usaCache"),
        we can get access to the cache from *anywhere* within the Spring Web App
        
        *OR*
        
     b) Have Spring inject the usaCache bean using this
         @Resource
         private UnitedStatesCache usaCache;  



Example of WelcomeController getting usaCache using  SpringAppContextUtils.getBean("usaCache")
-----------------------------------------------------------------------------------------------  
@Controller
public class WelcomeController 
 {
    
    /**********************************************************************
     * settingsShow()
     * 
     ***********************************************************************/
    @RequestMapping(value="/settings", method=RequestMethod.GET)
    public ModelAndView settingsShow( Model aModel )
    {
        logger.debug("settingsShow() started");
                
        // Create a modelAndView object
        ModelAndView mav = new ModelAndView();
        
        // Show the welcome.jsp page
        mav.setViewName("settings.jsp");
      
        
        // UnitedStatesCache is a spring-bean.  Get a reference to it
        UnitedStatesCache usaCache = (UnitedStatesCache) SpringAppContextUtils.getBean("usaCache");

        String mdFullName = usaCache.getFullName("MD");
        String vaFullName = usaCache.getFullName("VA));
        String dcFullName = usaCache.getFullName("DC");
        
        
        logger.debug("settingsShow() finished");
        return mav;
    }

}



Example of WelcomeController getting usaCache using Spring Injection
--------------------------------------------------------------------    
@Controller
public class WelcomeController 
 {
    

    @Resource
    private UnitedStatesCache usaCache;         // Spring injects the bean

    
    
    /**********************************************************************
     * settingsShow()
     * 
     ***********************************************************************/
    @RequestMapping(value="/settings", method=RequestMethod.GET)
    public ModelAndView settingsShow( Model aModel )
    {
        logger.debug("settingsShow() started");
                
        // Create a modelAndView object
        ModelAndView mav = new ModelAndView();
        
        // Show the welcome.jsp page
        mav.setViewName("settings.jsp");
        
        String mdFullName = usaCache.getFullName("MD");
        String vaFullName = usaCache.getFullName("VA));
        String dcFullName = usaCache.getFullName("DC");
        
        
        logger.debug("settingsShow() finished");
        return mav;
    }

 }   