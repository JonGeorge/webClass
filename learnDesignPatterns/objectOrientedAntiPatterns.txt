Object-oriented design anti-patterns
------------------------------------
 1. Anemic Domain Model: The use of domain model without any business logic.
    The domain model's objects cannot guarantee their correctness at any moment,
    because their validation and mutation logic is placed somewhere outside (most likely in multiple places).
 2. BaseBean: Inheriting functionality from a utility class rather than delegating to it
 3. Call super: Requiring subclasses to call a superclass's overridden method
 4. Circle-ellipse problem: Subtyping variable-types on the basis of value-subtypes
 5. Circular dependency: Introducing unnecessary direct or indirect mutual dependencies between objects or software modules
 6. Constant interface: Using interfaces to define constants
 7. God object: Concentrating too many functions in a single part of the design (class)
 8. Object cesspool: Reusing objects whose state does not conform to the (possibly implicit) contract for re-use
 9. Object orgy: Failing to properly encapsulate objects permitting unrestricted access to their internals
10. Poltergeists: Objects whose sole purpose is to pass information to another object
11. Sequential coupling: A class that requires its methods to be called in a particular order
12. Yo-yo problem: A structure (e.g., of inheritance) that is hard to understand due to excessive fragmentation
13. Hurry up and wait: One or more asynchronous events triggered in the constructor of an object
