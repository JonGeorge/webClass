Software Design Anti-Patterns
-----------------------------
 1. Abstraction inversion: Not exposing implemented functionality required by users, so that they re-implement it using higher level functions
 2. Ambiguous viewpoint: Presenting a model (usually Object-oriented analysis and design (OOAD)) without specifying its viewpoint
 3. Big ball of mud: A system with no recognizable structure
 4. Database-as-IPC: Using a database as the message queue for routine interprocess communication where a much more lightweight mechanism would be suitable
 5. Gold plating: Continuing to work on a task or project well past the point at which extra effort is adding value
 6. Inner-platform effect: A system so customizable as to become a poor replica of the software development platform
 7. Input kludge: Failing to specify and implement the handling of possibly invalid input
 8. Interface bloat: Making an interface so powerful that it is extremely difficult to implement
 9. Magic pushbutton: Coding implementation logic directly within interface code, without using abstraction
10. Race hazard: Failing to see the consequence of different orders of events
11. Stovepipe system: A barely maintainable assemblage of ill-related components

