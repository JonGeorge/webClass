How to Build a Redirector Web App
---------------------------------
Redirector webapps are handy for 2 specific situations:
 Case 1: The case when you rename your webapp
 
    Suppose you create a webapp found here:
      http://www.mycompany.com/trackHours
    
    Then, you decide to rename your web application do this:
      http://www.mycompany.com/trackTime
      
    Users who have your old web app bookmarked will get a 404-not-found error.

 Case 2: The case when you are upgrading your webapp and the upgrade process takes more than 30 minutes
    Users who visit your old website (while the upgrade is in progress) could see errors
    Instead, we want to redirect users to a 'upgrade-in-progress' page
    



ASSUMPTIONS:
  A) You have a destination web page located here
        https://traderres.github.io/webClass/updateInProgress.html
        
  B) You want users who visit 
        http://localhost:8080/trackHours/
     To be redirected to here:
         https://traderres.github.io/webClass/updateInProgress.html
         
         

The Solution: 
 a) Create a redirector webapp called trackHours.war
 b) This trackHours.war file will use urlRewrite to redirect users to the new site
 
 
 

Procedure
---------
 1. Create your updateInProgress.html page on your github site


     
     
 2. Create the webproject in Eclipse
    a. Run Eclipse
    b. Pull File / New Project...
    c. Select Web / Dynamic Web Project and press "Next"
    d. In the "Dynamic Web Project" screen
       1. Project Name:  redirector
          Press "Next"
           
       2. In the Java screen, use the defaults and press "Next"
       3. In the Web Module screen,
            Context root: redirector
            Content directory: WAR
            Check the checkbox that says "Generate web.xml deployment descriptor"
            Press "Finish"
        
        
2a. If you use ANT, follow these steps to add Java dependencies
    Install urlrewritefilter-4.0.4.jar to your Project's WAR / WEB-INF / lib directory
       1. Go to http://mvnrepository.com/artifact/org.tuckey/urlrewritefilter/4.0.4
       2. Click "Download (JAR)"
       3. Save the file to your c:\vault
       4. Drag & Drop urlrewritefilter-4.0.4.jar to your Project's WAR / WEB-INF / lib directory
        
        
        
2b. If you use Maven, follow these steps to add Java dependencies 
    a. Right-click on redirector -> Configure -> Convert to Maven Project
    b. In the Maven POM screen
        Group Id:     redirector
        Artifact id:  redirector
        Version:      0.0.1-SNAPSHOT
        Packaging:    war
        press "Finish"
    
    c. Add the dependencies
       Right-click on redirector -> Maven -> Add Depenency
       
        
       NOTE:  Or, add this to your pom.xml
      
        <dependency>
            <groupId>org.tuckey</groupId>
            <artifactId>urlrewritefilter</artifactId>
            <version>4.0.4</version>
        </dependency>

       Press OK
       
       
       
 3. Add the following to the bottom of your WAR / WEB-INF / web.xml file

        <filter>
            <filter-name>UrlRewriteFilter</filter-name>
            <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
        </filter>
        <filter-mapping>
            <filter-name>UrlRewriteFilter</filter-name>
            <url-pattern>/*</url-pattern>
            <dispatcher>REQUEST</dispatcher>
            <dispatcher>FORWARD</dispatcher>
        </filter-mapping>
        

    So, your web.xml should look like this:
    
        <?xml version="1.0" encoding="UTF-8"?>
        <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
          <display-name>redirector</display-name>
          <welcome-file-list>
            <welcome-file>index.jsp</welcome-file>
          </welcome-file-list>
          
          
            <filter>
                <filter-name>UrlRewriteFilter</filter-name>
                <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
            </filter>
            <filter-mapping>
                <filter-name>UrlRewriteFilter</filter-name>
                <url-pattern>/*</url-pattern>
                <dispatcher>REQUEST</dispatcher>
                <dispatcher>FORWARD</dispatcher>
            </filter-mapping>
          
        </web-app>


 4. Create a file called urlrewrite.xml file in the  WEB-INF / classes directory
    
        <?xml version="1.0" encoding="utf-8"?>
        
        <!DOCTYPE urlrewrite
                PUBLIC "-//tuckey.org//DTD UrlRewrite 4.0//EN"
                "http://www.tuckey.org/res/dtds/urlrewrite4.0.dtd">
        
        <urlrewrite default-match-type="wildcard">
        
            <rule>
                <!-- Redirect anyone visiting this web page to this external site -->
                <from>/*</from>
                <to type="permanent-redirect">https://traderres.github.io/webClass/updateInProgress.html</to>
            </rule>
        
        </urlrewrite>
        
    
    
   

5. Build your redirector.war file
   NOTE:  If you use maven, then run mvn package
   NOTE:  If you use ANT, then insert your ANT build script and run ANT buildWarDev
   
   
   
6. Rename your redirector.war file to trackHours.war



7. Deploy your trackHours.war to the same place you would deploy your *real* webapp

   Now, when users visit your trackHours web app, they are redirected the update-in-progress page
   
   
