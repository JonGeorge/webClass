Lesson:  Improve the Lookup Factory by Retrieving multiple Lookups
------------------------------------------------------------------
Problem:  Page views needs to get *multiple* lookup values
          We don't want the front-end to make 4 REST calls to get lookup values
          We want to make just 1 REST call to get all of the lookup values

Approach
 1) Create a LookupFactory method that will invoke a
    *single* REST call that will return a map of *multiple* lookup values
 2) Adjust the routes.js resolve method to call it and inject it into the main.controller.js



Procedure
---------
 1. Add a method to the LookupFactory to call this new REST endpoint
    a. Go to webapp/src/main/resources/public/resources/factories/lookup.factory.js

    b. Add this method:

            /*
             * Make a REST call that returns a map of lookupData
             * -- If called with a list of ['priorities', 'status']
             *    then returns a map of lookups
             *       {
             *         'status':      [list of LookupDTOs ],
             *         'priorities':  [list of LookupDTOs]
             *       }
             *
             */
            function getMapOfLookupsWithTypes(aTypes) {

                let csvTypes = aTypes.join(",")

                return $http.get('./api/lookups/map/' + csvTypes).then(function(results) {
                    // The REST call returned with a 200-299 status code

                    // So, return some data
                    return results.data;
                })
            }

     c. Make this new method publicly accessable by adding this line:
           LookupFactory.getMapOfLookupsWithTypes = getMapOfLookupsWithTypes;


     When complete, your LookupFactory should look like this:

          (function(){
              //
              //  LookupFactory holds methods to get lookup values from the app server
              //
              angular.module('app1')
                  .factory('LookupFactory', ['$http', '$q', init] )

              function init($http, $q) {
                  let LookupFactory = {};

                  LookupFactory.getLookupWithTypeName = getLookupWithTypeName;
                  LookupFactory.getMapOfLookupsWithTypes = getMapOfLookupsWithTypes;
                  return LookupFactory;



                  /*
                   * Make a REST call and returns a list of lookup DTOs with the passed-in category name
                   */
                  function getLookupWithTypeName(aType) {
                      console.log('getLookupWithTypeName() started.');

                      return $http.get('./api/lookups/' + aType + '/display_order').then(function(results) {
                          // The REST call returned with a 200-299 status code

                          // So, return some data
                          return results.data;
                      })
                  }



                  /*
                   * Make a REST call that returns a map of lookupData
                   * -- If called with a list of ['priorities', 'status']
                   *    then returns a map of lookups
                   *       {
                   *         'status':      [ list of LookupDTOs ],
                   *         'priorities':  [ list of LookupDTOs ]
                   *       }
                   *
                   */
                  function getMapOfLookupsWithTypes(aTypes) {

                      let csvTypes = aTypes.join(",")

                      return $http.get('./api/lookups/map/' + csvTypes).then(function(results) {
                          // The REST call returned with a 200-299 status code

                          // So, return some data
                          return results.data;
                      })
                  }


              }
          })();


 2. Change your routes.js to call the new LookupFactory.getMapOfLookupsWithTypes()
    a. Go to webapp/src/main/resources/public/resources/config/routes.js

    b. Edit the getAddReportState() method:
       1) Remove the call for lookupPriorities

            lookupMap: function(LookupFactory) {
                return LookupFactory.getLookupWithTypeName('priority')
             }


       2) Add a call for lookupMap:

            lookupMap: function(LookupFactory) {
               // Make 1 REST call to get a map of multiple lookups
               return LookupFactory.getMapOfLookupsWithTypes( ['priority', 'report_type'])
            }



       When done, your getAddReportState() method should look like this:

          function getAddReportState() {
              return {
                  url: URL_PAGE_PREFIX + '/reports/add',
                  templateUrl: './resources/features/reports/add_report/index.html',
                  controller: 'addReport',
                  controllerAs: 'addReportVM',
                  resolve: {

                      lookupMap: function(LookupFactory) {
                          // Make 1 REST call to get a map of multiple lookups
                          return LookupFactory.getMapOfLookupsWithTypes( ['priority', 'report_type', 'source'])
                      }
                  }
              }
          }



 3. Change your add-reports main.controller.js so that the lookupMap is injected
    a. Go to webapp/src/main/resources/public/resources/features/reports/add_report/main.controller.js

    b. Remove the injected lookupData from the top

    c. Inject lookupMap to the top

    d. Replace the addReportVM.lookupMap so that it refers to the passed-in lookupMap

            // addReportVM.lookupData holds a map of lookup info
            // addReportVM.lookupData.priority holds a list of LookupDTO for the priorities
            // addReportVM.lookupData.report_type holds a list of LookupDTOs for the report types
            addReportVM.lookupMap = lookupMap;



 4. Update the ng-repeat calls in your index.html so that they use the correct map
    a. Go to webapp/src/main/resources/public/resources/features/reports/add_report/index.html

    b. For the "priority" dropdown make sure you loop through addReportVM.lookupMap.priority
            <md-option ng-value="lookup" ng-repeat="lookup in addReportVM.lookupMap.priority track by lookup.id">
                {{lookup.name}}
            </md-option>

    c. For the "report type" dropdown make sure you loop through addReportVM.lookupMap.report_type
            <md-option ng-value="lookup" ng-repeat="lookup in addReportVM.lookupMap.report_type track by lookup.id">
               {{lookup.name}}
            </md-option>


 5. Verify your priorities and report type dropdown values still appear on the front-end
     a. Activate your webapp with the debugger
     b. Open a browser
     c. Connect to http://localhost:8080/app1
     d. Go to "Add Report"
        -- You should be able to click on the priorities   drop down and see the 4 priority values
        -- You should be able to click on the Report Types drop down and see the 3 report types
