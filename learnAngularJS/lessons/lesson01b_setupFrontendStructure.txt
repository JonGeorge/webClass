Lesson:  Add Angular Front End Structure
----------------------------------------
As you add additional angular page views, you will need a structure
to make sure that you can grow.

Each feature will have this directory structure
   webapp/src/main/resources/public/
        app.html                   # holds main page

   webapp/src/main/resources/public/resources/
            package.json
            app.js

            config/
                routes.js          # holds the routes, and special pages
                welcome.html       # holds the view displayed by default
                404.html           # holds the view displayed when a user goes to an unknown page

            factories/             # holds factories that are not page-specific

            css/

            directives/

            features/
                 pages1/
                        main.controller.js
                        main.factory.js
                        popup.controller.js
                        popup.html
                        index.html
                        styles.css

            images/

            node_modules/



Procedure
---------
 1. Create the directory structure
    unix> cd ~/intellijProjects/app1
    unix> mkdir -p webapp/src/main/resources/public/resources
    unix> mkdir -p webapp/src/main/resources/public/resources/config
    unix> mkdir -p webapp/src/main/resources/public/resources/css
    unix> mkdir -p webapp/src/main/resources/public/resources/directives
    unix> mkdir -p webapp/src/main/resources/public/resources/factories
    unix> mkdir -p webapp/src/main/resources/public/resources/features
    unix> mkdir -p webapp/src/main/resources/public/resources/images
-

 2. Initialize the package.json
     ** If you already have a package.json, then skip this one step **
    unix> cd webapp/src/main/resources/public/resources
    unix> npm init -y


 3. Install javascript dependencies (using NPM)
    a. Put yourself in the directory of where the package.json is located
       unix> cd ~/intellijProjects/app1/webapp/src/main/resources/public/resources

    b. Install Angular
       unix> npm install angular --save

    a. Install @uirouter
       unix> npm install @uirouter/angularjs --save

    b. Install angular-animate
       unix> npm install angular-animate --save

    c. Install angular-material
       unix> npm install angular-material --save

    d. Install angular messages
       unix> npm install angular-messages --save

    e. Install angular UI grid
       unix> npm install angular-ui-grid --save

    f. Install angular-aria
       unix> npm install angular-aria --save

    g. Install angular-resizable
       unix> npm install angular-resizable --save

    Now, your package.json should look something like this:
    unix> more package.json
        {
          "name": "resources",
          "version": "1.0.0",
          "description": "",
          "main": "index.js",
          "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1"
          },
          "keywords": [],
          "author": "",
          "license": "ISC",
          "dependencies": {
            "@uirouter/angularjs": "^1.0.15",
            "angular": "^1.6.9",
            "angular-animate": "^1.6.9",
            "angular-aria": "^1.6.9",
            "angular-material": "^1.1.7",
            "angular-messages": "^1.6.9",
            "angular-resizable": "^1.2.0",
            "angular-ui-grid": "^4.2.4"
          }
        }


 4. Create this file:  app.js
    a. **OPTIONAL**
       Tell Intellij to show empty middle directories
       Right-click on the "Project" tab [on the left side] -> Uncheck "Hide Empty Middle Packages"
       -- Now, Intelli will show you empty directories

    b. Right-click on app1/webapp/src/main/resources/public/resources/config -> New -> File
       Filename:  app.js

    c. Copy this to your new file

        (function(){

            /*******************************************************
             * app.js
             *******************************************************/
            var app = angular.module('app1', [
                'app1.routes'
            ]);

            app.run(['$http', runCallback]);
            function runCallback($http) {
                console.log('app1 runCallback() started')
            }

        })();


 5. Create this file:  routes.js
    a. Right-click on app1/webapp/src/main/resources/public/resources/config -> New -> File
       Filename:  routes.js

    b. Copy this to your new file

         (function(){

             /*******************************************************
              * routes.js
              *******************************************************/
             angular.module('app1.routes', ['ui.router'])
                 .config(['$stateProvider', '$urlRouterProvider', routingCallback]);

             function routingCallback($stateProvider, $urlRouterProvider) {
                 console.log('routingCallback() started.');

                 var PAGE_PREFIX = '/page';

                 $stateProvider
                     .state('page1', getPage1State())
                     .state('page2', getPage2State());


                 function getPage1State() {
                     return {
                         url: PAGE_PREFIX + '/page1',
                         template: '<h2>page1</h2>'
                     }
                 }

                 function getPage2State() {
                     return {
                         url: PAGE_PREFIX + '/page2',
                         template: '<h2>page2</h2>'
                     }
                 }
             }

         })();


 6. Update this file:  app.html
    a. Edit app1/webapp/src/main/resources/public/app.html

    b. Replace your app.html with this

         <!DOCTYPE html>
         <html lang="en" data-ng-app="app1">
         <head>
             <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

             <title>Main Page</title>

             <!-- Load all CSS Files -->


             <!-- Load all NPM JavaScript Dependencies -->
             <script src="./resources/node_modules/angular/angular.js"></script>
             <script src="./resources/node_modules/@uirouter/angularjs/release/angular-ui-router.min.js"></script>

             <!-- Load all Custom JavaScript files -->
             <script src="./resources/config/app.js"></script>
             <script src="./resources/config/routes.js"></script>


             <style type="text/css">
                 .active {
                     color: red; font-weight: bold;
                 }
             </style>
         </head>

         <body>

         <h2>Main Page</h2>


         <div>
             <!-- The angular ui-sref directive binds a link tag to a state.                              -->
             <!-- If the state has a URL, the directive will generate the href attribute for you -->
             <a title="View page 1" ui-sref-active="active" ui-sref="page1">Page1</a> <br/>
             <a title="view page 2" ui-sref-active="active" ui-sref="page2">Page2</a>
         </div>
         <br/>


         <ui-view>
             <!-- The ui-router needs this to make it work -->
         </ui-view>

         </body>
         </html>


 7. Make sure your default controller forwards the user to app.html
    a. Edit your WelcomeController

    b. Make sure you have something like this in it:

            /**********************************************************************
             * showDefaultPage()
             *
             * If the user connects to http://localhost:8080/app1 or http://localhost:8080/app1/page/...
             * Then take the user to the main landing page
             *
             * This is needed to ensure that page refreshes keep the user in the single-page-app
             ***********************************************************************/
            @RequestMapping(value = {"/", "/page/**"}, method = RequestMethod.GET, produces = "text/plain")
            public String showDefaultPage()
            {
                logger.debug("showDefaultPage() started");

                // Forward the user to the main page
                return "forward:/app.html";
            }


 8. Verify your app1/webapp/src/main has these directories:
        ./src/main/java/com/lessons/App.java                   # SpringBoot starts here
        ./src/main/java/com/lessons/controllers/WelcomeController.java
        ./src/main/resources/application.yaml
        ./src/main/resources/logback.xml

        ./src/main/resources/public/resources/node_modules/@uirouter/            # All of the angular dependencies should be here
        ./src/main/resources/public/resources/node_modules/angular/
        ./src/main/resources/public/resources/node_modules/angular-animate/
        ./src/main/resources/public/resources/node_modules/angular-aria/
        ./src/main/resources/public/resources/node_modules/angular-material/
        ./src/main/resources/public/resources/node_modules/angular-messages/
        ./src/main/resources/public/resources/node_modules/angular-resizable/
        ./src/main/resources/public/resources/node_modules/angular-ui-grid

        ./src/main/resources/public/resources/config/app.js      # Holds Angular app definition
        ./src/main/resources/public/resources/config/routes.js   # Holds Angular routes
        ./src/main/resources/public/resources/package.json       # Tells NPM what JS dependencies to download
        ./src/main/resources/public/app.html                     # Holds the HTML for main page


 9. Verify it works
    a. Go to your App.java class
    b. Right-click on the main() method -> Debug 'App'
    c. Open a browser
    d. Go to http://localhost:8080/app1
    e. Click on the link to the Angular Page
