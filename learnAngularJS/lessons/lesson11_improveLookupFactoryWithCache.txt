Lesson:  Setup a Cache for the Lookup Factory
---------------------------------------------
Problem:  Lots of pages needs to get lookup values
          Calling the LookupFactory all of the time is wasteful
Solution: Add a caching mechanism to the Lookup Factory so that it looks in the cache first



Procedure
---------
Edit the lookup.factory.js file so that it checks a cache *before* making a REST call
 1. Go to webapp/src/main/resources/public/resources/factories/lookup.factory.js

 2. Add these internal methods:

               function getFromLookupCache(aName) {
                   return LookupFactory.cache[aName];
               }

               function addToLookupCache(aName, aCacheData) {
                   LookupFactory.cache[aName] = aCacheData;
               }

               function emptyLookupCache() {
                   LookupFactory.cache = {};
               }


 3. Initialize the cache when the factory is first created by
    calling emptyLookupCache right before the return LookupFactory call
             // Initialize/empty the cache (the first time this factory is created)
             emptyLookupCache();


 4. Add these 2 helper methods:

               /*
                  * Return a map of lookups that were found in the cache
                  *      {
                  *        'status':      [list of LookupDTOs ],
                  *        'priorities':  [list of LookupDTOs]
                  *      }
                  */
                 function getMapOfItemsFromCache(aTypes) {
                     let mapCachedItems = { };

                     // Loop through the list of types
                     aTypes.forEach(function (type) {
                         let lookupInfo = getFromLookupCache(type);

                         if (lookupInfo != null) {
                             // This lookup was found in the cache.  So, add it to the returned map

                             mapCachedItems[type] = lookupInfo;
                         }
                     });

                     return mapCachedItems;
                 }


                 /*
                  * Returns a list of types that are not found in the cache
                  */
                 function getListOfTypesNotFoundInCache(aTypes) {
                     let missingTypes = [];

                     // Loop through the list of types
                     aTypes.forEach(function (type) {
                         if (getFromLookupCache(type) == null) {
                             missingTypes.push(type);
                         }
                     });

                     return missingTypes;
                 }


 5. Change the getMapOfLookupsWithTypes() so that it applies this logic:
    If all elements are found in the cache
        then return a resolved promise with the map of lookup types
    Else
        Identify elements not found in the cache
        Make a REST call to get the missing lookups
        Upon success, add the missing items to the cache
        Return all of the data


    When completed, the LookupFactory.getMapOfLookupsWithTypes() should look like this:

          /*
           * Make a REST call that returns a map of lookupData
           *  returns a map of lookups
           *       {
           *         'status':      [list of LookupDTOs ],
           *         'priorities':  [list of LookupDTOs]
           *       }
           *
           *  If all elements are found in the cache
           *         then return a resolved promise with the map of lookup types
           *  Else
           *     Identify elements not found in the cache
           *     Make a REST call to get the missing lookups
           *     Upon success, add the missing items to the cache
           */
          function getMapOfLookupsWithTypes(aTypes) {

              let mapItemsFoundInCache = getMapOfItemsFromCache(aTypes);
              if (Object.keys(mapItemsFoundInCache).length == aTypes.length) {
                  // All lookups are found in cache.  So, return a reoslved promise that holds the map of cache items
                  return Promise.resolve(mapItemsFoundInCache);
              }

              let listMissingTypes = getListOfTypesNotFoundInCache(aTypes);

              // Make a REST call to get those elements that were missing
              let csvTypes = listMissingTypes.join(",");

              return $http.get('./api/lookups/map/' + csvTypes).then(function(results) {
                  // The REST call returned with a 200-299 status code

                  let mapNonCachedLookups = results.data;

                  // Start the map of returned lookup data with items found in the cache
                  let returnedLookupMap = mapItemsFoundInCache;

                  // Loop through all of the keys that were not in the cache
                  Object.keys(mapNonCachedLookups).forEach(function(type) {
                      let lookupTypeInfo =  mapNonCachedLookups[type];

                      // Add this info to the cache
                      addToLookupCache(type, lookupTypeInfo);

                      // Add this info to the returnedMap as well
                      returnedLookupMap[type] = lookupTypeInfo;
                  });

                  // Return the map of lookup info
                  return returnedLookupMap;
              })
          }


    When completed, the lookup.factory.js file should look like this:

         (function(){
             //
             //  LookupFactory holds methods to get lookup values from the app server
             //
             angular.module('app1')
                 .factory('LookupFactory', ['$http', init] )

             function init($http) {
                 let LookupFactory = {};

                 LookupFactory.getLookupsWithTypeName = getLookupsWithTypeName;
                 LookupFactory.getMapOfLookupsWithTypes = getMapOfLookupsWithTypes;


                 // Initialize/empty the cache (the first time this factory is created)
                 emptyLookupCache();

                 return LookupFactory;


                 function getFromLookupCache(aName) {
                     return LookupFactory.cache[aName];
                 }

                 function addToLookupCache(aName, aCacheData) {
                     LookupFactory.cache[aName] = aCacheData;
                 }

                 function emptyLookupCache() {
                     LookupFactory.cache = {};
                 }


                 /*
                  * Return a map of lookups that were found in the cache
                  *      {
                  *        'status':      [list of LookupDTOs ],
                  *        'priorities':  [list of LookupDTOs]
                  *      }
                  */
                 function getMapOfItemsFromCache(aTypes) {
                     let mapCachedItems = { };

                     // Loop through the list of types
                     aTypes.forEach(function (type) {
                         let lookupInfo = getFromLookupCache(type);

                         if (lookupInfo != null) {
                             // This lookup was found in the cache.  So, add it to the returned map

                             mapCachedItems[type] = lookupInfo;
                         }
                     });

                     return mapCachedItems;
                 }


                 /*
                  * Returns a list of types that are not found in the cache
                  */
                 function getListOfTypesNotFoundInCache(aTypes) {
                     let missingTypes = [];

                     // Loop through the list of types
                     aTypes.forEach(function (type) {
                         if (getFromLookupCache(type) == null) {
                             missingTypes.push(type);
                         }
                     });

                     return missingTypes;
                 }

                 /*
                  * Make a REST call that returns a map of lookupData
                  *  returns a map of lookups
                  *       {
                  *         'status':      [list of LookupDTOs ],
                  *         'priorities':  [list of LookupDTOs]
                  *       }
                  *
                  *  If all elements are found in the cache
                  *         then return a resolved promise with the map of lookup types
                  *  Else
                  *     Identify elements not found in the cache
                  *     Make a REST call to get the missing lookups
                  *     Upon success, add the missing items to the cache
                  */
                 function getMapOfLookupsWithTypes(aTypes) {

                     let mapItemsFoundInCache = getMapOfItemsFromCache(aTypes);
                     if (Object.keys(mapItemsFoundInCache).length == aTypes.length) {
                         // All lookups are found in cache.  So, return a reoslved promise that holds the map of cache items
                         return Promise.resolve(mapItemsFoundInCache);
                     }

                     let listMissingTypes = getListOfTypesNotFoundInCache(aTypes);

                     // Make a REST call to get those elements that were missing
                     let csvTypes = listMissingTypes.join(",");

                     return $http.get('./api/lookups/map/' + csvTypes).then(function(results) {
                         // The REST call returned with a 200-299 status code

                         let mapNonCachedLookups = results.data;

                         // Start the map of returned lookup data with items found in the cache
                         let returnedLookupMap = mapItemsFoundInCache;

                         // Loop through all of the keys that were *NOT* in the cache
                         //  1) add them to the cache
                         //  2) add them to the returned lookupMap
                         Object.keys(mapNonCachedLookups).forEach(function(type) {
                             let lookupTypeInfo = mapNonCachedLookups[type];

                             // Add this info to the cache
                             addToLookupCache(type, lookupTypeInfo);

                             // Add this info to the returnedMap as well
                             returnedLookupMap[type] = lookupTypeInfo;
                         });

                         // Return the map of lookup info
                         return returnedLookupMap;
                     })
                 }

                 /*
                  * Make a REST call and returns a list of lookup DTOs with the passed-in category name
                  */
                 function getLookupsWithTypeName(aType) {
                     return $http.get('./api/lookups/' + aType).then(function(results) {
                         // The REST call returned with a 200-299 status code

                         // So, return some data
                         return results.data;
                     })
                 }


             }
         })();



 7. Verify the lookups are cached
      a. Activate your webapp with the debugger

      b. Open a browser

      c. Connect to http://localhost:8080/app1

      d. Press F12 to see your "Developer Tools"
         -- Click on the Network tab so you can see all individual REST calls

      e. Click on "Add Reports"   [first time]
         -- In the "Developer Tools", you should see a rest call to
               http://localhost:8080/app1/api/lookups/map/

      g. Click on "View Reports"  [we want to leave the "Add Reports" page]

      h. Click on "Add Report"    [second time we visited this page]
         -- This second time, you should *not* see a REST call to http://localhost:8080/app1/api/lookups/map/
            because the LookupFactory pulled the info out of its internal cache


