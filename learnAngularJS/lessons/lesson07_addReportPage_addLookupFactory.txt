Lesson:  "Add Report Page" -- invoke the Lookup REST call
----------------------------------------------------------
Problem:  I have an /api/lookups REST endpoint and now need to call it
Solution: Create a REST endpoint that will get lookup values

   Contract will be:  GET /api/lookups/{lookup_type}/{order by}


Approach
 1) Create a lookup.factory.js
 2) Change routes.js so that the lookup factory must be *resolved* before loading the "Add Reports" page
 3) Pass-in the Lookup data into the "Add Reports" page
 4) Change the dropdowns to use the Lookup data



Procedure
---------
 1. Create a lookup.factory.js
    a. Right-click on webapp/src/main/resources/public/resources/factories -> New File
       Filename:  lookup.factory.js

    b. Copy this to your newly-created lookup.factory.js

            (function(){
                //
                //  LookupFactory holds methods to get lookup values from the app server
                //
                angular.module('app1')
                    .factory('LookupFactory', ['$http', '$q', init] )

                function init($http, $q) {
                    let LookupFactory = {};

                    LookupFactory.getLookupWithTypeName = getLookupWithTypeName;

                    return LookupFactory;



                    /*
                     * Make a REST call and returns a list of lookup DTOs with the passed-in category name
                     */
                    function getLookupWithTypeName(aType) {
                        console.log('getLookupWithTypeName() started.');

                        return $http.get('./api/lookups/' + aType).then(function(results) {
                            // The REST call returned with a 200-299 status code

                            // So, return some data
                            return results.data;
                        })
                    }


                }
            })();

 2. Make sure your app.html loads this file on page startup
    a. Go to webapp/src/main/resources/public/app.html

    b. Add this line to it:
          <script src="./resources/factories/lookup.factory.js"></script>


    So, the top of your app.html should look something like this:

            <!DOCTYPE html>
            <html lang="en" data-ng-app="app1">
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
                <meta http-equiv="X-UA-Compatible" content="IE=edge">

                <title>App Main Page</title>

                <base href="/app1/">

                <!-- Include CSS Files -->
                <link rel="stylesheet" type="text/css" href="./resources/node_modules/angular-resizable/angular-resizable.min.css">
                <link rel="stylesheet" type="text/css" href="./resources/node_modules/angular-material/angular-material.min.css">
                <link rel="stylesheet" type="text/css" href="./resources/node_modules/angular-ui-grid/ui-grid.min.css">
                <link rel="stylesheet" type="text/css" href="./resources/node_modules/@fortawesome/fontawesome-free/css/all.css">
                <link rel="stylesheet" type="text/css" href="./resources/css/index.css">

                <!-- Load All Node Modules JavaScript Dependencies -->
                <script src="./resources/node_modules/angular/angular.js"></script>
                <script src="./resources/node_modules/@uirouter/angularjs/release/angular-ui-router.min.js"></script>
                <script src="./resources/node_modules/angular-aria/angular-aria.min.js"></script>
                <script src="./resources/node_modules/angular-animate/angular-animate.min.js"></script>
                <script src="./resources/node_modules/angular-material/angular-material.min.js"></script>
                <script src="./resources/node_modules/angular-messages/angular-messages.min.js"></script>
                <script src="./resources/node_modules/angular-sanitize/angular-sanitize.min.js"></script>
                <script src="./resources/node_modules/angular-scroll/angular-scroll.min.js"></script>
                <script src="./resources/node_modules/angular-resizable/angular-resizable.min.js"></script>
                <script src="./resources/node_modules/@fortawesome/fontawesome-free/js/all.js"></script>
                <script src="./resources/node_modules/angular-ui-grid/ui-grid.js"></script>
                <script src="./resources/node_modules/angular-ui-grid/ui-grid.exporter.js"></script>

                <!-- Load all custom JavaScript Files -->
                <script src="./resources/config/app.js"></script>
                <script src="./resources/config/routes.js"></script>
                <script src="./resources/config/state.js"></script>
                <script src="./resources/config/nav.controller.js"></script>

                <!-- Load all factories *before* loading feature controllers -->
                <script src="./resources/factories/lookup.factory.js"></script>

                <!-- Load all JavaScript files for the various features -->
                <script src="./resources/modules/features.js"></script>
                <script src="./resources/features/reports/view_reports/main.controller.js"></script>
                <script src="./resources/features/reports/add_report/main.controller.js"></script>
            </head>




 3. Change routes.js so that the resolve method calls the LookupFactory
     a. Go to webapp/src/main/resources/public/resources/config/routes.js

     b. Replace the getAddReportState() method so that the resolve section injects the LookupFactory

                function getAddReportState() {
                    return {
                        url: URL_PAGE_PREFIX + '/reports/add',
                        templateUrl: './resources/features/reports/add_report/index.html',
                        controller: 'addReport',
                        controllerAs: 'addReportVM',
                        resolve: {
                            lookupMap: function(LookupFactory) {
                                return LookupFactory.getMapOfLookupsWithTypes( ['priority', 'report_type', 'source'])
                            }
                        }
                    }
                }

  4. Change the main.controller.js so that it gets the lookupMap
     a. Go to webapp/src/main/resources/public/resources/reports/add_report/main.controller.js

     b. Inject the lookupMap into the top by changing the top lines:
             (function(){
                 angular.module('app.features')
                     .controller('addReport', ['$timeout', '$stateParams', '$scope', 'lookupMap', Callback])

                 function Callback($timeout, $stateParams, $scope, lookupMap) {
                     console.log('addReport controller started.');

                     let addReportVM = this;

     c. Set the addReportVM.lookupData to hold the map of lookup info
          addReportVM.lookupData = lookupMap;

     When done, your main.controller.js should look like this:

          (function(){
              angular.module('app.features')
                  .controller('addReport', ['$timeout', '$stateParams', '$scope', 'lookupMap', Callback])

              function Callback($timeout, $stateParams, $scope, lookupMap) {
                  console.log('addReport controller started.');

                  let addReportVM = this;

                  window.document.title = "Add Report | APP1";

                  addReportVM.addReport = addReport;
                  addReportVM.clearReport = clearReport;


                  // Set the lookupData to hold the injected lookupMap
                  addReportVM.lookupData = lookupMap;

                  // Clear-out the report fields on page load
                  clearReport();

                  addReportVM.$onInit = function() {
                      console.log('addReport onInit() started.');
                      console.log('addReport onInit() finished.');
                  };

                  console.log('addReport controller finished.');


                  function addReport() {
                      console.log('addReport() started.');
                  }

                  function clearReport() {
                      console.log('clearReport() started.');
                      addReportVM.new = { };
                  }

              }
          })();


  6. Verify that the "Add Report" controller is getting the lookupMap
     a. Go to http://localhost:8080/app1/page/reports/add
     b. Press F12 (to open your Developer Tools)
     c. Go to the "Console" in your Developer Tools
        -- You should see "addReport controller started.  lookupMap=....


 11. Change the "Priority" dropdown on the front-end to gets it values from addReportVM.lookupData.priority
     a. Go to the index.html
     b. Remove these bogus dropdown options:
             <md-option>priority 1</md-option>
             <md-option>priority 2</md-option>
             <md-option>priority 3</md-option>

     c. Insert this instead
             <md-option ng-value="lookup" ng-repeat="lookup in addReportVM.lookupData.priority track by lookup.id">{{lookup.name}}</md-option>

 12. Verify that the "Priority" dropdown is getting values from the database
     a. Go to http://localhost:8080/app1/page/reports/add
     b. Look at the priority dropdown
        -- It should now show the values found in your database




 13. Change the "Report Type" dropdown on the front-end to gets it values from addReportVM.lookupData.report_type
     a. Go to the index.html
     b. Remove these bogus dropdown options:
             <md-option>report type 1</md-option>
             <md-option>report type 2</md-option>
             <md-option>report type 3</md-option>

     c. Insert this instead
             <md-option ng-value="lookup" ng-repeat="lookup in addReportVM.lookupData.report_type track by lookup.id">{{lookup.name}}</md-option>

 14. Verify that the "Report Type" dropdown is getting values from the database
     a. Go to http://localhost:8080/app1/page/reports/add
     b. Look at the Report Type dropdown
        -- It should now show the values found in your database
