Lesson:  Compare @Component and @Bean Annotations
-------------------------------------------------


References
----------
http://stackoverflow.com/questions/10604298/spring-component-versus-bean

@Component (and @Service and @Repository) are used to auto-detect and auto-configure beans using classpath scanning. 
  -- There's an implicit one-to-one mapping between the annotated class and the bean (i.e. one bean per class). 
  -- Control of wiring is quite limited with this approach, since it's purely declarative.

@Bean is used to explicitly declare a single bean (rather than letting Spring do it automatically as above).
  -- It decouples the declaration of the bean from the class definition
  -- It  lets you create and configure beans exactly how you choose.



How to setup @component
-----------------------
The @Component annotation flags a bean so the component-scannign mechanism can pull it into the Spring application context

 1. Edit your application-context.xml and remove explicit beans 
    So, put @Component on top of a public class and you do not need to include it in your application-context.xml file.

 2. Edit your application-context.xml and turn on component scanning
    Add this to your application-context.xml:
    
      <context:component-scan base-package="com.something"/>
      
      NOTE:  When component-scan is declared, you do *NOT* need to declare context:annotation-confic 
             this is because autowiring is implicity enabled when component scanning is enabled
             
             

