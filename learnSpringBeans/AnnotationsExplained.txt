Explanation of Annotations Used by Spring
-----------------------------------------

Assumptions:
 A) You have a class called myProvider



@Component is a generic stereotype for any Spring-managed component
@Repository, @Service, and @Controller are specializations of @Component 

| Annotation | Meaning                                             |
+------------+-----------------------------------------------------+
| @Component | generic stereotype for any Spring-managed component |
| @Repository| stereotype for persistence layer                    |
| @Service   | stereotype for service layer                        |
| @Controller| stereotype for presentation layer (spring-mvc)      |



@Component is equivalent to

<bean>

@Service, @Controller , @Repository = {@Component + some more special functionality}


Procedures
----------
 1. Define In your applicationContext.xml file

  <!-- Auto load all @Component annotated objects -->
   <context:component-scan base-package="app1" />
   
   
Part 2: Put @Component on your class definition


package app1.services

@Component
public class myProvider 
{
   // my class will be a spring bean
}


The end result is that this class will be a Spring Bean and by default a singleton

NOTE:  
  1) Spring beans are all in singleton scope by default. 
  2) The only thing you have to have in mind is that you should *not* store state in field variables
      (they should only hold dependencies). 
  3) Thus your application will be thread-safe, and you want require a new instance of a bean each time. 
     In other words, your beans are stateless.
     
     
