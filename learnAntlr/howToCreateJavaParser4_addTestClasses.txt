How to Create an ANTLR Parser (add Test Classes)
------------------------------------------------

Assumptions:
 A) You have a Java JDK installed
 B) You have Maven installed
 C) You have IntelliJ Idea installed 
 
 
 
Procedures
----------
 1. Follow the procedures in howToCreateJavaParser3_withMixedCase.txt
 
 

 2. Open-up the queryParser project in Intellij


 3. Update the junit dependency to version 4.11 in your pom.xml
 
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency> 
 
 
 
 4. Create these test directories:
       /src/test/resources
  	   /src/test/java     
 
 
 
 5. Add a logback.xml used for test classes
    a. Right-click on /src/test/resources -> New File
       Filename:  logback.xml
       
    b. Copy this to your "test" logback.xml

		<?xml version="1.0" encoding="windows-1252" ?>
		<!DOCTYPE project>
		
		<configuration debug="false">
		    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		        <encoder>
		            <pattern>TL %d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
		        </encoder>
		    </appender>
		
		
		    <logger name="com.stuff" level="DEBUG" additivity="false">
		        <appender-ref ref="CONSOLE"/>
		    </logger>
		
		    <root level="INFO">
		        <appender-ref ref="CONSOLE"/>
		    </root>
		
		</configuration>

 
 6. Create your test files in /src/test/resources/
    a. Create this file:  input1a.txt
       1) Right-clik /src/test/resources -> New File -> input1a.txt
       2) Copy this to your file  [with no leading spaces or trailing spaces]
        
 			stuff
 			
    b. Create this file:  input1b.txt
       1) Right-clik /src/test/resources -> New File -> input1b.txt
       2) Copy this to your file  [with leading spaces but no trailing spaces]
        
 			  	stuff

    c. Create this file:  input1c.txt
       1) Right-clik /src/test/resources -> New File -> input1c.txt
       2) Copy this to your file  [with no leading spaces but has trailing spaces]
        
 			stuff   		
  

    d. Create this file:  input1d.txt
       1) Right-clik /src/test/resources -> New File -> input1d.txt
       2) Copy this to your file  [with leading spaces and trailing spaces]
        
 			  	stuff   	  		

    e. Create this file:  input2a.txt
       1) Right-clik /src/test/resources -> New File -> input2a.txt
       2) Copy this to your file  [with no leading spaces or trailing spaces]
        
 			text:"this and that"
 			
    f. Create this file:  input2b.txt
       1) Right-clik /src/test/resources -> New File -> input2b.txt
       2) Copy this to your file  [with leading spaces but no trailing spaces]
        
 			          text:"this and that"
 			
    g. Create this file:  input2c.txt
       1) Right-clik /src/test/resources -> New File -> input2c.txt
       2) Copy this to your file  [with no leading spaces but has trailing spaces]
        
 			text:"this and that"   	
 			
    h. Create this file:  input2d.txt
       1) Right-clik /src/test/resources -> New File -> input2d.txt
       2) Copy this to your file  [with leading spaces and trailing spaces]
        
 			   text:"this and that"   	
 			   
 

 7. Create this class:  AppQueryParser3Test
    a. Right-click on /src/main/java/code/stuff -> New -> Java Class
       Class Name:  AppQueryParser3Test
       
    b. Copy this to your class
    
		package com.stuff;
		
		import org.antlr.v4.runtime.ANTLRInputStream;
		import org.antlr.v4.runtime.CommonTokenStream;
		import org.antlr.v4.runtime.tree.ParseTree;
		import org.junit.Before;
		import org.junit.Test;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import java.io.InputStream;
		
		import static org.junit.Assert.*;
		
		/**
		 * Created by adam on 9/5/2016.
		 */
		public class AppQueryParser3Test
		{
		    private static final Logger logger = LoggerFactory.getLogger(AppQueryParser3Test.class);
		    
		
		
		    @Before
		    public void setUp() throws Exception
		    {
		    }
		
		
		    private void verifyParserHasZeroSyntaxErrors(String aResourceFilePath) throws Exception
		    {
		        logger.debug("verifyParserHasZeroSyntaxErrors()  aPath={}", aResourceFilePath);
		
		        // Create an inputstream from a file found in the classpath
		        InputStream in = AppQueryParser3Test.class.getResourceAsStream(aResourceFilePath);
		
		        // Create aan ANTLRInputStream from our inputStream object
		        ANTLRInputStream inputStream = new ANTLRInputStream(in);
		
		        // Create a lexer that feeds off of the input stream
		        QueryParser3Lexer lexer = new QueryParser3Lexer(inputStream);
		
		        // Create a buffer of tokens pulled from the lexer
		        CommonTokenStream tokens = new CommonTokenStream(lexer);
		
		        // Create a parser that feeds off the tokens buffer
		        QueryParser3Parser parser = new QueryParser3Parser(tokens);
		
		        // Begin parsing at the "init" rule of the grammar file
		        ParseTree tree = parser.init();
		
		        assert(parser.getNumberOfSyntaxErrors() == 0);
		    }
		
		
		    @Test
		    public void testForSyntaxErrors() throws Exception
		    {
		        verifyParserHasZeroSyntaxErrors("/input1a.txt");
		        verifyParserHasZeroSyntaxErrors("/input1b.txt");
		        verifyParserHasZeroSyntaxErrors("/input1c.txt");
		        verifyParserHasZeroSyntaxErrors("/input1d.txt");
		        verifyParserHasZeroSyntaxErrors("/input2a.txt");
		        verifyParserHasZeroSyntaxErrors("/input2b.txt");
		        verifyParserHasZeroSyntaxErrors("/input2c.txt");
		        verifyParserHasZeroSyntaxErrors("/input2d.txt");
		    }
		}
		
		 


 8. Use Intellij to run the test cases
    a. Right-click on the AppQueryParser3Test -> Debug 'AppQueryParser3Test'
    
    b. You should see that all test cases passed
    
    		