How to Create an ANTLR Parser
-----------------------------

Assumptions:
 A) You have a Java JDK installed
 B) You have Maven installed
 C) You have IntelliJ Idea installed 
 
 
Procedures
----------
 1. Follow the procedures in howToCreateJavaCommandLineProgramUsingIntellijMaven.txt
    -- Setup the project with these maven settings:
       groupId:        com.stuff
       artifactId:     queryParser
       Version:        1.0-SNAPSHOT
       
    -- Project Name:   queryParser

 
 2. Open-up the queryParser project in Intellij
 
 
 3. Create these test directories:
       /src/test/resources
  	   /src/test/java     
 
 4. Create this class:   QueryParserTest
    a. Right-click on /src/test/java -> New Package:  com
       Right-click on /src/test/java/com -> New Package:  stuff
    
    b. Right-click on /src/test/java/com/stuff -> New Java Class:  QueryParserTest
    
    c. Copy this to QueryParserTest
    
       
 2. Create this class:  AppQueryParser1
    a. Right-click on src/main/java -> New -> Package 
       Package name:  com
       
    b. Right-click on /src/main/java/com -> New -> Package
       Package name: stuff
       
    c. Right-click on /src/main/java/code/stuff -> New -> Java Class
       Class Name:  AppQueryParser1
       
    d. Copy this to your class
    
			package com.stuff;
			
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
			
			/**
			 * AppQueryParser1
			 *
			 */
			public class AppQueryParser1 
			{
			    private static final Logger logger = LoggerFactory.getLogger(AppQueryParser1.class);
			
			    public static void main( String[] args )
			    {
			        logger.debug("main() started");
			
			
			        logger.debug("main() finished");
			    }
			}


 3. Add this dependency to your pom.xml
 
     <dependency>
        <groupId>org.antlr</groupId>
        <artifactId>antlr4-runtime</artifactId>
        <version>4.5.3</version>
     </dependency>
     
     
     
 4. Add this plugin to your <build><plugins>...</plugins></build> section of your pom.xml
    [so mvn will compile the parser in addition to any Java code]
    
      <plugin>
        <groupId>org.antlr</groupId>
        <artifactId>antlr4-maven-plugin</artifactId>
        <version>4.5.3</version>
        <executions>
          <execution>
            <goals>
              <goal>antlr4</goal>
            </goals>
            <configuration>
              <!-- Generate parse tree visitor interface and base class -->
              <visitor>true</visitor>
            </configuration>
          </execution>
        </executions>
      </plugin>

      
      
 5. Add a simple HelloWorld.g4 grammar
    a. Create this directory:  /src/main/antlr4/com/stuff
    
        
    b. Create this file:  Hello.g4  (in the /src/main/altr4/com/stuff directory)
    
		grammar Hello;              // Define a grammar called Hello
		init  : 'hello' ID;         // match keyword hello followed by an identifier
		ID : [a-z]+;                // match lower-case identifiers
		WS : [ \t\r\n]+ -> skip;    // skip spaces, tabs, newline, \r

  
   
   
    NOTE:  Any time that you change the .g4 file, 
             A) Re-compile the code (using mvn clean compile) *AND*
             B) Run "Generate Sources and Update folders" so Intellij knows about the updated generated code

   
 
 6. Compile your code
    unix> cd ~/intellijProjects/queryParser
    unix> mvn clean compile
    
    --- You should now see these files:
    		./target/classes/com/stuff/HelloBaseListener.class
    		./target/classes/com/stuff/HelloBaseVisitor.class
    		./target/classes/com/stuff/HelloLexer.class
    		./target/classes/com/stuff/HelloListener.class
    		./target/classes/com/stuff/HelloParser.class
    		./target/classes/com/stuff/HelloVisitor.class
    		
    		    		    
 
 7. Tell Intellij to look for the generated antlr classes
    a. Pull View -> Tool Window -> Maven Project
    b. Right-click on the <project-name> -> Generate Sources and Update folders
    
    NOTE:  Any time that you change the .g4 file, 
           run "Generate Sources and Update folders" so Intellij knows about the updated generated code
    
    
  
 8. Create this filE:  input1.txt 
    a. Right-click on /src/main/resources/ -> New -> File
       Filename:  input1.txt
    
    b. Copy this to input1.txt
    	hello john
        hello jack
  
    
    
 9. Modify the AppQueryParser1 class to look like this:
	 
		package com.stuff;
		
		import org.antlr.v4.runtime.ANTLRInputStream;
		import org.antlr.v4.runtime.CommonTokenStream;
		import org.antlr.v4.runtime.tree.ParseTree;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		
		import java.io.InputStream;
		
		/**
		 * Hello world!
		 *
		 */
		public class AppQueryParser1
		{
		    private static final Logger logger = LoggerFactory.getLogger(AppQueryParser1.class);
		
		    public static void main( String[] args ) throws Exception
		    {
		        logger.debug("main() started");
		
		        // Read the file into an inputstream
		        InputStream in = AppQueryParser1.class.getResourceAsStream("/input1.txt");
		
		        // Create a stream that reads from the file
		        ANTLRInputStream inputStream = new ANTLRInputStream(in);
		
		        // Create a lexer that feeds off of the input stream
		        HelloLexer lexer = new HelloLexer(inputStream);
		
		        // Create a buffer of tokens pulled from the lexer
		        CommonTokenStream tokens = new CommonTokenStream(lexer);
		
		        // Create a parser that feeds off the tokens buffer
		        HelloParser parser = new HelloParser(tokens);
		
		        // Begin parsing at the "init" rule of the grammar file
		        ParseTree tree = parser.init();
		
		
		        if (parser.getNumberOfSyntaxErrors() > 0)
		        {
		            logger.debug("There were parsing errors:  Total Error count is {}", parser.getNumberOfSyntaxErrors());
		            System.exit(1);
		        }
		        else
		        {
		            logger.debug("There were no parsing errors.");
		        }
		
		
		        // Show a lisp-style tree
		        logger.debug("tree={}", tree.toStringTree(parser));
		
		        logger.debug("main() finished");
		    }
		}



10. Use Intellij to run the program
    a. Right-click on AppQueryParser1 -> Debug 'AppQueryParser1.main()'
    
    b. You should see this console output
    
		09/04/2016 13:14:25 DEBUG com.stuff.AppQueryParser1 main() started
		09/04/2016 13:14:26 DEBUG com.stuff.AppQueryParser1 tree=(init (line hello john) (line hello jack))
		09/04/2016 13:14:26 DEBUG com.stuff.AppQueryParser1 main() finished
		
		