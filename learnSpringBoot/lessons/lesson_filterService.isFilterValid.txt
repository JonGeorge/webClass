Lesson:  Build a FilterService:  Validation Rules
-------------------------------------------------
The FilterService class has a method called areFiltersValid().

Valid Filters
-------------
     *    Fieldname <separator> EQUALS          value
     *    Fieldname <separator> GREATER         value
     *    Fieldname <separator> GREATER_EQUAL   value
     *    Fieldname <separator> LESS            value
     *    Fieldname <separator> LESS_EQUAL      value
     *    Fieldname <separator> BETWEEN         value1 <separator> value2                        (applies to dates and numeric fields only)
     *    Fieldname <separator> IN              value1 <separator> value2 <separator> value3....
     *    Fieldname <separator> NOTIN           value1 <separator> value2 <separator> value3....
     *    Fieldname <separator> CONTAINS        value1
     *    Fieldname <separator> ICONTAINS       value1
     *    Fieldname <separator> ISNULL
     *    Fieldname <separator> ISNOTNULL



Business Logic
--------------
 a) Determine which operation is being used
 b) Compare the number of tokens vs expected number of tokens



Implementation #1
-----------------
  private boolean isFilterFormatValid(String aFilter) {
        String[] filterTokens = StringUtils.split(aFilter, "~");

        String operation = filterTokens[1];

        if ((operation.equalsIgnoreCase("EQUALS")) && (filterTokens.length != 3)) {
            // Use selected EQUALS but there is not 3 fields
            return false;
        }
        else if ((operation.equalsIgnoreCase("GREATER")) && (filterTokens.length != 3)) {
            // Use selected GREATER but there is not 3 fields
            return false;
        }
        else if ((operation.equalsIgnoreCase("GREATER_EQUAL")) && (filterTokens.length != 3)) {
            // Use selected GREATER_EQUAL but there is not 3 fields
            return false;
        }
        else if ((operation.equalsIgnoreCase("LESS")) && (filterTokens.length != 3)) {
            // Use selected LESS but there is not 3 fields
            return false;
        }
        else if ((operation.equalsIgnoreCase("LESS_EQUAL")) && (filterTokens.length != 3)) {
            // Use selected LESS_EQUAL but there is not 3 fields
            return false;
        }
        else if ((operation.equalsIgnoreCase("BETWEEN")) && (filterTokens.length != 4)) {
            // Use selected BETWEEN but there is not 4 fields
            return false;
        }
        else if ((operation.equalsIgnoreCase("CONTAINS")) && (filterTokens.length != 3)) {
            // Use selected CONTAINS but there is not 3 fields
            return false;
        }
        else if ((operation.equalsIgnoreCase("IN")) && (filterTokens.length >= 3)) {
            // Use selected IN but there is not 3 or more fields
            return false;
        }
        else if ((operation.equalsIgnoreCase("NOTIN")) && (filterTokens.length >= 3)) {
            // Use selected IN but there is not 3 or more fields
            return false;
        }
        else if ((operation.equalsIgnoreCase("ISNULL")) && (filterTokens.length != 2)) {
            // Use selected ICONTAINS but there is not 3 fields
            return false;
        }
        else if ((operation.equalsIgnoreCase("ISNOTNULL")) && (filterTokens.length != 2)) {
            // Use selected ICONTAINS but there is not 3 fields
            return false;
        }

        return true;
    }





Implementation #2  (better if statement)
----------------------------------------
The code is longer but there is only 2 if statements that are followed

   private boolean isFilterFormatValid(String aFilter) {
        String[] filterTokens = StringUtils.split(aFilter, "~");

        String operation = filterTokens[1];

        if (operation.equalsIgnoreCase("EQUALS"))  {
            if (filterTokens.length == 3) {
                return true;
            } else {
                return false;
            }
        }
        else if (operation.equalsIgnoreCase("GREATER"))  {
            if (filterTokens.length == 3) {
                return true;
            } else {
                return false;
            }
        }
        else if (operation.equalsIgnoreCase("GREATER_EQUAL"))  {
            if (filterTokens.length == 3) {
                return true;
            } else {
                return false;
            }
        }
        else if (operation.equalsIgnoreCase("LESS"))  {
            if (filterTokens.length == 3) {
                return true;
            } else {
                return false;
            }
        }
        else if (operation.equalsIgnoreCase("LESS_EQUAL"))  {
            if (filterTokens.length == 3) {
                return true;
            } else {
                return false;
            }
        }
        else if (operation.equalsIgnoreCase("BETWEEN"))  {
            if (filterTokens.length == 4) {
                return true;
            } else {
                return false;
            }
        }
        else if (operation.equalsIgnoreCase("CONTAINS"))  {
            if (filterTokens.length == 3) {
                return true;
            } else {
                return false;
            }
        }
        else if (operation.equalsIgnoreCase("IN"))  {
            if (filterTokens.length >= 3) {
                return true;
            } else {
                return false;
            }
        }
        else if (operation.equalsIgnoreCase("NOTIN")) {
            if (filterTokens.length >= 3) {
                return true;
            } else {
                return false;
            }
        }
        else if (operation.equalsIgnoreCase("ISNULL")) {
            if (filterTokens.length == 2) {
                return true;
            } else {
                return false;
            }
        }
        else if (operation.equalsIgnoreCase("ISNOTNULL")) {
            if (filterTokens.length == 2) {
                return true;
            } else {
                return false;
            }
        }
        else {
            throw new RuntimeException("Unknown Operation name found: Operation=" + operation);
        }
    }


Implementation #3
-----------------
In this approach, the code is simplified


    private boolean isFilterFormatValid(String aFilter) {
        String[] filterTokens = StringUtils.split(aFilter, "~");

        String operation = filterTokens[1];

        if (operation.equalsIgnoreCase("EQUALS"))  {
            return filterTokens.length == 3;
        }
        else if (operation.equalsIgnoreCase("GREATER"))  {
            return filterTokens.length == 3;
        }
        else if (operation.equalsIgnoreCase("GREATER_EQUAL"))  {
            return filterTokens.length == 3;
        }
        else if (operation.equalsIgnoreCase("LESS"))  {
            return filterTokens.length == 3;
        }
        else if (operation.equalsIgnoreCase("LESS_EQUAL"))  {
            return filterTokens.length == 3;
        }
        else if (operation.equalsIgnoreCase("BETWEEN"))  {
            return filterTokens.length == 4;
        }
        else if (operation.equalsIgnoreCase("CONTAINS"))  {
            return filterTokens.length == 3;
        }
        else if (operation.equalsIgnoreCase("IN"))  {
            return filterTokens.length >= 3;
        }
        else if (operation.equalsIgnoreCase("NOTIN")) {
            return filterTokens.length >= 3;
        }
        else if (operation.equalsIgnoreCase("ISNULL")) {
            return filterTokens.length == 2;
        }
        else if (operation.equalsIgnoreCase("ISNOTNULL")) {
            return filterTokens.length == 2;
        }
        else {
            throw new RuntimeException("Unknown Operation name found: Operation=" + operation);
        }
    }




Implementation #4:  Use a map of objects to hold business rules
---------------------------------------------------------------
 1. Create a class called ComparisonOperation

         package com.lessons.filter;

         public class ComparisonOperation {
             private String operation;
             private int totalTokens;

             public ComparisonOperation(String aOperation, int aTotalTokens) {
                 this.operation = aOperation;
                 this.totalTokens = aTotalTokens;
             }


             public String getOperation() {
                 return operation;
             }

             public void setOperation(String operation) {
                 this.operation = operation;
             }

             public int getTotalTokens() {
                 return totalTokens;
             }

             public void setTotalTokens(int totalTokens) {
                 this.totalTokens = totalTokens;
             }

         }

 2. Adjust the filterService so that it has a map

    Create a map that holds key=operation name   and value=ConditionLogic
    Then, use that map to check if the operation name exists and if the number of tokens is valid

           private HashMap<String, ComparisonOperation> mapOperationComparisonOperation = new HashMap<>();

           @PostConstruct
           public void init() {
               mapOperationComparisonOperation.put("EQUALS",        new ComparisonOperation("==", 3));
               mapOperationComparisonOperation.put("GREATER",       new ComparisonOperation("==", 3));
               mapOperationComparisonOperation.put("GREATER_EQUAL", new ComparisonOperation("==", 3));
               mapOperationComparisonOperation.put("LESS",          new ComparisonOperation("==", 3));
               mapOperationComparisonOperation.put("LESS_EQUAL",    new ComparisonOperation("==", 3));
               mapOperationComparisonOperation.put("BETWEEN",       new ComparisonOperation("==", 4));
               mapOperationComparisonOperation.put("CONTAINS",      new ComparisonOperation("==", 3));
               mapOperationComparisonOperation.put("IN",            new ComparisonOperation(">=", 3));
               mapOperationComparisonOperation.put("NOTIN",         new ComparisonOperation(">=", 3));
               mapOperationComparisonOperation.put("ISNULL",        new ComparisonOperation("==", 2));
               mapOperationComparisonOperation.put("ISNOTNULL",     new ComparisonOperation("==", 2));
           }


 3. Change the isFilterFormatValid method to use that map to determine if the format is valid

       private boolean isFilterFormatValid(String aFilter) {
            String[] filterTokens = StringUtils.split(aFilter, "~");

            String operationName = filterTokens[1];

            // Get the ComparisonOperation that corresponds to this operation
            ComparisonOperation co = mapOperationComparisonOperation.get(operationName);
            if (co == null) {
                throw new RuntimeException("I did not find the operation name.");
            }

            // Get the expected number of tokens from the ComparisonOperation object
            int expectedTotalTokens = co.getTotalTokens();

            // Compare the expected number of tokens against the actual number of tokens
            if (co.getOperation().equalsIgnoreCase("==")) {
                return filterTokens.length == expectedTotalTokens;
            }
            else if (co.getOperation().equalsIgnoreCase(">=")) {
                return filterTokens.length >= expectedTotalTokens;
            }
            else if (co.getOperation().equalsIgnoreCase("<=")) {
                return filterTokens.length <= expectedTotalTokens;
            }
            else {
                throw new RuntimeException("Unknown ComparisonOperation found:  comparison operation is " + co.getOperation());
            }
        }


        /**
         * Returns false if the passed-in list of filters is invalid in anyway
         */
        public boolean areFiltersValid(String aTableName, List<String> aFilters) {
            logger.debug("areFiltersValid() started.");
            if ((aFilters == null) || (aFilters.size() == 0)) {
                // Passed-in filters is empty -- return true as this is valid
                return true;
            }

            // Loop through all of the filters checking if they are valid
            for (String filter: aFilters) {
                if (! isFilterFormatValid(filter)) {
                    return false;
                }
            }

            return true;
        }




Implementation #5:  Use an enumerated type to hold business rules
-----------------------------------------------------------------
Create an enumerated type that holds the operations

 1. Create the enumerated class

         package com.lessons.filter;

         import org.springframework.util.StringUtils;

         public enum FilterOperation {
             EQUALS         ( "EQUALS",        "==", 3),
             GREATER        ( "GREATER",       "==", 3),
             GREATER_EQUAL  ( "GREATER_EQUAL", "==", 3),
             LESS           ( "LESS",          "==", 3),
             LESS_EQUAL     ( "LESS_EQUAL",    "==", 3),
             BETWEEN        ( "BETWEEN",       "==", 4),
             CONTAINS       ( "CONTAINS",      "==", 3),
             IN             ( "IN",            ">=", 3),
             NOTIN          ( "NOTIN",         ">=", 3),
             ISNULL         ( "ISNULL",        "==", 2),
             ISNOTNULL      ( "ISNOTNULL",     "==", 2);

             private String filterOperation;
             private String compareOperation;
             private int totalTokens;

             public String getFilterOperation() {
                 return filterOperation;
             }

             public String getCompareOperation() {
                 return compareOperation;
             }

             public int getTotalTokens() {
                 return totalTokens;
             }


             public static FilterOperation getFilterOperationWithName( String aFilterOperationName ) {
                 if (StringUtils.isEmpty(aFilterOperationName)) {
                     throw new RuntimeException("The passed-in filter operation name is null or empty.");
                 }

                 // Loop through all of the enumerated values above to find the one that matches the filter operation name -- e.g., EQUALS, IN, ...
                 for ( FilterOperation filterOperation: FilterOperation.values() ) {
                     if (aFilterOperationName.equalsIgnoreCase( filterOperation.getFilterOperation())) {
                         return filterOperation;
                     }
                 }

                 // I did not find the filterOperation
                 throw new RuntimeException("The filter operation name was not found in the list of enumerated types.");
             }

             FilterOperation(String aFilterOperation, String aCompareOperation, int aTotalTokens) {
                 this.filterOperation = aFilterOperation;
                 this.compareOperation = aCompareOperation;
                 this.totalTokens = aTotalTokens;
             }
         }


  2. Change the FilterService.isFilterFormatValid() to use that enumerated object

        private boolean isFilterFormatValid(String aFilter) {
            String[] filterTokens = StringUtils.split(aFilter, "~");

            String operationName = filterTokens[1];

            // Get the filterOperation object that corresponds to the operation name (so we have all of the business rules)
            FilterOperation filterOperation = FilterOperation.getFilterOperationWithName(operationName);

            // Use that filterOperation to apply the business rules
            int expectedTotalTokens = filterOperation.getTotalTokens();
            if (filterOperation.getCompareOperation().equalsIgnoreCase("==")) {
                return filterTokens.length == expectedTotalTokens;
            }
            else if (filterOperation.getCompareOperation().equalsIgnoreCase(">=")) {
                return filterTokens.length >= expectedTotalTokens;
            }
            else if (filterOperation.getCompareOperation().equalsIgnoreCase("<=")) {
                return filterTokens.length <= expectedTotalTokens;
            }
            else {
                throw new RuntimeException("Unknown Compare Operation found:  comparison operation is " + filterOperation.getCompareOperation());
            }
        }

