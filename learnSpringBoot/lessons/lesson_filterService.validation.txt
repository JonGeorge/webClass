Lesson:  Build a FilterService:  Validation Rules
-------------------------------------------------
The FilterService class has a method called areFiltersValid().

Valid Filters
-------------
     *    Fieldname <separator> EQUALS          value
     *    Fieldname <separator> GREATER         value
     *    Fieldname <separator> GREATER_EQUAL   value
     *    Fieldname <separator> LESS            value
     *    Fieldname <separator> LESS_EQUAL      value
     *    Fieldname <separator> BETWEEN         value1 <separator> value2                        (applies to dates and numeric fields only)
     *    Fieldname <separator> IN              value1 <separator> value2 <separator> value3....
     *    Fieldname <separator> NOTIN           value1 <separator> value2 <separator> value3....
     *    Fieldname <separator> CONTAINS        value1
     *    Fieldname <separator> ICONTAINS       value1
     *    Fieldname <separator> ISNULL
     *    Fieldname <separator> ISNOTNULL



Logic for method
----------------
Loop through each filter string (in the passed-in list)
 1) If filter has fewer than 2 parts, then return false
    Why:  Every filter must have atleast 2 parts

 2) Verify that the operation is one of the 12 possible operations
    a) Split-up the filter in a fixed array of parts
    b) Pull the 2nd part
    c) If the part is not one of the 12 operation names, then stop here

    NOTE:  This could be made a separate method:



Implementation #1
-----------------
    private boolean isFilterOperationValid(String aFilter) {
        String[] filterTokens = StringUtils.split(aFilter, "~");

        String operation = filterTokens[1];

        if ((!operation.equalsIgnoreCase("EQUALS")) &&
                (!operation.equalsIgnoreCase("GREATER")) &&
                (!operation.equalsIgnoreCase("GREATER_EQUAL")) &&
                (!operation.equalsIgnoreCase("LESS")) &&
                (!operation.equalsIgnoreCase("LESS_EQUAL")) &&
                (!operation.equalsIgnoreCase("BETWEEN")) &&
                (!operation.equalsIgnoreCase("IN")) &&
                (!operation.equalsIgnoreCase("NOTIN")) &&
                (!operation.equalsIgnoreCase("CONTAINS")) &&
                (!operation.equalsIgnoreCase("ICONTAINS")) &&
                (!operation.equalsIgnoreCase("ISNULL")) &&
                (!operation.equalsIgnoreCase("ISNOTNULL"))) {
            // The operation name is not one of the 12 known operations so return false
            return false;
        }

        // The operation name is valid.  Return true;
        return true;
    }



Implementation #2
-----------------
In this approach, there is a list of Strings.  And, I use the contains() to search for them
 + The list of possible operations is stored in one place

     private final List<String> ALL_OPERATION_NAMES = Arrays.asList("EQUALS", "GREATER", "GREATER_EQUAL", "LESS", "LESS_EQUAL", "BETWEEN", "IN", "NOTIN", "CONTAINS", "ICONTAINS", "ISNULL", "ISNOTNULL" );


    private boolean isFilterOperationValid(String aFilter) {
        String[] filterTokens = StringUtils.split(aFilter, "~");
        String operation = filterTokens[1];

        if (! ALL_OPERATION_NAMES.contains(operation)) {
            // The operation name is not one of the valid operations names so return false
            return false;
        }

        return true;
    }


Implementation #3
-----------------
In this approach, there is a list of Strings.  And, I use the contains() to search for them.  The method is simplified

     private final List<String> ALL_OPERATION_NAMES = Arrays.asList("EQUALS", "GREATER", "GREATER_EQUAL", "LESS", "LESS_EQUAL", "BETWEEN", "IN", "NOTIN", "CONTAINS", "ICONTAINS", "ISNULL", "ISNOTNULL" );


    private boolean isFilterOperationValid(String aFilter) {
        String[] filterTokens = StringUtils.split(aFilter, "~");
        String operation = filterTokens[1];

        // Return true if the operation is found in the list of names.  Returns false otherwise
        return ALL_OPERATION_NAMES.contains(operation);
    }


Implementation #4
-----------------
In this approach, there is a list of Strings.
-- use the contains() to search for them.
-- The if statement and return are combined
-- Convert filter to uppercase so comparison is case insensitive

     private final List<String> ALL_OPERATION_NAMES = Arrays.asList("EQUALS", "GREATER", "GREATER_EQUAL", "LESS", "LESS_EQUAL", "BETWEEN", "IN", "NOTIN", "CONTAINS", "ICONTAINS", "ISNULL", "ISNOTNULL" );


    private boolean isFilterOperationValid(String aFilter) {
        String[] filterTokens = StringUtils.split(aFilter, "~");
        String operation = filterTokens[1];

        // Return true if the operation is found in the list of names.  Returns false otherwise
        return(ALL_OPERATION_NAMES.contains(operation.toUpperCase()));
    }
