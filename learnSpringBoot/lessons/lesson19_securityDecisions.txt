Lesson:  Security Design & Decisions
------------------------------------


Decisions that must be answered
-------------------------------
 A. What will be protected in addition to REST calls?
    a. Will all JavaScript, HTML, and images be protected?
    b. Will custom JavaScript be protected?
    c. Will node_modules directory be protected?
    d. Will all JavaScript, HTML, and CSS be un-protected?
       + Simple
       + Faster than other approaches (as there is less encryption/decryption)
       + The JavaScript, HTML, and CSS is visible to the user anyway
         NOTE:  TD Ameritrade does not protect JavaScript as it is already public.  You cannot stop a user from seeing it.
                So, they do not secure it


    What will be protected is often defined in your SpringSecurityConfig class.



 B. How will security be implemented?
    Will security be implemented in the code or outside of the code?

    a. External implementation:  Setup an authorization filter and have it query roles and role-to-rest-calls on startup
       + REST calls are simpler:  The REST calls do not need any security code:  no if statements and no spring annotations
       - More complex to implement as you need to setup an authorization filter
       - Developers may forget as it is not visible in code
         NOTE:  I have used this approach and regretted it 9 months later as developers would forget to add the security records
                But, I suspect this is a problem when developers run locally in "dev" mode using http instead of "prod" mode using https




    b. Internal implementation using if statements in controller REST calls
       + Simple
       + Developer will not forget as it is visible in code
       + Business rules are hard-coded in REST calls
         NOTE:  I have used this approach and find it works if people don't mind if statements at the top of their controller methods


       Example using if statements:
            /*************************************************************************
             * REST endpoint /api/dashboard/time
             *
             * @return a plain-old string with the database time (not JSON)
             *************************************************************************/
            @RequestMapping(value = "/api/dashboard/time", method = RequestMethod.GET, produces = "application/json")
            public ResponseEntity<?> getDateTime(HttpServletRequest aRequest) {
                logger.debug("getDashboardDetails() started.");

                if (! aRequest.isUserInRole("ROLE_SUPERUSER")) {
                    // This user does not have the required superuser role
                    return ResponseEntity
                            .status(HttpStatus.FORBIDDEN)
                            .contentType(MediaType.TEXT_PLAIN)
                            .body("You do not have sufficient privileges to use this REST endpoint");
                }


                // Get the date/time from the database
                String sDateTime = dashboardService.getDatabaseTime();

                // Return the date/time string as plain-text
                return ResponseEntity
                        .status(HttpStatus.OK)
                        .contentType(MediaType.TEXT_PLAIN)
                        .body(sDateTime);
            }




    c. Internal implementation using the @PreAuthorize annotations above controller REST calls
       + Simple
       + Developer will not forget as it is visible in code

       1) Add this to the top of your SpringSecurityConfig class
            @EnableGlobalMethodSecurity(prePostEnabled = true)         // Needed for @PreAuthorize to work


       2) Add the @PreAuthorize("hasRole('ROLE_SUPERUSER')") above each REST call


       Example using @PreAuthorize annotation:
            /*************************************************************************
             * REST endpoint /api/dashboard/time
             *
             * @return a plain-old string with the database time (not JSON)
             *************************************************************************/
            @RequestMapping(value = "/api/dashboard/time", method = RequestMethod.GET, produces = "application/json")
            @PreAuthorize("hasRole('ROLE_SUPERUSER')")
            public ResponseEntity<?> getDateTime(HttpServletRequest aRequest) {
                logger.debug("getDashboardDetails() started.");


                // Get the date/time from the database
                String sDateTime = dashboardService.getDatabaseTime();

                // Return the date/time string as plain-text
                return ResponseEntity
                        .status(HttpStatus.OK)
                        .contentType(MediaType.TEXT_PLAIN)
                        .body(sDateTime);
            }

    Once you decide how you will implement security, it is difficult to change

