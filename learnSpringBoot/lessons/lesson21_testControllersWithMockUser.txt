How to Simulate Logged-in Users for Test Classes
------------------------------------------------
Problem:  Your webapp controllers now require certain roles to access them
          Your unit tests need a real Authentication Token to run

Solution: Create a hard-coded user for test classes



Sample Unit Test Class
-----------------------
In this class, the setupAuthenticationToken() establishes an authentication token


        package com.lessons;


        import com.lessons.controllers.DashboardController;
        import com.lessons.security.UserInfo;
        import org.junit.Assert;
        import org.junit.Before;
        import org.junit.Test;
        import org.junit.runner.RunWith;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.boot.test.context.SpringBootTest;
        import org.springframework.http.ResponseEntity;
        import org.springframework.security.core.GrantedAuthority;
        import org.springframework.security.core.authority.SimpleGrantedAuthority;
        import org.springframework.security.core.context.SecurityContextHolder;
        import org.springframework.security.core.userdetails.UserDetails;
        import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
        import org.springframework.test.context.junit4.SpringRunner;

        import javax.annotation.Resource;
        import java.util.ArrayList;
        import java.util.List;

        import static org.junit.Assert.assertTrue;

        /**
         * Unit test for simple App.
         */
        @RunWith(SpringRunner.class)    // Required to work with JUnit 4
        @SpringBootTest                 // Start up a Spring Application Context
        public class SecurityTest
        {
            private static final Logger logger = LoggerFactory.getLogger(SecurityTest.class);

            @Resource
            private DashboardController dashboardController;


            /**
             * Setup an Authentication Token so that the classes believe a user is logged-in
             */
            @Before
            public void setupAuthenticationToken(){
                // Create a list of granted Authorities
                List<GrantedAuthority> grantedAuthorities = new ArrayList<>();
                grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_SUPERUSER"));

                // Create the UserInfo object
                UserInfo userInfo = new UserInfo()
                                            .withId(5)
                                            .withUsernameUID("BOGUS_USER")
                                            .withGrantedAuthorities(grantedAuthorities);

                // Cast the UserInfo object to UserDetails
                UserDetails userDetails = userInfo;

                // Create the AuthenticationToken
                PreAuthenticatedAuthenticationToken preapproved = new PreAuthenticatedAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                preapproved.setAuthenticated(true);

                // Set the authentication token
                SecurityContextHolder.getContext().setAuthentication(preapproved);
            }




            @Test
            public void testSecurity()
            {
                logger.debug("testSecurity() started.");

                ResponseEntity<String> response = (ResponseEntity<String>) dashboardController.getDateTime();

                String datetime = response.getBody();
                Assert.assertNotNull(datetime);

                logger.debug("testSecurity() finished.");

            }
        }



Dashboard Controller
--------------------
Inside the getDataTime() method, you will find this line:
   UserInfo userInfo = (UserInfo) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
The userInfo object returned is the *same* object as the one established in setupAuthenticationToken()



        package com.lessons.controllers;


        import com.lessons.security.UserInfo;
        import com.lessons.services.DashboardService;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.http.HttpStatus;
        import org.springframework.http.MediaType;
        import org.springframework.http.ResponseEntity;
        import org.springframework.security.access.prepost.PreAuthorize;
        import org.springframework.security.core.context.SecurityContextHolder;
        import org.springframework.stereotype.Controller;
        import org.springframework.web.bind.annotation.RequestMapping;
        import org.springframework.web.bind.annotation.RequestMethod;

        import javax.annotation.Resource;

        @Controller("com.lessons.controllers.DashboardController")
        public class DashboardController {
            private static final Logger logger = LoggerFactory.getLogger(DashboardController.class);

            @Resource
            private DashboardService dashboardService;


            /*************************************************************************
             * REST endpoint /api/dashboard/time
             *
             * @return a plain-old string with the database time (not JSON)
             *************************************************************************/
            @RequestMapping(value = "/api/dashboard/time", method = RequestMethod.GET, produces = "application/json")
            @PreAuthorize("hasRole('ROLE_SUPERUSER')")
            public ResponseEntity<?> getDateTime() {
                logger.debug("getDashboardDetails() started.");

                // Log who is actually logged-in
                UserInfo userInfo = (UserInfo) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
                logger.debug("Logged-in as {}", userInfo.getUsername());

                // Get the date/time from the database
                String sDateTime = dashboardService.getDatabaseTime();

                // Return the date/time string as plain-text
                return ResponseEntity
                        .status(HttpStatus.OK)
                        .contentType(MediaType.TEXT_PLAIN)
                        .body(sDateTime);
            }


        }

