Learn Spring MVC REST Endpoint Parameters
-----------------------------------------


Lessons
-------
 1. Pass-in a single request param using The @RequestParam annotation

    /*
     * /api/getStuff?id=some_long_string
     */
    @GetMapping("/api/getStuff")
    public  ResponseEntity<?>  getStuff(@RequestParam String id) {
        logger.debug("id={}", id);

        String returnValue = "id=" + id;

        // Return the string as plain-text
        return ResponseEntity
                .status(HttpStatus.OK)
                .contentType(MediaType.TEXT_PLAIN)
                .body(returnValue);
    }


   Exercise 1:  Add another rest call with URL is /api/getStuff/exercise
                This REST endpoint takes 2 parameters:  id and name
                This REST endpoint returns the 2 parameters that were pased-in



 2. Pass-in The @RequestParam so that the variable name is different from queryParam name

    /*
     * /api/getStuff2?id=some_long_string
     */
    @GetMapping("/api/getStuff2")
    public  ResponseEntity<?>  getStuff2(@RequestParam(name="id) String stuffId) {
        logger.debug("id={}", id);

        String returnValue = "stuffId=" + stuffId;

        // Return the string as plain-text
        return ResponseEntity
                .status(HttpStatus.OK)
                .contentType(MediaType.TEXT_PLAIN)
                .body(returnValue);
    }



 3. Add an *optional* @RequestParam

    /*
     * /api/getStuff3?id=7
     */
    @GetMapping("/api/getStuff3")
    public  ResponseEntity<?>  getStuff3(@RequestParam(name="id) Integer id,
                                         @RequestParam(name="optional", required=false) String optional) {
        logger.debug("id={}  optional={}", id, optional);

        String returnValue = "id=" + stuffId + " optional=" + optional

        // Return the string as plain-text
        return ResponseEntity
                .status(HttpStatus.OK)
                .contentType(MediaType.TEXT_PLAIN)
                .body(returnValue);
    }

    Exercise: What happens when you pass-in a non-integer for the ID?
    Exercise: What is the value of the variable optional when it is not used



 4. Add an *optional* @RequestParam that has a default value (if not set)

    /*
     * /api/getStuff4?id=7
     * /api/getStuff4?optional=something&id=55
     */
    @GetMapping("/api/getStuff4")
    public  ResponseEntity<?>  getStuff4(@RequestParam(name="id) Integer id,
                                         @RequestParam(name="optional", defaultValue="not_set") String optional) {
        logger.debug("id={}  optional={}", id, optional);

        String returnValue = "id=" + stuffId + " optional=" + optional

        // Return the string as plain-text
        return ResponseEntity
                .status(HttpStatus.OK)
                .contentType(MediaType.TEXT_PLAIN)
                .body(returnValue);
    }



 5. Pass-in any parameter:  We can have multiple parameters *without* defining them

     /*
      * /api/getStuff5?param1=this&param2=that&param3=othre_thing
      */
     @GetMapping("/api/getStuff5")
     public  ResponseEntity<?>  getStuff5(@RequestParam Map<String,String> allParams) {
         logger.debug("allParams={}", allParams.entrySet() );

         // Return the map of parameters back as JSON
         return ResponseEntity
                 .status(HttpStatus.OK)
                 .body(allParams);
     }



 6. Pass-in a parameter that is a comma-separated list

      /*
       * /api/getStuff6?ids=1,2,3,4,something
      */
      @GetMapping("/api/getStuff6")
      public  ResponseEntity<?>  getStuff6(@RequestParam List<String> ids) {
          logger.debug("ids={}", ids );

          // Return the map of parameters back as JSON
          return ResponseEntity
                  .status(HttpStatus.OK)
                  .body(ids);
      }



 7. Passing-in URI Parameters with @PathVariable

       /*
        * /api/getStuff7/{id}
       */
       @GetMapping("/api/getStuff7/{id}")
       public  ResponseEntity<?>  getStuff6(@PathVariable Integer id) {
           logger.debug("id={}", id );

           // Return the map of parameters back as JSON
           return ResponseEntity
                   .status(HttpStatus.OK)
                   .body(id);
       }



 8. Encode vs non-encoded parameter values
    @PathVariable is extracted from the URI --> Not encoded
    @RequestParams are encoded:                  id="ab+c" --> "ab c"


