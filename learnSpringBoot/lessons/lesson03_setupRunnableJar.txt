Lesson:  Setup Runnable JAR
---------------------------
You want to create an uber JAR that contains an app server and the webapp.


Procedure
---------
 1. Modify the webapp's pom.xml

    Add this to the end of your webapp's pom.xml

    NOTE:  Do *not* put this within the pluginManagement section

        <build>
            <plugins>

                <plugin>
                    <!-- This plugin provides the tools needed to repackage the Spring Boot JAR into a runnable JAR
                         Run this command to generate the runnable Spring Boot Jar
                            mvn clean package  *or*
                            mvn clean package spring-boot:repackage

                         WARNING:
                         If you are using a plugin to run npm install,
                         then make sure this repackage plugin appears *after* the plugin that runs npm install plugin
                         -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>2.1.4.RELEASE</version>
                    <configuration>
                        <addResources>true</addResources>
                    </configuration>

                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>

                </plugin>
            </plugins>
        </build>

      </project>


 2. OPTIONAL:
    a) Change it so the runnable jar has -exec in its name by adding this after <goals>...</goals>

            <executions>
                <execution>
                    <goals>
                        <goal>repackage</goal>
                    </goals>
                    <configuration>
                         <classifier>exec</classifier>
                    </configuration>
                </execution>
            </executions>



 3. Create a runnable JAR
    unix> cd ~/intellijProjects/app1/webapp
    unix> mvn clean package
    unix> ls -lh target

    You will see your runnable JAR
        drwxrwxr-x. 4 adam adam   74 Apr 28 21:06 classes/
        drwxrwxr-x. 3 adam adam   25 Apr 28 21:06 generated-sources/
        drwxrwxr-x. 3 adam adam   30 Apr 28 21:06 generated-test-sources/
        drwxrwxr-x. 2 adam adam   28 Apr 28 21:06 maven-archiver/
        drwxrwxr-x. 3 adam adam   35 Apr 28 21:06 maven-status/
        drwxrwxr-x. 2 adam adam   73 Apr 28 21:06 surefire-reports/
        drwxrwxr-x. 3 adam adam   17 Apr 28 21:06 test-classes/
        -rw-rw-r--. 1 adam adam  16M Apr 28 21:06 webapp-1.0-SNAPSHOT.jar           # Runnable JAR
        -rw-rw-r--. 1 adam adam 4.0K Apr 28 21:06 webapp-1.0-SNAPSHOT.jar.original  # Non-runnable JAR

 4. Run the jar
    unix> java -jar ./target/webapp-1.0-SNAPSHOT.jar

    -- You should see this:
    02/02/2018 23:05:49 DEBUG io.undertow Configuring listener with protocol HTTP for interface 0.0.0.0 and port 8080
    02/02/2018 23:05:49 INFO  org.springframework.boot.web.embedded.undertow.UndertowServletWebServer Undertow started on port(s) 8080 (http) with context path '/app1'
    02/02/2018 23:05:49 DEBUG org.springframework.web.context.support.StandardServletEnvironment Adding PropertySource 'server.ports' with highest search precedence
    02/02/2018 23:05:49 INFO  com.lessons.App Started App in 2.297 seconds (JVM running for 2.741)
    02/02/2018 23:05:49 DEBUG com.lessons.App WebApp is Up.

 5. Open a browser
    connect to http://localhost:8080/app1/app.html

    -- You should see your app.html message
