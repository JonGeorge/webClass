Learn Spring MVC REST Endpoint Parameters
-----------------------------------------
In the first exercise, we will post a SearchDTO object
In the second exercise, we will return a list of SearchResultDTO ojects


Part 1: Create a REST end point that accepts object
---------------------------------------------------
 1. Create a Model Class that holds your Search DTO object
    a. Create the package called "models"
       1) Right-click on webapp -> src -> main -> java -> com.lessons -> New -> Package
       2) Package name:  models

    b. Create a new class called SearchDTO
       1) Right-click on models -> New -> Java Class
       2) Class name:     SearchDTO
       3) Copy this to your class

             package com.lessons.models;

             public class SearchDTO  {
                 private String rawQuery;
                 private String indexName;

                 public String getIndexName() {
                     return this.indexName;
                 }

                 public void setIndexName(String indexName) {
                     this.indexName = indexName;
                 }

                 public String getRawQuery () {
                     return this.rawQuery;
                 }

                 public void setRawQuery ( String rawQuery ) {
                     this.rawQuery = rawQuery;
                 }


                 public String toString() {
                     return("rawQuery=" + this.rawQuery + "   indexName=" + this.indexName);
                 }
             }



  2. Create a REST endpoint that expects the SearchDTO Object (using request body)

     /*
      * /api/search REST end point
      * {
      *     indexName: "reports",
      *     rawQuery:  "1.2.3.4"
      * }
      *
      * NOTE:
      *   1) This is a POST call
      *   2) Using @RequestBody to tell the mapping to pull the DTO from the body
      */
     @RequestMapping(value = "/api/search", method = RequestMethod.POST, produces = "application/json")
     public  ResponseEntity<?>  runSearch(@RequestBody SearchDTO searchDTO) {
         logger.debug("runSearch() started.   searchDTO={}", searchDTO.toString() );

         String returnValue = "searchDTO=" + searchDTO.toString();

         // Return the string as plain-text
         return ResponseEntity
                .status(HttpStatus.OK)
                .contentType(MediaType.TEXT_PLAIN)
                .body(returnValue);
     }


 3. Set a breakpoint in Intellij and Restart app1

 4. Download & Install Postman
    a. Download Postman (a native application)
       a. Go to https://www.getpostman.com/downloads/
       b. Press Download / Linux 64-bit
       c. Save Postman-linux-x64-7.0.9.tar.gz to your ~/Downloads directory

    b. Install Postman to your ~/Downloads directory
       unix> cd ~/Downloads
       unix> tar zxvf Postman-linux-x64-7.0.9.tar.gz
       unix> rm Postman-linux-x64-7.0.9.tar.gz

       Add Postman to your PATH
       unix> vi ~/.bashrc

         # Add Postman directory to your PATH
         export PATH="${PATH}:~/Downloads/Postman"


 5. Setup Postman to make a POST REST call
    a. Startup Postman
       unix> Postman
       Click the link "Skip signing in and take me straight to the app"

    b. Add a Post REST call
       1) Set the URL type to "POST"
       2) Set the URL:         http://localhost:8080/app1/api/search
       3) Click on Headers
            Key=Accept         Value=application/json
            Key=Content-Type   Value=application/json

       4) Click on Body
       5) Click on raw
       6) Enter the following:
             {
                 "indexName": "reports",
                 "rawQuery": "1.2.3.4"
             }

       7) Press "Save"
          Request Name:  /api/search
          Press "Create Collection"
               Collection Name:  "my stuff"
               Press the checkmark
          Press "Save to my stuff"

       8) Press "Send"
          -- You should see the searchDTO




Part 2:  Have the REST call return a list of SearchResultDTO objects
------------------------------------------------------------------------
 1. Create a model class called SearchResultDTO
    a. Right-click on models -> New -> Java Class
    b. Class name:     SearchResultDTO
    c. Copy this to your class

            package com.lessons.models;

            import java.sql.Timestamp;

            public class SearchResultDTO {

                private Integer id;
                private String displayName;
                private Timestamp createdDate;

                public Integer getId() {
                    return id;
                }

                public void setId(Integer id) {
                    this.id = id;
                }

                public String getDisplayName() {
                    return displayName;
                }

                public void setDisplayName(String displayName) {
                    this.displayName = displayName;
                }

                public Timestamp getCreatedDate() {
                    return createdDate;
                }

                public void setCreatedDate(Timestamp createdDate) {
                    this.createdDate = createdDate;
                }

            }


 2. Change your REST endpoint to return a list of SearchResultDTO objects

        @RequestMapping(value = "/api/search", method = RequestMethod.POST, produces = "application/json")
        public ResponseEntity<?> runSearch(@RequestBody SearchDTO searchDto) {
            logger.debug("searchDto={}", searchDto);

            // Create a new ArrayList (that will hold SearchResultDTO objects)
            ArrayList<SearchResultDTO> listOfResults = new ArrayList<>();

            // Create some objects
            SearchResultDTO result1 = new SearchResultDTO();
            result1.setId(1);
            result1.setDisplayName("Report 1");

            SearchResultDTO result2 = new SearchResultDTO();
            result2.setId(2);
            result2.setDisplayName("Report 2");
            Timestamp now = new Timestamp(System.currentTimeMillis());
            result2.setCreatedDate(now);

            SearchResultDTO result3 = new SearchResultDTO();
            result3.setId(3);
            result3.setDisplayName("Report 3");

            // Add the objects to the list
            listOfResults.add(result1);
            listOfResults.add(result2);
            listOfResults.add(result3);

            // Return the list of results back to the caller
            return ResponseEntity
                    .status(HttpStatus.OK)
                    .body(listOfResults);
        }

 3. Set a breakpoint at the beginning of this method
    Restart the debugger

 4. Press the "Send" button in Postman to run the REST call again
    -- Step through the results




Alternative REST clients -- install a browser extension
-------------------------------------------------------
For Firefox, you can install RESTClient
  a. Open Firefox
  b. Go to https://addons.mozilla.org/en-US/firefox/addon/restclient/

For Chrome, you can install Postman app
  a. Open Chrome
  b. Go to https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop
  c. Press "Add to Chrome"



Lesson:  "Accept" and "Content-Type" headers
--------------------------------------------
  The "Accept" header is used by http clients to tell the server what content types the client understands
  The "Content-Type" header tells the server what format the actual data is in

  In this exercise, the Postman tool was used to make a POST call
  The POST call contains data in the message body
   -- We need to tell the server what language the POST data is in ("Content-Type" header)
   -- We need to tell the server what content types the http client under stands ("Accept" header)



