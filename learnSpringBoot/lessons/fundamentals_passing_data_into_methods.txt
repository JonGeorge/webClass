Lesson:  How is data passed into methods
----------------------------------------
What happens when you pass-in something into a method?


Definitions
-----------
 call-by-value       The call-by-value approach copies the value of an argument into the formal parameter of the subroutine.
                     Therefore, changes made to parameter of the function or subroutine have no effect on the argument.

 call-by-reference   The  call-by-reference approach, a reference to an argument (not the value of the argument) is passed to the parameter.
                     Inside the subroutine, this reference is used to access the actual argument determined in the call.
                     This means that changes made to the parameter will affect the argument used to call the subroutine.




There are different things here:
 A) Primitive values
 B) References to objects
    When you create an object all you get is a reference to it.
 C) Actual objects



Rules
-----
 1. Objects are *NOT* passed-in to methods/procedures

 2. When you pass-in a primitive value -- you are passing-in a copy of the primitive
    -- So primitives work in the manner of "call by value"

 3. When you pass-in a reference -- you are passing in a pointer to the object
    -- So, the pointer is copied (not the entire object)
    -- You can use that pointer/reference to call methods on the object and *CHANGE* the object

 4. If a method modifies an object, the modification is visible outside that method.








Exercise
--------
 1. Create a class called Person
    a. Add a public String called name;
    b. Add a one-argument constructor that sets the name

         package com.lessons;

         public class Person {
             public String name;

             public Person(String aName) {
                 this.name = aName;
             }
         }


 2. Create a class called StringUtilities with all static methods

        package com.lessons;

        import java.util.regex.Pattern;

        public class StringUtilities {


            private static final Pattern patMatchAscii0To31     = Pattern.compile("[\\u0000-\\u001F]", Pattern.CASE_INSENSITIVE);
            private static final Pattern patMatchMultipleSpaces = Pattern.compile("[ ]+", Pattern.CASE_INSENSITIVE);



            public static String cleanTextReturnValue(String aRawText) {
                // Convert any ascii chars in the range of 0-31 to a space
                String cleanText = patMatchAscii0To31.matcher(aRawText).replaceAll(" ");

                // Convert multiple spaces to a single space
                cleanText = patMatchMultipleSpaces.matcher(cleanText).replaceAll(" ");

                return cleanText;
            }


            public static void cleanText(String aRawText) {
                // Convert any ascii chars in the range of 0-31 to a space
                aRawText = patMatchAscii0To31.matcher(aRawText).replaceAll(" ");

                // Convert multiple spaces to a single space
                aRawText = patMatchMultipleSpaces.matcher(aRawText).replaceAll(" ");
            }


            public static void cleanPersonName(Person p) {
                p.name = patMatchAscii0To31.matcher(p.name).replaceAll(" ");

                p.name = patMatchMultipleSpaces.matcher(p.name).replaceAll(" ");
            }



            public static Person cleanPersonNameReturnObject(Person p) {
                p.name = patMatchAscii0To31.matcher(p.name).replaceAll(" ");

                p.name = patMatchMultipleSpaces.matcher(p.name).replaceAll(" ");

                return p;
            }


            public static int decrementReturnValue(int aValue) {
                return (aValue - 1);
            }

            public static void decrement(int aValue) {
                aValue = aValue - 1;
            }

        }



 3. Create a class called App2

        package com.lessons;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.jdbc.datasource.SingleConnectionDataSource;

        public class App2 {

            private static final Logger logger = LoggerFactory.getLogger(App2.class);


            /**********************************************************
             * main()
             *
             * Main program to access this class from the command-line
             ********************************************************** */
            public static void main(String[] args) {

                // Case 1:  Pass-in a String and return a String:   Will the method change the string?
                logger.debug("Case 1");
                String raw = "HI\tThere\n#1";
                String clean = StringUtilities.cleanTextReturnValue(raw);
                logger.debug("  raw-->{}<---   clean-->{}<--", raw, clean);

                // Case 2:  Pass-in a String and change the String:   Will the method change the string?
                logger.debug("Case 2");
                String raw2 = "HI\t\nThere #3";
                logger.debug("  Before raw2-->{}<--", raw2);
                StringUtilities.cleanText(raw2);
                logger.debug("  After  raw2-->{}<--", raw2);



                // Case 3:  Pass-in an object and return the object -- Will the method change the object?
                logger.debug("Case 3");
                String name = "John1 with \t tabs and \n\n new lines";
                Person p = new Person( name);
                logger.debug("  Before p.name-->{}<--", p.name);
                p = StringUtilities.cleanPersonNameReturnObject(p);
                logger.debug("  After  p.name-->{}<--", p.name);

                // Case 4:  Pass-in an object -- Will the method change the object?
                logger.debug("Case 4");
                String name2 = "John2 with \t tabs and \n\n new lines";
                Person p2 = new Person( name2);
                logger.debug("  Before p2.name-->{}<--", p2.name);
                StringUtilities.cleanPersonName(p2);
                logger.debug("  After  p2.name-->{}<--", p2.name);



                // Case 5: Pass-in a primitive and return a primitive
                logger.debug("Case 5");
                int i = 5;
                logger.debug("  Before i={}", i);
                i = StringUtilities.decrementReturnValue(i);
                logger.debug("  After  i={}", i);

                // Case 6: Pass-in a primitive and change the primitive -- Will it change the primitive?
                logger.debug("Case 6");
                int i2 = 10;
                logger.debug("  Before i2={}", i2);
                StringUtilities.decrement(i2);
                logger.debug("  After  i2={}", i2);
            }
         }
