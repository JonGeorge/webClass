Fundamentals of Unit Tests w/JUnit and Spring
---------------------------------------------

Lessons
-------
 1. Unit tests java code is found in /src/test/java
 2. Production java code is found in /src/main/java
 3. Unit test code can access everything in /src/main/java


References
----------
https://blog.codecentric.de/en/2017/02/integration-testing-strategies-spring-boot-microservices/



Advantages of Unit Tests (my opinion)
-------------------------------------
+ Verifies code works
+ Good for testing edge cases
+ Gives developers confidence that your code changes did not break existing logic
  (I added some new code, ran the tests, and the tests pass -- so I feel good about this code change)
+ Useful for testing code that has no user interface -- e.g., you want to test ingesting a csv file and make sure it works


Disadvantages of Unit Tests (my opinion)
----------------------------------------
- Unit tests are expensive
- Unit tests provide no direct value to your customers
- Developers can spend months on unit tests and the code can still fail if not tested in a pre-prod environment
- The code tests a small thing (and does not prove end-to-end functionality)
- All of the unit tests can pass and your application can still fail
- When you change business rules, you must change your unit tests (taking more time)
- Gives developers false sense of confidence (yes, the code passed all of my unit tests so it must work -- not necessarily true)
- Unit tests do not prove that performance is acceptable (the unit test can pass and take 45 seconds but users will not wait 45 seconds for a page to load)
- Unit tests can be poorly written -- e.g., you create a unit test that tests a REST endpoint and all you test is that the REST endpoint returns something.  That does not prove it works


Flawed Thinking
---------------
Most developers believe that IF
 1) I change some code *AND*
 2) I run all of my unit tests *AND*
 3) All unit tests pass *AND*
 Then
   My code change is good

This is not true for most web applications.
-- If the unit tests are poorly written,      then your code change is not tested by the unit tests (and false sense of confidence)
-- If the unit tests do not handle your case, then your code change is not tested by the unit tests (and false sense of confidence)
-- If the unit tests are not up to date,      then your code change is not tested by the unit tests


Resnick's Rules
---------------
Spending developer time on unit tests violates 2 critical rules
 1) Most expensive thing in any software project is the developer's time
 2) Customers care about feature (and nothing else)


Therefore, I believe it is cheaper to have dedicated testers than to spend developer time on unit tests
 + You get better coverage doing end-to-end testing
 + Testers test to see where things fail (while developers test to see if thing works)
 + It's cheaper
 + Real testers can test to see if the application performance well (are the REST calls slow?)



If you must write unit tests
----------------------------
 A) Keep the unit tests simple
 B) Don't spend a lot of time on them




Create a Unit Test
------------------
 1. Create a separate logback-test.xml for unit tests
    NOTE:  Logback looks for logback-test.xml
           So, I would create one in /src/test/resources/logback-test.xml

             <?xml version="1.0" encoding="windows-1252" ?>
             <configuration debug="false">
                 <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                     <encoder>
                         <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                     </encoder>
                 </appender>

                 <logger name="org.springframework" level="DEBUG" additivity="false">
                     <appender-ref ref="CONSOLE"/>
                 </logger>

                 <logger name="com.lessons" level="DEBUG" additivity="false">
                     <appender-ref ref="CONSOLE"/>
                 </logger>

                 <root level="WARN">
                     <appender-ref ref="CONSOLE"/>
                 </root>
             </configuration>




 2. Add the spring-boot-starter-test dependency
         <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-test</artifactId>
              <version>2.0.0.RC1</version>
              <scope>test</scope>
          </dependency>

    NOTES:
       a. The <scope> tag holds test because we do not want to include this with production code
       b. The spring-boot-starter-test contains Junit 4, Spring Test, AssertJ, Hamcredt, Mockito, JSONassert, and JsonPath
       c. The spring-boot-starter-test version should match your spring-boot version

        So, your spring boot version should look like this:

                <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot -->
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot</artifactId>
                    <version>2.0.0.RC1</version>
                </dependency>



 3. Create a class that ends with "Test" in the /src/test/java
    a. Right-click on /src/test/java/com/lessons-> New Java Class
    b. ClassName:  BogusTest
    c. Replace your class with this:


          package com.lessons;


          import org.junit.Test;
          import org.junit.runner.RunWith;
          import org.slf4j.Logger;
          import org.slf4j.LoggerFactory;
          import org.springframework.boot.test.context.SpringBootTest;
          import org.springframework.test.context.junit4.SpringRunner;

          import javax.annotation.Resource;
          import java.util.Arrays;
          import java.util.List;

          import static org.hamcrest.Matchers.is;
          import static org.junit.Assert.assertThat;
          import static org.junit.Assert.assertTrue;

          @RunWith(SpringRunner.class)                                                  // Required to work with JUnit 4
          @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)   // Start up a Spring Boot webapp listening on random port
          public class BogusTest {

              private static final Logger logger = LoggerFactory.getLogger(BogusTest.class);

                @Value("${local.server.port}")
                private String appServerPort;       // Holds the port that the test app server is listening on

                @Test
                public void testDashboardControllerGetTime2() {
                    RestTemplate restTemplate = new RestTemplate();

                    // Construct the URL to connect to this REST endpoint
                    String url = "http://localhost:" + appServerPort + "/app1/api/dashboard/time";

                    // Invoke the REST endpoint and get the response
                    String dateTime = restTemplate.getForObject(url, String.class);

                    assertTrue("Expected dateTime to be non-null", (dateTime != null));
                }


          }



       What is happening?
       -- The unit test class is creating a real app server
       -- So, we can send real POST calls to http://localhost:${local.server.port} and it will be routed to this app server
       -- The RestTemplate object lets us make REST calls


 4. Set a breakpoint in your unit test method

 5. Step through your unit test with the debugger
    -- Right-click on your testDashboardControllerGetTime2() -> Debug


