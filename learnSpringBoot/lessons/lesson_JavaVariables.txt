Java Variables
--------------

There are 3 kinds of Variables
 1) Local Variables
 2) Instance Variables
 3) Static (or Class) Variables


Local Variables
---------------
 - Declared within methods, constructors or blocks
 - Variable is created in the block and destroyed once it exits the block
 - Only visible within the method, constructor, or block

    public class Stuff {

     public void init() {
        Integer age = 5;   // Local variable
     }

    }



Instance Variables
------------------
 - Declared in a class (but outside a method, constructor, or block)
 - Space for the variable is allocated in the heap
 - Variable is created when the larger object is created (with the use of 'new'
 - Variable is destroyed when the larger object is destroyed
 - Visible to all methods, constructors within the larger class
 - Can be accessed directly as this.VariableName or just VariableName
 - Commonly used for:
     a) Getters and Setters
     b) Injected resources


 public class Stuff {

     @Value("${es.hostname:}")
     private String es_hostname   // Instance variable

      public void init() {
         Integer age = 5;   // Local variable
      }

 }



Static or Class Variables
-------------------------
 - Declared using the static keyword (outside of a method, constructor, or block)
 - Static variables can be accessed by calling ClassName.VariableName
 - There will only be *one* copy of each class variable per-class
    NOTE:  If I call new 50 times and create 50 objects, there is only one copy
 - Commonly used for
    a) Loggers
    b) Constants


 public class Stuff {

     public static final Integer SPECIAL_ID = 5;   // Static Variable


     public static void main(String args[]) {
          System.out.println("Special Id is " + SPECIAL_ID);
       }

 }



 public class App {
      public static void main(String args[]) {
           System.out.println("Special Id from the Stuff class is " + Stuff.SPECIAL_ID);

 }