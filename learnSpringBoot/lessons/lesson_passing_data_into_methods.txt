Lesson:  How is data passed into methods
----------------------------------------
What happens when you pass-in something into a method?


Definitions
-----------
 call-by-value       The call-by-value approach copies the value of an argument into the formal parameter of the subroutine.
                     Therefore, changes made to parameter of the function or subroutine have no effect on the argument.

 call-by-reference   The  call-by-reference approach, a reference to an argument (not the value of the argument) is passed to the parameter.
                     Inside the subroutine, this reference is used to access the actual argument determined in the call.
                     This means that changes made to the parameter will affect the argument used to call the subroutine.




There are different things here:
 A) Primitive values
 B) References to objects
    When you create an object all you get is a reference to it.
 C) Actual objects



Rules
-----
 1. Objects are *NOT* passed-in to methods/procedures

 2. When you pass-in a primitive value -- you are passing-in a copy of the primitive
    -- So primitives work in the manner of "call by value"

 3. When you pass-in a reference -- you are passing in a pointer to the object
    -- So, the pointer is copied (not the entire object)
    -- You can use that pointer/reference to call methods on the object and *CHANGE* the object

 4. If a method modifies an object, the modification is visible outside that method.

   void changeName(Person x) {
       x.name = "Andreas";
   }

    Person p = new Person();
    p.name = "John";
    changeName(p);
    System.out.println(p.name);



   Example #2:
         class Operation{
            private int data=50;

            public Operation(int aData) {
                this.data = aData;
            }

            public int getData() {
                return this.data;
            }

            public void change(int data){
                this.data = this.data + 100;
            }



           public static void main(String args[]){
             Operation op=new Operation(50);

             System.out.println("before change "+op.getData() );
             op.change(500);
            System.out.println("after change "+op.getData() );

          }
         }

