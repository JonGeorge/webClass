Lesson:  Maps, Lists (continued), System Class, and StringUtils
---------------------------------------------------------------

Lessons:
 1) Maps are handy (difference between Map and HashMap)
 2) If you must loop through a list and delete something, use an iterator
    + More efficient then creating a second list
 3) System class is used for telling the operating system if you exit successfully or exit with failure
 4) StringUtils.split() and StringUtils.join() are great
    but you must be aware of how to convert fixed arrays into List<String



Give a lesson on Maps (HashMaps, LinkedHashMaps)
 a) Why is map O(1) for get calls
 b) How to add to maps
 c) How to loop through maps (using keyset)
 d) How to loop through maps (using entryset)



Discuss System class
 a) System.exit()
 b) System.currentTimeMillis() (to get time in milliseconds)
    -- How to get the running time of a method
    -- Get the time at start
    -- Get the time at end
    -- Show difference


Lists (continued)
-----------------
 a) How to loop through a list and delete items
    -- For loop throws exception
    -- Iterator does not throw exception


StringUtils.split() and StringUtils.join()
-------------------------------------------

Case 1:  Convert List<String> into csv string
            String csv = StringUtils.join(list, ", ");

Case 2:  Convert CSV string into List<String>
            String[] fixedArray = StringUtils.split(csvString, ",");
            List<String> list = Arrays.asList(fixedArray);


Ending example: Create a method that returns a list of string
   public static List<String> getWordsInString(String aText)
   {

   }




Possible Answers:
 1) Use StringUtils.split with the space as separator
    public static List<String> getWordsInString(String aText)
     {
        String[] fixedArray = StringUtils.split(aText, " ");
        List<String> list = Arrays.asList(fixedArray);
        return list
     }


 2) Use the String.split
   public static List<String> getWordsInString(String aText)
      {
         String[] fixedArray = aText.split(aText, " ");
         List<String> list = Arrays.asList(fixedArray);
         return list
      }


