Lesson:  Setup a Cache for the Lookup Factory
---------------------------------------------
Problem:  Lots of pages needs to get lookup values
Solution: Create a LookupFactory that can invoke REST calls to get the data


Approach
 1) Setup database tables to hold lookup values
    a) Create a database table with lookup categories
    b) Create a database table with lookup values
    c) Insert a database record for the lookup category: 'priority'
    d) Insert database records for the lookup values: 'low', 'medium', 'high', 'critical'
    e) Insert a database record for the lookup category: 'report_type'
    f) Insert database records for the lookup values: 'hr report', 'sales report', 'executive report'


 2) Create a REST endpoint to get all lookup values with category name sorted by...
    -- GET /api/lookup/type/{type}
    -- Generates SQL to select id, name from lookup values where category name is....
    -- Returns a list of lookup DTO objects (with id and name)

 3) Create a lookup.factory.js with a call to getLookupWithTypeName('priorities')

 4) Change the routes.js so that the lookup data is resolved on page loadup
    -- It should get lookup data for priority
    -- It should get lookup data for report_type

 5) Change the reports_view main.controller.js so that it uses the lookup data for dropdowns



Procedure
---------
 1. Add a new flyway script with the tables for lookups
    a. Go to database-migration/src/main/resources/db/migration -> New File
       Filename:  V1.4__lookup_tables.sql

       NOTE:  If you have a V1.4, then make this new file 1.5....


    b. Copy this to your newly-created sql script

         --------------------------------------------------------------
         -- Filename:  V1.4__lookup_tables.sql
         --------------------------------------------------------------

         -- Create this table:  LookupType
         create table lookup_type
         (
             id            integer      not null,
             version       integer      not null,
             name          varchar(256) not null,
             primary key (id),
             constraint lookup_type_name_uniq UNIQUE(name) -- Each lookup type name must be unique
         );
         comment on table  lookup_type      is 'This lookup_type table holds all of the lookup type names.  Every lookup must have a type';
         comment on column lookup_type.name is 'Lookup_type.name holds the name or category of this lookup -- e.g., priority.';



         -- Create this table:  Lookup
         create table lookup
         (
             id            integer      not null,
             version       integer      not null,
             lookup_type   integer      not null,
             name          varchar(256) not null,
             display_order integer      null,
             primary key(id),
             constraint lookup_name_uniq UNIQUE(lookup_type, name),                           -- Each lookup name and type must be unique
             constraint lookup_type_fkey FOREIGN KEY(lookup_type) references lookup_type(id)  -- Each lookup type must exist in the lookup_type table
         );
         comment on table  lookup               is 'The lookup table holds all of the lookup values';
         comment on column lookup.name          is 'Lookup.name holds the actual lookup name -- low, medium, high';
         comment on column lookup.display_order is 'A possible order to display the lookups on the front-end';


         -- Insert Starting Lookup Types
         insert into lookup_type(id, version, name) values(100, 1, 'priority');
         insert into lookup_type(id, version, name) values(101, 1, 'report_type');


         -- Insert Starting Lookup Values for priority
         insert into lookup(id, version, lookup_type, display_order, name)  values(1, 1,  100, 1, 'low');
         insert into lookup(id, version, lookup_type, display_order, name)  values(2, 1,  100, 2, 'medium');
         insert into lookup(id, version, lookup_type, display_order, name)  values(3, 1,  100, 3, 'high');
         insert into lookup(id, version, lookup_type, display_order, name)  values(4, 1,  100, 4, 'critical');


         -- Insert Starting Lookup Values for report_type
         insert into lookup(id, version, lookup_type, name)  values(5, 1, 101, 'Marketing');
         insert into lookup(id, version, lookup_type, name)  values(6, 1, 101, 'H&R');
         insert into lookup(id, version, lookup_type, name)  values(7, 1, 101, 'CEO');


    c. Run flyway:migrate to apply these changes to your local database
       unix> cd ~/intellijProjects/app1
       unix> cd database-migration
       unix> mvn flyway:migrate
       
    

 2. Create a REST endpoint to get all lookup values with the given lookup type
    Contract will be:  GET /api/lookups/{lookup_type}

    a. Create the Java class:  LookupDTO
       1) Right-click on app1/webapp/src/main/java/com/lessons/models -> New Java Class
          Class Name:  LookupDTO

       2) Copy this to your newly-created class

            package com.lessons.models;

            public class LookupDTO {
                private int id;
                private String name;

                public int getId() {
                    return id;
                }

                public void setId(int id) {
                    this.id = id;
                }

                public String getName() {
                    return name;
                }

                public void setName(String name) {
                    this.name = name;
                }
            }


    b. Create the Java class:  LookupService
       1) Right-click on app1/webapp/src/main/java/com/lessons/services -> New Java Class
          Class Name:  LookupService

       2) Copy this to your newly-created class

            package com.lessons.services;

            import com.lessons.models.LookupDTO;
            import org.apache.commons.lang3.StringUtils;
            import org.slf4j.Logger;
            import org.slf4j.LoggerFactory;
            import org.springframework.jdbc.core.BeanPropertyRowMapper;
            import org.springframework.jdbc.core.JdbcTemplate;
            import org.springframework.jdbc.support.rowset.SqlRowSet;
            import org.springframework.stereotype.Service;

            import javax.annotation.Resource;
            import javax.sql.DataSource;
            import java.util.List;

            @Service("com.lessons.services.LookupService")
            public class LookupService {
                private static final Logger logger = LoggerFactory.getLogger(LookupService.class);

                @Resource
                private DataSource dataSource;


                /**
                 * @param aLookupType holds the name of the lookup type
                 * @return true if found in the lookup_type table.  False otherwise
                 */
                public boolean doesLookupTypeExist(String aLookupType) {
                    // Construct the sql to see if this lookup type is found in the lookup_type table
                    String sql = "Select id from lookup_type where name=?";

                    // Execute the SQL
                    JdbcTemplate jt = new JdbcTemplate(this.dataSource);
                    SqlRowSet rs = jt.queryForRowSet(sql, aLookupType);

                    // Returns true if the lookup name is found, false otherwise
                    return rs.next();
                }

                /**
                 * @param aLookupType holds a string with a lookup type name
                 * @return list of LookupDTO objects that hold information about all lookups with this lookup type name
                 */
                public List<LookupDTO> getLookupsWithType(String aLookupType, String aOrderBy) {
                    String sql = "select l.id, l.name\n" +
                                "from lookup l\n" +
                                "join lookup_type lt on (lt.id=l.lookup_type)\n" +
                                "where lt.name=? ";

                    if (StringUtils.isNotEmpty(aOrderBy)) {
                        // Append the order by string
                        sql = sql + "order by " + aOrderBy;
                    }

                    // Execute the SQL, generating a list of LookupDTO objects
                    // NOTE:  If no lookup records are found, then returns an empty list
                    BeanPropertyRowMapper rowMapper = new BeanPropertyRowMapper(LookupDTO.class);
                    JdbcTemplate jt = new JdbcTemplate(this.dataSource);
                    List<LookupDTO> lookups = jt.query(sql, rowMapper, aLookupType);

                    // Return the list of LookupDTO objects (or empty list)
                    return lookups;
                }
            }


    c. Create the Java class:  LookupController
       1) Right-click on app1/webapp/src/main/java/com/lessons/controllers -> New Java Class
          Class Name:  LookupController

       2) Copy this to your newly-created class

            package com.lessons.controllers;

            import com.lessons.models.LookupDTO;
            import com.lessons.services.LookupService;
            import org.slf4j.Logger;
            import org.slf4j.LoggerFactory;
            import org.springframework.http.HttpStatus;
            import org.springframework.http.MediaType;
            import org.springframework.http.ResponseEntity;
            import org.springframework.stereotype.Controller;
            import org.springframework.web.bind.annotation.PathVariable;
            import org.springframework.web.bind.annotation.RequestMapping;
            import org.springframework.web.bind.annotation.RequestMethod;

            import javax.annotation.Resource;
            import java.util.List;

            @Controller("com.lessons.controllers.LookupController")
            public class LookupController {
                private static final Logger logger = LoggerFactory.getLogger(LookupController.class);

                @Resource
                private LookupService lookupService;

                /*************************************************************************
                 * REST endpoint /api/lookups/{lookupType}/{orderBy}
                 *               /api/lookups/{lookupType}
                 *
                 * @return list of LookupDTO objects for the given category name
                 *************************************************************************/
                @RequestMapping(value = {"/api/lookups/{lookupType}/{orderBy}",
                                         "/api/lookups/{lookupType}"}, method = RequestMethod.GET, produces = "application/json")
                public ResponseEntity<?> getLookupsWithType(@PathVariable(name="lookupType")               String aLookupType,
                                                            @PathVariable(name="orderBy", required=false)  String aOrderBy) {
                    logger.debug("getLookupsWithType() started.   aLookupType={}", aLookupType);

                    if (! lookupService.doesLookupTypeExist(aLookupType) ) {
                        return ResponseEntity
                                .status(HttpStatus.BAD_REQUEST)
                                .contentType(MediaType.TEXT_PLAIN)
                                .body("The pass-in lookup type does not exist: " + aLookupType);
                    }

                    List<LookupDTO> lookupDTOS = lookupService.getLookupsWithType(aLookupType, aOrderBy);

                    // Return the list of LookupDTO objects back to the front-end
                    return ResponseEntity
                            .status(HttpStatus.OK)
                            .body(lookupDTOS);
                }
            }



 3. Create a lookup.factory.js
    a. Right-click on webapp/src/main/resources/public/resources/factories -> New File
       Filename:  lookup.factory.js

    b. Copy this to your newly-created lookup.factory.js

            (function(){
                //
                //  LookupFactory holds methods to get lookup values from the app server
                //
                angular.module('app1')
                    .factory('LookupFactory', ['$http', '$q', init] )

                function init($http, $q) {
                    let LookupFactory = {};

                    LookupFactory.getLookupWithTypeName = getLookupWithTypeName;

                    return LookupFactory;



                    /*
                     * Make a REST call and returns a list of lookup DTOs with the passed-in category name
                     */
                    function getLookupWithTypeName(aType) {
                        console.log('getLookupWithTypeName() started.');

                        return $http.get('./api/lookups/' + aType).then(function(results) {
                            // The REST call returned with a 200-299 status code

                            // So, return some data
                            return results.data;
                        })
                    }


                }
            })();

    c. Make sure your app.html loads this file on page startup
       a. Go to webapp/src/main/resources/public/app.html

       b. Add this line to it:
              <script src="./resources/factories/lookup.factory.js"></script>


          So, the top of your app.html should look something like this:

            <!DOCTYPE html>
            <html lang="en" data-ng-app="app1">
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
                <meta http-equiv="X-UA-Compatible" content="IE=edge">

                <title>App Main Page</title>

                <base href="/app1/">

                <!-- Include CSS Files -->
                <link rel="stylesheet" type="text/css" href="./resources/node_modules/angular-resizable/angular-resizable.min.css">
                <link rel="stylesheet" type="text/css" href="./resources/node_modules/angular-material/angular-material.min.css">
                <link rel="stylesheet" type="text/css" href="./resources/node_modules/angular-ui-grid/ui-grid.min.css">
                <link rel="stylesheet" type="text/css" href="./resources/node_modules/@fortawesome/fontawesome-free/css/all.css">
                <link rel="stylesheet" type="text/css" href="./resources/css/index.css">

                <!-- Load All Node Modules JavaScript Dependencies -->
                <script src="./resources/node_modules/angular/angular.js"></script>
                <script src="./resources/node_modules/@uirouter/angularjs/release/angular-ui-router.min.js"></script>
                <script src="./resources/node_modules/angular-aria/angular-aria.min.js"></script>
                <script src="./resources/node_modules/angular-animate/angular-animate.min.js"></script>
                <script src="./resources/node_modules/angular-material/angular-material.min.js"></script>
                <script src="./resources/node_modules/angular-messages/angular-messages.min.js"></script>
                <script src="./resources/node_modules/angular-sanitize/angular-sanitize.min.js"></script>
                <script src="./resources/node_modules/angular-scroll/angular-scroll.min.js"></script>
                <script src="./resources/node_modules/angular-resizable/angular-resizable.min.js"></script>
                <script src="./resources/node_modules/@fortawesome/fontawesome-free/js/all.js"></script>
                <script src="./resources/node_modules/angular-ui-grid/ui-grid.js"></script>
                <script src="./resources/node_modules/angular-ui-grid/ui-grid.exporter.js"></script>

                <!-- Load all custom JavaScript Files -->
                <script src="./resources/config/app.js"></script>
                <script src="./resources/config/routes.js"></script>
                <script src="./resources/config/state.js"></script>
                <script src="./resources/config/nav.controller.js"></script>

                <!-- Load all factories *before* loading feature controllers -->
                <script src="./resources/factories/reports.factory.js"></script>
                <script src="./resources/factories/grid.service.js"></script>
                <script src="./resources/factories/lookup.factory.js"></script>

                <!-- Load all JavaScript files for the various features -->
                <script src="./resources/modules/features.js"></script>
                <script src="./resources/features/reports/view_reports/main.controller.js"></script>
                <script src="./resources/features/reports/add_report/main.controller.js"></script>
            </head>
