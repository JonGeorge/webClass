Lesson:  Create Project Structure
---------------------------------
This project will have a number of components, including:
 1) A maven module that holds the Springboot webapp
 2) A maven module that holds the flyway database migration


Assumptions:  
 A) You have Intellij Idea Community Edition installed
 B) You have Maven installed
 C) Your Maven configuration can download files from a maven repository
 D) You want to setup a basic SpringBoot Web Application


 
 
Procedures
----------
 1. Create your "app1" web project in Intellij
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project
       
    b. Press "Create New Project"
       1) In the "New Project" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java 1.8 JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java 1.8 JDK
                      -- Press OK
               
            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next
               
       2) In the next screen
          GroupId:     com.lessons
          ArtifactId:  app1
          Version:     1.0-SNAPSHOT
          Press Next
          
          
       3) In the next screen,
          Maven home directory:  C:/tools/apache-maven-3.2.3
          User settings file:    Check the checkbox to "Override"
                                 C:\tools\apache-maven-3.2.3\conf\settings.xml
          Press Next                       
                                 
       
       4) Project Name:      app1
          Project Location:  C:\tools\intellij\workspace\app1
          Press Finish
          
       5) If you get prompted that "C:\tools\intellij\workspace\app1" does not exist
          It will be created by Intellij
          Press OK 
     
       6) If you get prompted 
          New projects can either be opened in a new window or replace the project
          Press "This Window"
          
       7) If you are prompted 
          Maven projects need to be imported
          Press "Enable Auto-Import"
          
          Now, maven has created a simple "Hello World" web app
       
       
       
 2. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
          a) Single-click on Inspections
          b) next to Typo -- Uncheck the checkbox
          c) Press Apply
          
          

 3. Add a new maven module called "webapp"
    a. Right-click on app1 -> New -> Module
       1) In the "New Module" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java 1.8 JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java 1.8 JDK
                      -- Press OK
               
            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next
               
               
       2) In the next screen
          ArtifactId:  webapp
          Press Next
          Press Finish


 4. Add a new maven module called "database-migration"
    a. Right-click on app1 -> New -> Module
       1) In the "New Module" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java 1.8 JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java 1.8 JDK
                      -- Press OK
               
            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next
               
               
       2) In the next screen
          ArtifactId:  database-migration
          Press Next
          Press Finish

    b. Delete the database-migration java directories:
       Delete database-migration/src/main/java directory (and everything beneath)
       Delete database-migration/src/test/java directory



 5. Clean up the project structure
    a. Remove the app1/src directory
       Right-click on app1/src -> Delete  

    b. Add these directories:
          app1/webapp/src/main/resources
          app1/webapp/src/main/resources/public
          app1/webapp/src/test/resources

    c. Edit the app1/pom.xml file  (this is often called the parent pom.xml)
       Replace the file contents with this:

            <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
              <modelVersion>4.0.0</modelVersion>

              <groupId>com.lessons</groupId>
              <artifactId>app1</artifactId>
              <version>1.0-SNAPSHOT</version>
              <modules>
                <module>webapp</module>
                <module>database-migration</module>
              </modules>
              <packaging>pom</packaging>

              <name>app1</name>
              <url>http://maven.apache.org</url>

              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
              </properties>

              <repositories>
                <repository>
                  <!-- Setup the repo so we can get the latest spring-boot libraries -->
                  <id>spring-repo</id>
                  <name>spring-repo</name>
                  <url>http://repo.spring.io/milestone/</url>
                </repository>
              </repositories>
            </project>



           
 7. Add dependencies for Spring Boot and Logback to the webapp's pom.xml
    Edit the app1/webapp/pom.xml

    You probably see something like this:
       <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
           <parent>
               <artifactId>app1</artifactId>
               <groupId>com.lessons</groupId>
               <version>1.0-SNAPSHOT</version>
           </parent>
           <modelVersion>4.0.0</modelVersion>

           <artifactId>webapp</artifactId>
           <packaging>jar</packaging>

           <name>webapp</name>
           <url>http://maven.apache.org</url>

           <properties>
               <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
           </properties>

           <dependencies>
               <dependency>
                   <groupId>junit</groupId>
                   <artifactId>junit</artifactId>
                   <version>3.8.1</version>
                   <scope>test</scope>
               </dependency>
           </dependencies>
       </project>


    Replace your webapp's pom.xml with this
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <parent>
                <artifactId>app1</artifactId>
                <groupId>com.lessons</groupId>
                <version>1.0-SNAPSHOT</version>
            </parent>
            <modelVersion>4.0.0</modelVersion>

            <artifactId>webapp</artifactId>
            <packaging>jar</packaging>

            <name>webapp</name>
            <url>http://maven.apache.org</url>

            <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            </properties>

            <dependencies>
                <dependency>
                    <!-- Spring Core -->
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-core</artifactId>
                    <version>5.0.3.RELEASE</version>

                    <exclusions>
                        <exclusion>
                            <!-- Remove commons logging from spring as we will use logback -->
                            <groupId>commons-logging</groupId>
                            <artifactId>commons-logging</artifactId>
                        </exclusion>
                    </exclusions>
                </dependency>

                <dependency>
                    <!-- Spring Boot -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-web</artifactId>
                    <version>2.0.0.RC1</version>

                    <exclusions>
                        <exclusion>
                            <!-- Remove Tomcat from Spring Boot -->
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-starter-tomcat</artifactId>
                        </exclusion>

                        <exclusion>
                            <!-- Remove logging from spring as we will use logback -->
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-starter-logging</artifactId>
                        </exclusion>
                    </exclusions>
                </dependency>

                <dependency>
                    <!-- Add Dependecy for the Undertow App Server -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-undertow</artifactId>
                    <version>2.0.0.RC1</version>

                    <exclusions>
                        <exclusion>
                            <!-- Remove logging from undertow as we will use logback -->
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-starter-logging</artifactId>
                        </exclusion>
                    </exclusions>
                </dependency>

                <dependency>
                    <!-- Send logging from Java Common Logging to SLF4J -->
                    <groupId>org.slf4j</groupId>
                    <artifactId>jcl-over-slf4j</artifactId>
                    <version>1.7.5</version>
                </dependency>

                <dependency>
                    <!-- SLF4J will use Logback-classic as its logging implementation -->
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                    <version>1.2.3</version>
                </dependency>

                <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <version>4.12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </project>

    


 8. Setup logback in the web app
    a. Right-click on app1/webapp/src/main/resources -> New -> File
       filename:  logback.xml
       Press OK

    b. Copy this into your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

            <?xml version="1.0" encoding="windows-1252" ?>
            <configuration debug="false">
                <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                    <encoder>
                        <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                    </encoder>
                </appender>

                <logger name="org.springframework" level="DEBUG" additivity="false">
                    <appender-ref ref="CONSOLE"/>
                </logger>

                <logger name="org.springframework.core.env.PropertySourcesPropertyResolver" level="INFO" additivity="false">
                    <appender-ref ref="CONSOLE"/>
                </logger>

                <logger name="com.lessons" level="DEBUG" additivity="false">
                    <appender-ref ref="CONSOLE"/>
                </logger>

                <root level="DEBUG">
                    <appender-ref ref="CONSOLE"/>
                </root>
            </configuration>


 9. Modify the App.java class to use use logback
    a. Edit the webapp/src/main/java/com/lessons/App.java
    b. Replace it with this

        package com.lessons;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;

        /**
         * Main Application
         **/

        public class App {
            private static final Logger logger = LoggerFactory.getLogger(App.class);

            public static void main(String[] args)
            {
                logger.debug("main() started.");
                System.out.println("Hello World!");

                logger.debug("main() finished.");
            }
        }

10. Verify logging is working
    a. Set a breakpoint in your logger.debug() line by clicking in the margin
    b. Right-click on main() -> Debug 'App.main'
    c. Press F9 to continue
       You should see this in the console
        02/02/2018 22:45:22 DEBUG com.lessons.App main() started.
        Hello World!
        02/02/2018 22:45:22 DEBUG com.lessons.App main() finished.


11. Update the App.java class into a Spring-Boot webapp
    a. Update the App.java class to look like this:

        package com.lessons;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.boot.SpringApplication;
        import org.springframework.boot.autoconfigure.SpringBootApplication;

        /**
         * Main Application
         **/
        @SpringBootApplication
        public class App
        {
            private static final Logger logger = LoggerFactory.getLogger(App.class);



            public static void main( String[] args ) throws Exception
            {
                logger.debug("main() started.");

                // Start up Spring Boot
                SpringApplication.run(App.class, args);

                logger.debug("WebApp is Up.");
            }
        }

    b. Create this file:  application.yaml
       1) Right-click on app1/webapp/src/main/resources -> New -> File
          Filename:  application.yaml

       2) Copy this to your new file:
            ##########################################################
            # application.yaml   (used for development purposes)
            ##########################################################
            name: app1
            server.servlet.context-path: /app1
            server.port: 8080

    c. Create this file:  app.html
       1) Right-click on webapp/src/main/resources/public -> New -> File
          Filename:  app.html

       2) Copy this to your new file:
            <html>
            <body>
              <h2>app.html</h2>

              If you see this, then your basic webapp is running
            </body>
            </html>


12. Verify the web app runs
    a. Pull Run -> Debug 'App'
    b. Open a browser and go to http://localhost:8080/app1/app.html
       -- You should see app.html


