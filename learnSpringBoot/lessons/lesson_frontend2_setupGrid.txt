Lesson:  Setup an Angular UI Grid
---------------------------------
Add a page that has a grid in it (with bogus data)


Procedure
---------
 1. Use NPM to install the angular-ui-grid JavaScript dependencies (into the node_modules directory)
    unix> cd ~/intellijProjects/app1/webapp/src/main/resources/public/resources
    unix> npm config set save-prefix=''
    unix> npm install --save angular-ui-grid@4.8.3

 2. Adjust the app.html to include the new angular-ui-grid js files
    a. Open the app1 project in Intellij
    b. Edit the webapp/src/main/resources/public/app.html
    c. Add this to the Node Modules scripts:
            <script src="./resources/node_modules/angular-ui-grid/ui-grid.js"></script>
            <script src="./resources/node_modules/angular-ui-grid/ui-grid.exporter.js.js"></script>

    d. Add this to the CSS includes:
            <link rel="stylesheet" type="text/css" href="./resources/node_modules/angular-ui-grid/ui-grid.min.css">


    When done, the top of your app.html should look like this:

         <!-- Include CSS Files -->
         <link rel="stylesheet" type="text/css" href="./resources/node_modules/angular-resizable/angular-resizable.min.css">
         <link rel="stylesheet" type="text/css" href="./resources/node_modules/angular-material/angular-material.min.css">
         <link rel="stylesheet" type="text/css" href="./resources/node_modules/angular-ui-grid/ui-grid.min.css">
         <link rel="stylesheet" type="text/css" href="./resources/node_modules/@fortawesome/fontawesome-free/css/all.css">
         <link rel="stylesheet" type="text/css" href="./resources/css/index.css">

         <!-- Load All Node Modules JavaScript Dependencies -->
         <script src="./resources/node_modules/angular/angular.js"></script>
         <script src="./resources/node_modules/@uirouter/angularjs/release/angular-ui-router.min.js"></script>
         <script src="./resources/node_modules/angular-aria/angular-aria.min.js"></script>
         <script src="./resources/node_modules/angular-animate/angular-animate.min.js"></script>
         <script src="./resources/node_modules/angular-material/angular-material.min.js"></script>
         <script src="./resources/node_modules/angular-messages/angular-messages.min.js"></script>
         <script src="./resources/node_modules/angular-sanitize/angular-sanitize.min.js"></script>
         <script src="./resources/node_modules/angular-scroll/angular-scroll.min.js"></script>
         <script src="./resources/node_modules/angular-resizable/angular-resizable.min.js"></script>
         <script src="./resources/node_modules/@fortawesome/fontawesome-free/js/all.js"></script>
         <script src="./resources/node_modules/angular-ui-grid/ui-grid.js"></script>
         <script src="./resources/node_modules/angular-ui-grid/ui-grid.exporter.js"></script>

         <!-- Load all custom JavaScript Files -->
         <script src="./resources/config/app.js"></script>
         <script src="./resources/config/routes.js"></script>
         <script src="./resources/config/state.js"></script>
         <script src="./resources/config/nav.controller.js"></script>

         <!-- Load all JavaScript files for the various features -->
         <script src="./resources/modules/features.js"></script>
         <script src="./resources/features/reports/view_reports/main.controller.js"></script>
         <script src="./resources/features/reports/add_report/main.controller.js"></script>

 3. Add a ui-grid modules to the app.js
    a. Edit the webapp/src/main/resources/public/resources/config/app.js

    b. Add this to these modules to app1
         'ui.grid',
         'ui.grid.saveState',
         'ui.grid.autoResize',
         'ui.grid.selection',
         'ui.grid.pagination',
         'ui.grid.resizeColumns',
         'ui.grid.moveColumns',
         'ui.grid.exporter',
         'ui.grid.edit',
         'ui.grid.cellNav'

    When done, the top of your app.js should look like this:

         (function(){

             angular.module('app1', [
                 'app.routes',
                 'app.features',
                 'ngMessages',
                 'ngAnimate',
                 'ngMaterial',
                 'ngSanitize',         // Used for rendering html content in $mdDialog popups
                 'angularResizable',
                 'ui.router',
                 'ui.grid',
                 'ui.grid.saveState',
                 'ui.grid.autoResize',
                 'ui.grid.selection',
                 'ui.grid.pagination',
                 'ui.grid.resizeColumns',
                 'ui.grid.moveColumns',
                 'ui.grid.exporter',
                 'ui.grid.edit',
                 'ui.grid.cellNav'
             ])



 4. Add a grid to the "View Reports" page
    a. Edit the webapp/src/main/resources/public/resources/features/reports/view_reports/index.html

        <!-- UI GRID -->
        <div ui-grid="viewReportsVM.gridOptions" class="grid"></div>

    When done, your index.html (for view_reports) should look like this:

        <div class="feature">

            <header layout="row" layout-align="space-between center">
                <!-- Page Title -->
                <div class="md-headline"><i class="fas fa-file-alt"></i> View Reports</div>
            </header>

            <!-- Progress Bar -->
            <div class="progressBarWrapper">
                <md-progress-linear ng-show="viewReportsVM.dataIsLoading" md-mode="indeterminate"></md-progress-linear>
            </div>

            <!-- Blank space between the page title and the grid -->
            <div style="height: 15px"></div>

            <!-- UI GRID -->
            <div ui-grid="viewReportsVM.gridOptions" class="grid"></div>

        </div>


 5. Configure the grid in the "View Reports" main.controller.js
    a. Edit the webapp/src/main/resources/public/resources/features/reports/view_reports/main.controller.js

    b. Change the onInit() method to this:

       viewReportsVM.$onInit = function() {
                console.log('viewReports onInit() started.');

                let gridOptions = { };

                // Initialize the grid with the data
                gridOptions.data = [
                    { id: 1, display_name: "rpt1.txt", priority: "low", "active": true},
                    { id: 2, display_name: "rpt2.txt", priority: "high", "active": true},
                    { id: 3, display_name: "rpt3.txt", priority: "high", "active": true}
                ];

                gridOptions.appScopeProvider = $scope;
                gridOptions.flatEntityAccess = true;
                gridOptions.enableFiltering = true;
                gridOptions.enableColumnResizing = true;
                gridOptions.enableGridMenu = true;
                gridOptions.saveFocus = false;
                gridOptions.saveGrouping = false;
                gridOptions.savePinning = false;
                gridOptions.saveSelection = false;
                gridOptions.saveTreeView = false;
                gridOptions.multiSelect = true;
                gridOptions.exporterMenuPdf = false;
                gridOptions.exporterMenuExcel = false;
                gridOptions.exporterFieldApplyFilters = true;
                gridOptions.rowHeight = 45;
                gridOptions.enableSelectAll = true;
                gridOptions.enableSelectionBatchEvent = false;
                gridOptions.scope = $scope;

                // Define the grid columns
                gridOptions.columnDefs = [
                    {
                        name: 'id',
                        field: 'id',
                        displayName: 'Id',
                        visible: true,
                        type: 'number'
                    },
                    {
                        name: 'display_name',
                        field: 'display_name',
                        displayName: 'Report Name',
                        visible: true,
                        type: 'string'
                    },
                    {
                        name: 'priority',
                        field: 'priority',
                        displayName: 'Priority',
                        visible: true,
                        type: 'string'
                    },
                    {
                        name: 'active',
                        field: 'active',
                        displayName: 'Active',
                        visible: true,
                        type: 'boolean'
                    },
                ]


                gridOptions.onRegisterApi = function(gridApi) {
                    $scope.gridApi = gridApi;
                };


                viewReportsVM.gridOptions = gridOptions;

                console.log('viewReports onInit() finished.');
            };

    When done, your "View Reports" main.controller.js should look like this:


        (function(){
            angular.module('app.features')
                .controller('viewReports', ['$timeout', '$stateParams', '$scope', '$window', Callback])

            function Callback($timeout, $stateParams, $scope, $window) {
                console.log('viewReports controller started.');

                let viewReportsVM = this;


                window.document.title = "View Reports | APP1";

                viewReportsVM.$onInit = function() {
                    console.log('viewReports onInit() started.');

                    let gridOptions = { };

                    // Initialize the grid with the data
                    gridOptions.data = [
                        { id: 1, display_name: "rpt1.txt", priority: "low", "active": true},
                        { id: 2, display_name: "rpt2.txt", priority: "high", "active": true},
                        { id: 3, display_name: "rpt3.txt", priority: "high", "active": true}
                    ];

                    gridOptions.appScopeProvider = $scope;
                    gridOptions.flatEntityAccess = true;
                    gridOptions.enableFiltering = true;
                    gridOptions.enableColumnResizing = true;
                    gridOptions.enableGridMenu = true;
                    gridOptions.saveFocus = false;
                    gridOptions.saveGrouping = false;
                    gridOptions.savePinning = false;
                    gridOptions.saveSelection = false;
                    gridOptions.saveTreeView = false;
                    gridOptions.multiSelect = true;
                    gridOptions.exporterMenuPdf = false;
                    gridOptions.exporterMenuExcel = false;
                    gridOptions.exporterFieldApplyFilters = true;
                    gridOptions.rowHeight = 45;
                    gridOptions.enableSelectAll = true;
                    gridOptions.enableSelectionBatchEvent = false;
                    gridOptions.scope = $scope;

                    gridOptions.onRegisterApi = function(gridApi) {
                        $scope.gridApi = gridApi;
                    };

                    // Define the grid columns
                    gridOptions.columnDefs = [
                        {
                            name: 'id',
                            field: 'id',
                            displayName: 'Id',
                            visible: true,
                            type: 'number'
                        },
                        {
                            name: 'display_name',
                            field: 'display_name',
                            displayName: 'Report Name',
                            visible: true,
                            type: 'string'
                        },
                        {
                            name: 'priority',
                            field: 'priority',
                            displayName: 'Priority',
                            visible: true,
                            type: 'string'
                        },
                        {
                            name: 'active',
                            field: 'active',
                            displayName: 'Active',
                            visible: true,
                            type: 'boolean'
                        },
                    ]


                    viewReportsVM.gridOptions = gridOptions;

                    console.log('viewReports onInit() finished.');
                };


                console.log('viewReports controller finished.');
            }
        })();



 6. Verify it works
    a. Activate your webapp with the debugger
    b. Open a browser
    c. Connect to http://localhost:8080/app1
    d. Go to "View Reports"
       -- You should see a grid


 7. Add column moving & resizing to the grid
   a. Edit the webapp/src/main/resources/public/resources/features/reports/view_reports/index.html

   b. Change the UI Grid from this:
           <!-- UI GRID -->
           <div ui-grid="viewReportsVM.gridOptions" class="grid"></div>

      To this:
           <!-- UI GRID -->
           <div ui-grid="viewReportsVM.gridOptions" class="grid"
                ui-grid-resize-columns ui-grid-move-columns ui-grid-exporter></div>


 8. Verify the column moving, column resizing, and client-size exporting works
    a. Activate your webapp with the debugger
    b. Open a browser
    c. Connect to http://localhost:8080/app1
    d. Go to "View Reports"
    e. Attempt to resize a grid column
    f. Attempt to drag & drop a grid column left or right
    g. Select to export data


 9. Add grid row selection
    a. Edit the webapp/src/main/resources/public/resources/features/reports/view_reports/index.html

    b. Change the UI Grid from this:
            <!-- UI GRID -->
            <div ui-grid="viewReportsVM.gridOptions" class="grid"></div>

       To this:
            <!-- UI GRID -->
            <div ui-grid="viewReportsVM.gridOptions" class="grid"
                 ui-grid-resize-columns ui-grid-move-columns ui-grid-exporter
                 ui-grid-selection></div>


10. Verify that grid selection works
    a. Activate your webapp with the debugger
    b. Open a browser
    c. Connect to http://localhost:8080/app1
    d. Go to "View Reports"
       -- You should now see check boxes on the left


11. Add grid pagination to the index.html
    a. Edit the webapp/src/main/resources/public/resources/features/reports/view_reports/index.html

    b. Change the UI Grid from this:
            <!-- UI GRID -->
            <div ui-grid="viewReportsVM.gridOptions" class="grid"></div>

       To this:
            <!-- UI GRID -->
            <div ui-grid="viewReportsVM.gridOptions" class="grid"
                 ui-grid-resize-columns ui-grid-move-columns ui-grid-exporter
                 ui-grid-selection      ui-grid-pagination></div>

    c. Edit the webapp/src/main/resources/public/resources/features/reports/view_reports/main.controller.js
    d. Change the onInit() method by adding these lines:
            // Set the pagination properties (required in order for ui-grid pagination to work)
            gridOptions.totalItems = gridOptions.data.length;
            gridOptions.paginationPageSize = 50;
            gridOptions.paginationPageSizes = [25, 50, 100, 250];

    When done, the main.controller.js should look like this:

        (function(){
            angular.module('app.features')
                .controller('viewReports', ['$timeout', '$stateParams', '$scope', '$window', Callback])

            function Callback($timeout, $stateParams, $scope, $window) {
                console.log('viewReports controller started.');

                let viewReportsVM = this;


                window.document.title = "View Reports | APP1";

                viewReportsVM.$onInit = function() {
                    console.log('viewReports onInit() started.');

                    let gridOptions = { };

                    // Initialize the grid with the data
                    gridOptions.data = [
                        { id: 1, display_name: "rpt1.txt", priority: "low", "active": true},
                        { id: 2, display_name: "rpt2.txt", priority: "high", "active": true},
                        { id: 3, display_name: "rpt3.txt", priority: "high", "active": true}
                    ];

                    gridOptions.appScopeProvider = $scope;
                    gridOptions.flatEntityAccess = true;
                    gridOptions.enableFiltering = true;
                    gridOptions.enableColumnResizing = true;
                    gridOptions.enableGridMenu = true;
                    gridOptions.saveFocus = false;
                    gridOptions.saveGrouping = false;
                    gridOptions.savePinning = false;
                    gridOptions.saveSelection = false;
                    gridOptions.saveTreeView = false;
                    gridOptions.multiSelect = true;
                    gridOptions.exporterMenuPdf = false;
                    gridOptions.exporterMenuExcel = false;
                    gridOptions.exporterFieldApplyFilters = true;
                    gridOptions.rowHeight = 45;
                    gridOptions.enableSelectAll = true;
                    gridOptions.enableSelectionBatchEvent = false;
                    gridOptions.scope = $scope;

                    // Define the grid columns
                    gridOptions.columnDefs = [
                        {
                            name: 'id',
                            field: 'id',
                            displayName: 'Id',
                            visible: true,
                            type: 'number'
                        },
                        {
                            name: 'display_name',
                            field: 'display_name',
                            displayName: 'Report Name',
                            visible: true,
                            type: 'string'
                        },
                        {
                            name: 'priority',
                            field: 'priority',
                            displayName: 'Priority',
                            visible: true,
                            type: 'string'
                        },
                        {
                            name: 'active',
                            field: 'active',
                            displayName: 'Active',
                            visible: true,
                            type: 'boolean'
                        },
                    ]

                    gridOptions.onRegisterApi = function(gridApi) {
                        $scope.gridApi = gridApi;
                    };

                    // Set the pagination properties (required in order for ui-grid pagination to work)
                    gridOptions.totalItems = gridOptions.data.length;
                    gridOptions.paginationPageSize = 50;
                    gridOptions.paginationPageSizes = [25, 50, 100, 250];

                    viewReportsVM.gridOptions = gridOptions;

                    console.log('viewReports onInit() finished.');
                };


                console.log('viewReports controller finished.');
            }
        })();




12. Verify that grid pagination is visible
    a. Activate your webapp with the debugger
    b. Open a browser
    c. Connect to http://localhost:8080/app1
    d. Go to "View Reports"
       -- You should see the pagination mechanism on the bottom


13. Format your grid (by updating the index.css)
    a. Go to the webapp/src/main/resources/public/resources/css/index.css
    b. Add this to the bottom of the file:


     /* UI GRID Formatting
        The navigation bar has a background RGB of  #364150
        So, the grid uses the inverse of            #c9beaf
     */

     .ui-grid-row .ui-grid-cell.ui-grid-row-header-cell {
         background-color: transparent;
         border-bottom: solid 0 #d4d4d4;
     }

     .ui-grid-cell {
         border-right: 0;
         color: #666;
     }

     .ui-grid-cell md-select {
         margin: 0;
     }

     .ui-grid-pinned-container.ui-grid-pinned-container-left .ui-grid-cell:last-child {
         border-width: 0;
     }

     .ui-grid-selection-row-header-buttons {
         color: blue;
         opacity: .9;
     }

     .ui-grid-selection-row-header-buttons::before {
         opacity: .25;
     }

     .ui-grid-pinned-container.ui-grid-pinned-container-left .ui-grid-header-cell:last-child, .ui-grid-header-cell:last-child .ui-grid-column-resizer.right {
         border-right: 0;
     }

     .ui-grid-row .ui-grid-cell.ui-grid-row-header-cell, .ui-grid-row:nth-child(even) .ui-grid-cell, .ui-grid-row:nth-child(odd) .ui-grid-cell {
         background-color: transparent !important;
     }

     .ui-grid-column-menu-button {
         color: #999;
     }

     .ui-grid-row {
         border-bottom: 1px solid #eee;
         border-top: 1px solid #fff;
     }

     .ui-grid-row:hover {
         /* Color to set the grid when hovering over it */
         background: #eeeeee;
     }

     .ui-grid-row-selected {
         /* Color to set the grid when a row is selected */
         background: #c9beaf;
     }

     .ui-grid-row:hover div.ui-grid-cell-contents {
         color: #034abc;
     }

     .ui-grid-row.ui-grid-row-selected > [ui-grid-row] > .ui-grid-cell {
         background-color: #fffeef;
         font-weight: bold;
     }

     .ui-grid-menu-button {
         background: transparent;
         border: 0;
     }

     .ui-grid-menu .ui-grid-menu-inner ul li:not(:last-child) > button, .ui-grid {
         border: 0;
     }

     .ui-grid-menu .ui-grid-menu-inner ul li button:hover, .ui-grid-menu .ui-grid-menu-inner ul li button:focus {
         box-shadow: none;
         background-color: #eee;
     }

     .ui-grid-top-panel {
         background: #c9beaf;
     }

     .ui-grid-header {
         border-top: 1px solid #eee;
     }

     .ui-grid-menu-button {
         background: #999;
         height: 30px;
         width: 30px;
         color: #fff;
         border-radius: 50%;
         box-shadow: 2px 2px 5px #ccc;
     }

     .ui-grid-menu-button .ui-grid-icon-container {
         padding: 2px 3px;
     }

     .ui-grid-menu-button .ui-grid-icon-container .svg-inline--fa {
         margin-left: 4px;
     }

     .ui-grid-menu-button:hover {
         background: #666;
     }

     .ui-grid-menu .ui-grid-menu-inner {
         box-shadow: none;
         background: #fff;
     }

     .ui-grid-menu .ui-grid-menu-inner ul li:hover {
         background: #ddd;
     }

     .ui-grid-menu-item {
         background: #fff;
     }

     .ui-grid-header-cell {
         border-color: #eee;
     }

     .ui-grid-header-cell-label {
         font-size: 0.9em;
         color: #777;
     }

     .ui-grid-cell-contents {
         padding-top: 12px;
     }

     .ui-grid-pager-count, .ui-grid-pager-container {
         color: #666;
     }



14. Verify the formatting works
    a. Activate your webapp with the debugger
    b. Open a browser
    c. Connect to http://localhost:8080/app1
    d. Go to "View Reports"
       -- You should see different colors in the grid

