Best Practices
--------------
Here are my recommended best practices in no particular order



General Best Practices
----------------------
 1. Use a Java debugger -- e.g., IntelliJ, Eclipse
    + It is your most valuable resources as a Java programmre

 2. Use a Logger instead of print statements -- e.g., LogBack or log4j
    Every professional project I had used loggers (not print statements).
    + It's easy to turn-on/turn-off logging across a large project
    + You can change the logger settings without having to recompile code

 3. Know the difference between primitives and Java Objects
    + Java objects can be null (primitives cannot)

 4. If your class *requires* something to operate correctly, then use a constructor to enforce it

 5. Maven makes it really easy to bring-in code into your project
    - Don't forget to get ride of unused dependencies

 6. Know how to java handles call-by-value and call-by-reference
    Better yet:  Don't change objects that are passed-in and simply return new ones

 7. If your method needs to return 3 things, then create an object and return that object

 8. Use a check-in/checkout-out repository like Git




Database Best Practices
-----------------------
  1. Use a connection pool   [best optimization you'll make]
     -- Hikari is the fastest, but anything is better than nothing

  2. Have your service classes run raw SQL
     + Faster than hibernate
     - Requires knowledge of SQL
     - Requires you to actually design tables [which is a good thing]



Spring Best Practices
---------------------
 1. Use constructor injection for mandatory dependencies
