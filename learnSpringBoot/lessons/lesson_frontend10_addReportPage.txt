Lesson:  Setup the "Add Report" Page
------------------------------------
In this lesson, you will setup a basic "Add Report" page with buttons and dropdowns



Procedure
---------
 1. Create a simple "Add Report" page with text boxes and dropdowns
    a. Go to webapp/src/main/resources/public/resources/features/add_report/index.html

    b. Replace the index.html with this

         <div class="feature">

             <header layout="row" layout-align="space-between center">
                 <!-- Page Title -->
                 <div class="md-headline"><i class="fas fa-file-alt"></i> Add Reports</div>
             </header>


             <pre>
                 <!-- Front-end Debugging:  Show the addReportVM.new map to see what has been selected -->
                 addReportVM.new={{ addReportVM.new | json}}
             </pre>

             <!-- Progress bar -->
             <div class="progressBarWrapper">
                 <md-progress-linear ng-show="addReportVM.dataIsLoading" md-mode="indeterminate"></md-progress-linear>
             </div>

             <div layout="row" style="margin-top: 20px">
                 <md-input-container class="md-block" flex-gt-sm>
                     <label>Display Name</label>
                     <input placeholder="Enter Display Name" data-ng-model="addReportVM.new.display_name">
                 </md-input-container>
             </div>

             <div layout="row">
                 <md-input-container class="md-block" flex-gt-sm>
                     <label>Priority</label>
                     <md-select placeholder="Select Priority" name="priority" ng-model="addReportVM.new.priority">
                         <md-option>priority 1</md-option>
                         <md-option>priority 2</md-option>
                         <md-option>priority 3</md-option>
                     </md-select>
                 </md-input-container>
             </div>

             <div layout="row">
                 <md-input-container class="md-block" flex-gt-sm>
                     <label>Priority</label>
                     <md-select placeholder="Select Report Type" name="report_type" ng-model="addReportVM.new.report_type">
                         <md-option>report type 1</md-option>
                         <md-option>report type 2</md-option>
                         <md-option>report type 3</md-option>
                     </md-select>
                 </md-input-container>
             </div>

         </div>



 2. Setup main.controller.js for the "Add Report" page
    a. Go to webapp/src/main/resources/public/resources/features/add_report/main.controller.js

    b. Replace the main.controller.js with this

        (function(){
            angular.module('app.features')
                .controller('addReport', ['$timeout', '$stateParams', Callback])

            function Callback($timeout, $stateParams) {

                let addReportVM = this;

                window.document.title = "Add Report | APP1";


                // Clear-out the report fields on page load
                clearReport();

                addReportVM.$onInit = function() {
                    console.log('addReport onInit() started.');
                    console.log('addReport onInit() finished.');
                };

                console.log('addReport controller finished.');


                function clearReport() {
                    console.log('clearReport() started.');
                    addReportVM.new = { };
                }

            }
        })();


 3. Verify the page shows-up
    a. Activate your webapp with the debugger
    b. Open a browser
    c. Connect to http://localhost:8080/app1
    d. Go to "Add Report"
       *or*
       Go to http://localhost:8080/app1/page/reports/add
        -- You should see a basic form


 4. Add a "Clear" and "Add Report" buttons
    a. Add this diev to the bottom of the index.html

        <div layout="row" layout-align="center">

            <!-- Clear Button -->
            <md-button class="md-primary md-raised" data-ng-click="addReportVM.clearReport()" aria-label="Clear Report Fields">
                <md-icon class="fas fa-backspace"></md-icon>
                <md-tooltip="Clear Report"></md-tooltip>
                Clear
            </md-button>


            <!-- Add Report Button -->
            <md-button class="md-primary md-raised" data-ng-click="addReportVM.addReport()" aria-label="Add Report">
                <md-icon class="fas fa-plus"></md-icon>
                <md-tooltip="Add a Report"></md-tooltip>
                Add Report
            </md-button>
        </div>

 5. Verify that the "Clear" and "Add Report" buttons appear on the page
    a. Go to http://localhost:8080/app1/page/reports/add
        -- You should see two buttons on the bottom
        -- NOTE:  Pressing them does not hing


 6. Add javascript methods that are called when a user clicks on the bottoms
    a. Go to the "Add Report" main.controller.js

    b. Add these functions:
            function addReport() {
                console.log('addReport() started.');
            }

            function clearReport() {
                console.log('clearReport() started.');
                addReportVM.new = { };
            }

    c. Make these functions public by adding this to the top:
            addReportVM.addReport = addReport;
            addReportVM.clearReport = clearReport;


    When done, your main.controller.js should look like this:

         (function(){
             angular.module('app.features')
                 .controller('addReport', ['$timeout', '$stateParams', '$scope', Callback])

             function Callback($timeout, $stateParams, $scope) {
                 console.log('addReport controller started.');

                 let addReportVM = this;

                 window.document.title = "Add Report | APP1";

                 addReportVM.addReport = addReport;
                 addReportVM.clearReport = clearReport;


                 // Clear-out the report fields on page load
                 clearReport();

                 addReportVM.$onInit = function() {
                     console.log('addReport onInit() started.');
                     console.log('addReport onInit() finished.');
                 };

                 console.log('addReport controller finished.');


                 function addReport() {
                     console.log('addReport() started.');
                 }

                 function clearReport() {
                     console.log('clearReport() started.');
                     addReportVM.new = { };
                 }

             }
         })();



 7. Verify that the buttons work
    a. Go to http://localhost:8080/app1/page/reports/add
    b. Press F12 (to open your Developer Tools)
    c. Go to the "Console" in your Developer Tools
    d. Press the buttons
        -- You should see the log messages


 8. Change routes.js so that the lookup data is injected in
    a. Go to webapp/src/main/resources/public/resources/config/routes.js

    b. Replace the getAddReportState() method so that the resolve section
       injects the lookupMap

               function getAddReportState() {
                   return {
                       url: URL_PAGE_PREFIX + '/reports/add',
                       templateUrl: './resources/features/reports/add_report/index.html',
                       controller: 'addReport',
                       controllerAs: 'addReportVM',
                       resolve: {
                           lookupMap: function(LookupFactory) {
                               return LookupFactory.getMapOfLookupsWithTypes( ['priority', 'report_type', 'source'])
                           }
                       }
                   }
               }

 9. Change the main.controller.js so that it gets the lookupMap
    a. Go t owebapp/src/main/resources/public/resources/reports/add_report/main.controller.js

    b. Inject the lookupMap into the top by changing the top lines:
            (function(){
                angular.module('app.features')
                    .controller('addReport', ['$timeout', '$stateParams', '$scope', 'lookupMap', Callback])

                function Callback($timeout, $stateParams, $scope, lookupMap) {
                    console.log('addReport controller started.');

                    let addReportVM = this;

    c. Set the addReportVM.lookupData to hold the map of lookup info
         addReportVM.lookupData = lookupMap;

    When done, your main.controller.js should look like this:

         (function(){
             angular.module('app.features')
                 .controller('addReport', ['$timeout', '$stateParams', '$scope', 'lookupMap', Callback])

             function Callback($timeout, $stateParams, $scope, lookupMap) {
                 console.log('addReport controller started.');

                 let addReportVM = this;

                 window.document.title = "Add Report | APP1";

                 addReportVM.addReport = addReport;
                 addReportVM.clearReport = clearReport;


                 // Set the lookupData to hold the injected lookupMap
                 addReportVM.lookupData = lookupMap;

                 // Clear-out the report fields on page load
                 clearReport();

                 addReportVM.$onInit = function() {
                     console.log('addReport onInit() started.');
                     console.log('addReport onInit() finished.');
                 };

                 console.log('addReport controller finished.');


                 function addReport() {
                     console.log('addReport() started.');
                 }

                 function clearReport() {
                     console.log('clearReport() started.');
                     addReportVM.new = { };
                 }

             }
         })();


10. Verify that the "Add Report" controller is getting the lookupMap
    a. Go to http://localhost:8080/app1/page/reports/add
    b. Press F12 (to open your Developer Tools)
    c. Go to the "Console" in your Developer Tools
       -- You should see "addReport controller started.  lookupMap=....


11. Change the "Priority" dropdown on the front-end to gets it values from addReportVM.lookupData.priority
    a. Go to the index.html
    b. Remove these bogus dropdown options:
            <md-option>priority 1</md-option>
            <md-option>priority 2</md-option>
            <md-option>priority 3</md-option>

    c. Insert this instead
            <md-option ng-value="lookup" ng-repeat="lookup in addReportVM.lookupData.priority track by lookup.id">{{lookup.name}}</md-option>

12. Verify that the "Priority" dropdown is getting values from the database
    a. Go to http://localhost:8080/app1/page/reports/add
    b. Look at the priority dropdown
       -- It should now show the values found in your database




13. Change the "Report Type" dropdown on the front-end to gets it values from addReportVM.lookupData.report_type
    a. Go to the index.html
    b. Remove these bogus dropdown options:
            <md-option>report type 1</md-option>
            <md-option>report type 2</md-option>
            <md-option>report type 3</md-option>

    c. Insert this instead
            <md-option ng-value="lookup" ng-repeat="lookup in addReportVM.lookupData.report_type track by lookup.id">{{lookup.name}}</md-option>

14. Verify that the "Report Type" dropdown is getting values from the database
    a. Go to http://localhost:8080/app1/page/reports/add
    b. Look at the Report Type dropdown
       -- It should now show the values found in your database



15. Change the addReport() function so that it makes a REST call to add the data to the system


 1. Fill-in the "Add Report" page so that it has a name, priority, ...

 2. Add a "Save" button it

 3. Pressing the "Add Report" button causes a popup to appear with a prompt:
      Are you sure you want to add this report?
      Yes, No

      Press "Yes"
        1) calls the ReportsFactory.add() method
        2) Upon success of the REST call, clears-out the fields

      Pressing "No" causes the forms to be cleared out

 4. Verify it works


