How to Externalize Properties for development
---------------------------------------------
Problem:  You want your developers to use the local /src/main/config/app.properties
          You want your production JAR to look for app.properites in the current directory
          (when you run java -jar myFile.jar, java ignores the -classpath option)
          
          
Solution: Tell your spring-boot app to look in *BOTH* directories and ignore not-found errors


Assumptions
 A) You have this file:  /src/main/config/app.properties   but it is only used in development
 B) You have a Spring-Boot app setup



Working Approach 1:  Use PropertiesFactoryBean to look in classpath and file path
---------------------------------------------------------------------------------

 1. Create your Application class to read your application-context.xml file
    
    @SpringBootApplication
    @ImportResource("classpath:application-context.xml")
    public class Application
    {
        private static final Logger logger = LoggerFactory.getLogger(Application.class);

        public static void main(String[] args)
        {
            logger.debug("Application starts.");
            SpringApplication.run(Application.class, args);
        }
    }
    

 2. Create this file:  application-context.xml
    NOTE:  This file is placed in /src/main/resources/
    
      <?xml version="1.0" encoding="UTF-8" standalone="no"?>
      <beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/context
                                 http://www.springframework.org/schema/context/spring-context.xsd">



           <bean id="myProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
               <property name="ignoreResourceNotFound" value="true"/>
               <property name="locations">
                   <list>
                      <value>classpath:app.properties</value>
                      <value>file:app.properties</value>
                   </list>
                </property>
            </bean>
      </beans>



Working Approach 2:  Use ApplicationProps class
-----------------------------------------------
 1. Create your Application class
    
      @SpringBootApplication
      public class Application
      {
          private static final Logger logger = LoggerFactory.getLogger(Application.class);

          public static void main(String[] args)
          {
              logger.debug("Application starts.");
              SpringApplication.run(Application.class, args);
          }
      }


 2. Create your ApplicationProps class

      package hello;

      import org.springframework.boot.context.properties.ConfigurationProperties;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.context.annotation.PropertySource;
      import org.springframework.context.annotation.PropertySources;
      import org.springframework.stereotype.Component;

      /**
       * Created by adam on 5/26/17.
       */
      @Component
      @PropertySource(value = "classpath:app.properties", ignoreResourceNotFound = true)
      @PropertySource(value = "file:app.properties", ignoreResourceNotFound = true)
      @ConfigurationProperties
      public class ApplicationProps
      {
          private String mode;
          private String location;


          public String getMode() {
              return mode;
          }

          public void setMode(String mode) {
              this.mode = mode;
          }

          public String getLocation() {
              return location;
          }

          public void setLocation(String location) {
              this.location = location;
          }


          public String toString()
          {
              return("mode=" + this.mode + "  location=" + this.location);
          }
      }


 3. Inject your ApplicationProps class
