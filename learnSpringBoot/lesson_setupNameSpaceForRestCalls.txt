Lesson:  Setup a name space for REST calls
------------------------------------------
On a project, we started building REST calls.
Then, we had generic REST calls (rest calls generated from database views and tables).

After a while we needed to answer a few questions:
 1) Which calls are "page" calls (to load entire angular page apps)
 2) Which calls are Angular page views -- e.g., webapp!/module1/page 
    (we need to know so that can forward the user to the main app.html page
     in case the user bookmarks an angular page view)
 3) Which calls are REST calls? 
    (we need to know so we can filter REST calls based on the user's permissions)
 4) Which of the REST calls are custom?
 5) Which of the REST calls are generic REST calls?


Solution:  Setup a name space
-----------------------------
It's not complicated but it requires you to setup a structure for calls.

Here's what we did:
 A) The app has a spring controller that handles / and /page
    -- Which forwards the user to the main app.html page

 B) All angular page calls start with "/page" 
    -- These calls  also forward the user to the main app.html page as well
       If the user loads a new page, then 
           the app.html is loaded and angular takes the user to the appropriate page view
       If the user stays inside Angular, then Angular takes the user to the appropriate page view

 C) All REST calls start with /api
    -- This is needed so that our security filter can tell the difference
       between REST calls and page calls.  
    -- We do not apply security in the back-end to page calls
    -- We do apply security in the back-end to REST calls
       (so it's an easy test.  Check if the url starts with "/api"

 D) All generic REST calls start with /api/generic
    -- This makes them easier to identify in the front-end code
    -- This ensures that they do not conflict with custom REST calls
    -- These calls are generated by logic that examines certain tables and views
       to generate the DTO object, the Controller object, the DAO object, and the converter object

 E) All custom REST calls start with /api/<controller topic>
    For example, the EnvironmentController listens on /api/environment
     1) The EnvironmentController has an end point listening for /api/environment/properties
        that returns public properties to the front-end
     2) The EnvironmentController has an end point listening for /api/environment/manifest
        that returns contents of the META-INF/MANIFEST.MF

 F) Setup a PageController

 G) Have all of your Generic REST Controllers implement an interface (even an empty one)
 H) Have all of your custom REST Controllers implement a different interface
    -- Then, we can use reflection to identify all of the unique REST calls 

 
Advantages
----------
 1) It's easy in the front-end code to identify which calls are generic vs custom
 2) It's easy in the front-end code to identify where REST calls are located
 3) It prevents custom REST calls from conflicting with generic REST calls
 4) It lets us security REST calls 
 5) it lets us allow the angular page views through        

