How to Read Property Values Into Web Application Context
--------------------------------------------------------

ASSUMPTIONS:
 A) You do not want to use Spring to read-in property values
 B) You want to manually store your property values in the Application Context
 
 


Procedures
----------
 1. Create your "webapp4" Maven webapp project in Intellij
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project
       
    b. Press "Create New Project"
       1) In the "New Project" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java JDK:  C:\Program Files\Java\jdk1.7.0_60
                      -- Press OK
               
            c) Check "Create from archetype"
            d) Select maven-archetype-webapp
               Press Next
               
               
       2) In the next screen
          GroupId:     com.resnick
          ArtifactId:  webapp4      
          Version:     1.0-SNAPSHOT
          Press Next
          
          
       3) In the next screen,
          Maven home directory:  C:/tools/apache-maven-3.2.3
          User settings file:    Check the checkbox to "Override"
                                 C:\tools\apache-maven-3.2.3\conf\settings.xml
          Press Next                       
                                 
       
       4) Project Name:      webapp4
          Project Location:  C:\tools\intellij\workspace\webapp4
          Press Finish
          
       5) If you get prompted that "C:\tools\intellij\workspace\webapp4" does not exist
          It will be created by Intellij
          Press OK 
     
       6) If you get prompted 
          New projects can either be opened in a new window or replace the project
          Press "This Window"
          
       7) If you are prompted 
          Maven projects need to be imported
          Press "Enable Auto-Import"
          
          Now, maven has created a simple "Hello World" web app
       
       
       
 2. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
          a) Single-click on Inspections
          b) next to Typo -- Uncheck the checkbox
          c) Press Apply
          
          

 3. Setup the Maven test directories for your Intellij project

    Add these directories
       src/test/               
       src/test/java                          # Holds unit test java code
       src/test/resources/                    # Holds the logback.xml used by unit test code
       src/main/webapp/resources/             # Holds any images, javascript, or css
       src/main/java
    
    
    a. Right-click on src             -> New -> Directory:    test
    b. Right-click on src/test        -> New -> Directory:    java
    c. Right-click on src/test        -> New -> Directory:    resources
    d. Right-click on src/main/webapp -> New -> Directory:    resources
    e. Right-click on src/main        -> New -> Directory:    java
  
    f. Right-click on src/main/java -> Mark Directory As -> Sources Root
    g. Right-click on src/test/java -> Mark Directory As -> Test Sources Root
    
      
    Now, you should have this directory structure
      src/main/java/ 
      src/main/resources/               # Holds logback.xml used by java code     
      src/main/webapp/                  
      src/main/webapp/resources/        # Holds any images, javascript, or css
      src/main/webapp/META-INF/
      src/main/webapp/WEB-INF/  
      src/test/
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code
   

   

           
 4. Add dependencies for the Servlet class, logging, and JSTL       
               
    <dependency>
      <!-- Send Logging from SLF4j to Logback -->
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.0.13</version>
    </dependency>

    <dependency>
      <!-- Add the dependency for Java Server Template Library (JSTL)  -->
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>

    <dependency>
      <!-- Tomcat provides the servlet classes -->
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.0.1</version>
      <scope>provided</scope>
    </dependency>


    When done, your pom.xml should look like this:
    
       <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.resnick</groupId>
          <artifactId>webapp4</artifactId>
          <packaging>war</packaging>
          <version>1.0-SNAPSHOT</version>
          <name>webapp4 Maven Webapp</name>
          <url>http://maven.apache.org</url>
          <dependencies>
          
            <dependency>
              <groupId>junit</groupId>
              <artifactId>junit</artifactId>
              <version>3.8.1</version>
              <scope>test</scope>
            </dependency>
        
            <dependency>
              <!-- Send Logging from SLF4j to Logback -->
              <groupId>ch.qos.logback</groupId>
              <artifactId>logback-classic</artifactId>
              <version>1.0.13</version>
            </dependency>
        
            <dependency>
              <!-- Add the dependency for Java Server Template Library (JSTL)  -->
              <groupId>javax.servlet</groupId>
              <artifactId>jstl</artifactId>
              <version>1.2</version>
            </dependency>
        
            <dependency>
              <!-- Tomcat provides the servlet classes -->
              <groupId>javax.servlet</groupId>
              <artifactId>javax.servlet-api</artifactId>
              <version>3.0.1</version>
              <scope>provided</scope>
            </dependency>
        
          </dependencies>
          <build>
            <finalName>webapp4</finalName>
          </build>
       </project>
            
    


 5. Create this file:  app.properties

    Right-click on /src/main/resources/ -> Right-click -> New -> File
    Filename: app.properties
   
    Copy this into your app.properties file
   
   
        ##################################################################################
        # app.properties
        #
        # NOTES:
        #  1) Any line that starts with a '#' is ignored
        #  2) Any property values in square brackets will be treated as a list of strings
        ##################################################################################
        application.mode=development
        app2.url=http://google.com/
        states = [Maryland, Virginia, Delaware, Washington DC]



 6. Create this file:  logback.xml
    Right-click on /src/main/resources -> New -> File
    Filename:  logback.xml
    
    Copy this to your logback.xml file
    
        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>
        
        <configuration debug="true">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                </encoder>
            </appender>
        
            <logger name="app1" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
        
            <root level="DEBUG">
                <appender-ref ref="CONSOLE"/>
            </root>
        </configuration>



 7. Tell Tomcat where your listener class will be 
     Add this to your web.xml

    <listener>
         <listener-class>app1.utility.MyApplicationWatcher</listener-class>
    </listener>

   
   
    Your web.xml should look like this now:
           
        <?xml version="1.0" encoding="UTF-8"?>
        <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns="http://java.sun.com/xml/ns/javaee"
                 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
                 id="WebApp_ID" version="3.0">
        
        
          <display-name>webapp4</display-name>
        
          <welcome-file-list>
            <welcome-file>index.jsp</welcome-file>
          </welcome-file-list>
        
          <listener>
            <listener-class>app1.utility.MyApplicationWatcher</listener-class>
          </listener>
        
        </web-app>

           
   
    
 8. Create a new class:  MyApplicationWatcher.java
    a. Right-click on /src/main/java -> New Package  
       Name:  app1.utility
      
    b. Right-click on app1.utility -> New -> Java Class
       Name:  MyApplicationWatcher
      
    c. Copy this to your MyApplicationWatcher class
   
     
        package app1.utility;
        
        import java.io.InputStream;
        import java.util.*;
        import javax.servlet.ServletContext;
        import javax.servlet.ServletContextEvent;
        import javax.servlet.ServletContextListener;
        
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        
        public class MyApplicationWatcher implements ServletContextListener
        {
            private static final Logger logger = LoggerFactory.getLogger( MyApplicationWatcher.class );
        
        
            /***********************************************************************************
             * contextInitialized()
             *  1) Read the property file for this webapp and store them in the Application Context
             *
             * NOTE:  If a runtime exception is thrown, then the webapp will *not* startup
             ************************************************************************************/
            public void contextInitialized( ServletContextEvent aContextEvent )
            {
                // Get the name of the web application
                final String sWebAppName = aContextEvent.getServletContext().getContextPath().substring(1);
        
                logger.debug("{} contextInitialized() started", sWebAppName);
        
        
                try
                {
                    // Read the property values into the application context
                    loadConfigPropertiesIntoAppContext( "app.properties", aContextEvent.getServletContext() );
        
                }
                catch (Exception e)
                {
                    logger.error("{} WILL NOT STARTUP", sWebAppName);
        
                    // Throw a runtime exception so that this webapp will *not* startup
                    RuntimeException runtimeException = new RuntimeException(e);
                    runtimeException.setStackTrace(e.getStackTrace());
                    throw runtimeException;
                }
        
                logger.debug("{} contextInitialized() finished", sWebAppName);
            }
        
        
        
            /***********************************************************************************
             * contextDestroyed()
             *
             * This web app is shutting down
             ************************************************************************************/
            public void contextDestroyed(ServletContextEvent aContextEvent)
            {
                logger.debug("{} contextDestroyed() finished.");
            }
        
        
        
            /***********************************************************************************
             * loadConfigPropertiesIntoAppContext()
             *
             * Read-in the property values and store them in the Application Scope
             * -- JSPs can pull values out using ${applicationScope['application.mode']}
             ************************************************************************************/
            private void loadConfigPropertiesIntoAppContext(String aFilename, ServletContext aServletContext) throws Exception
            {
                logger.debug("loadConfigPropertiesIntoAppContext() started....reading from file {}", aFilename);
        
                // Extract the key/values from the file and put them into a props object
                Properties props = new Properties();
                InputStream iostream = Thread.currentThread().getContextClassLoader().getResourceAsStream( aFilename );
                props.load(iostream);
        
        
                // Get a list of all property names found in the app file
                Set<String> allPropertyNamesInAppFile = props.stringPropertyNames();
        
                // Loop throu all of the properties, storing them in the Application Context
                for (String sPropertyName: allPropertyNamesInAppFile)
                {
                    // Store this property in the application context
                    String sPropertyValue = props.getProperty(sPropertyName);
        
                    if ((sPropertyValue.startsWith("[")) && (sPropertyValue.endsWith("]")))
                    {
                        // This property is a list -- so store it as a list
        
                        // get the propertyValue string without the brakcets
                        String sCsvValues = sPropertyValue.substring(1, sPropertyValue.length() - 1);
        
                        // Convert the CSV string into an Array List
                        String[] fixedArrayOfValues = sCsvValues.split(",");
                        ArrayList<String> listOfValues = new ArrayList<String>(Arrays.asList(fixedArrayOfValues) );
        
                        // Store a list of values with this property name
                        aServletContext.setAttribute(sPropertyName, listOfValues);
                    }
                    else
                    {
                        // This property is a string -- so store it as a string
                        aServletContext.setAttribute( sPropertyName, props.getProperty(sPropertyName));
                    }
                }
        
                logger.debug("loadConfigPropertiesIntoAppContext() finished.");
            }
        }
        



        
  9. Create this file:  index.jsp
     a. Right-click on /src/main/webapp -> New -> File
        Name:  index.jsp
     
     b. Copy this to your index.jsp
         
            <%@ page session="false" language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" %>
            <%@ taglib prefix='c'   uri='http://java.sun.com/jsp/jstl/core' %>
            
            <html>
            <body>
            <h2>Hello World!</h2>
            
            application.mode=    ${applicationScope['application.mode']} <br/>
            application.author=  ${applicationScope['application.author']} <br/><br/>
            
            List of states <br/>
            <c:forEach items="${applicationScope['states']}" var="state">
               ${state} <br/>
            </c:forEach>
            
            <br/><br/>
            
            
            <select name="selectedState">
               <option value="">-State-</option>
            
               <c:forEach items="${applicationScope['states']}" var="state">
                  <option value="${state}"> ${state} </option>
               </c:forEach>
            </select>
            
            
            </body>
            </html>




How to get property values stored in the Application Scope?
-----------------------------------------------------------
A) In your jsp page, you can pull them out using this format
       ${applicationScope['<my property name>']}
       
   So, if you want to display the value for the property called 'application.mode',
   you would add this to your JSP page
       <div style="border: 1px solid black">
          application.mode =  ${applicationScope['application.mode']}   
        </div>
       
        
