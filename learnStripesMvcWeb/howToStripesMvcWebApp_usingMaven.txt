How to Setup a Stripes MVC Web App using Maven
----------------------------------------------

Assumptions:  
 A) You have Eclpise installed
 B) You have Maven installed
 C) Your Maven configuration can download files from a maven repository
 
 
Procedures
----------
1. Add Eclipse to your toolbar
    a) Press <Start><Run>c:
	   -- Browse to c:/tools/eclipse
	   -- Drag and drop the eclipse.exe to your toolbar
	  
2. Tell Eclipse to use your Maven settings
    a) Pull Windows / Preferences / Maven / User Settings
    b) User Settings:  c:\tools\apache-maven-3.3.1\conf\settings.xml	
	c) Press Update Settings
	d) Press "OK"
	
3. Tell Eclipse that your default browser should be Firefox
    a) Pull Window -> Preferences
	b) Search for "browser"
	c) Click on "Web Browser"
	     Select "Use external web browser"
		 Select Firefox
		 Press Apply
		 Press OK

4. Tell Eclipse to turn off spelling checkbox
    a) Pull Window -> Preferences
    b) Select Java -> Editor -> Folding
	     Uncheck "Enable folding"
		 Press Apply
		 Press OK
	 
5. Tell Eclipse to turn off folding
    a) Pull Window -> Preferences
    b) Search for Spelling
    c) Click on Spelling
    d) Uncheck "Enable spell checking"
       Press Apply
       Press OK

	 
6. Create the web app project in Eclipse
    a) Startup Eclipse
       If you see the "Weclome" page, press the "X" next to it -- to remove the Welcome page
	   If prompted for your workspace, use c:\tools\eclipse\workspace
	   
	b) Pull File / New / Dynamic Web Project
	   Press "Next"
	   
	c) On the Dynamic Web Project screen
	   Project name:  webapp1
       Target runtime:  Press "New Runtime..."
	   
	d) On New Server Runtime Environment
	     -- Select Apache Tomcat v7.0
		 -- Press "Next"
		 
	e) On Tomcat Server
		 -- Under Tomcat installation directory:  c:\tools\apache-tomcat-7.0.59   
		    *OR* press "Browse" and browse to Computer -> Local Diskc (C:) -> tools -> apache-tomcat-7.0.59   
		 -- Press "Finish"
		 
	g) Back on Dynamic Web Project screen
	   Press "Next"
	   
	h) On the Java screen
	   Press "Next"
	   
	i) For the Web Module screen
	   Context root:         webapp1
	   Content directory:    WAR
	   Check the checkbox to "Generate web.xml deployment desciptor"
	   Press "Finish"
	   
7. Convert your project to Maven
     a) Right-click on webapp1 -> Configure -> Convert to Maven Project
     
     b) In the Maven POM screen
        Press "Finish"
		
8. Add Maven Dependencies for your java webapp
     a) Click on webapp1 -> Java Resources -> Libraries -> Maven Dependencies
	    NOTE:  You should see nothing
		
	 b) Add the dependency for the Stripes MVC framework
	    Right-click on webapp1 -> Maven -> Add Dependency
			<dependency>
				<groupId>net.sourceforge.stripes</groupId>
				<artifactId>stripes</artifactId>
				<version>1.5.8</version>
			</dependency>
			
	
     c) Add the dependency for Java Server Template Library (jstl)	
	    Right-click on webapp1 -> Maven -> Add Dependency
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>
				<version>1.2</version>
			</dependency>
			
			
     d) Add the dependencies for logging (part 1)
	    Right-click on webapp1 -> Maven -> Add Dependency			
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>1.0.3</version>
			</dependency>
			
     e) Add the dependencies for sending Stripes logging to logback (part 3)
	    Right-click on webapp1 -> Maven -> Add Dependency			
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>1.7.7</version>
			</dependency>
		
			
			
	 f) Add the dependencies for Tomcat
	    Right-click on webapp1 -> Maven -> Add Dependency			
		NOTE:  Scope is *provided*
		
			<dependency> 
				<!-- Tomcat provides the servlet classes -->
				<groupId>javax.servlet</groupId> 
				<artifactId>javax.servlet-api</artifactId> 
				<version>3.0.1</version> 
				<scope>provided</scope> 
			</dependency>

9. Create your WAR / WEB-INF / classes directory
    a) Browse to webapp1 -> WAR -> WEB-INF
    b) Right-click on WEB-INF -> New -> Folder
       Folder name:  classes
	   Press "Finish"
	c) Right-click on your new classes directory -> Build Path -> Use as Source Folder

10. Create your WAR / WEB-INF / jsp directory
    a) Browse to webapp1 -> WAR -> WEB-INF
    b) Right-click on WEB-INF -> New -> Folder
       Folder name:  jsp
	   Press "Finish"

11. Update your web.xml to load Stripes
    a) Browse to webapp1 -> WAR -> WEB-INF -> web.xml
	b) Right-click on web.xml -> Open With -> Text Editor
	    1. Delete all of the <welcome-file> entries 
		2. Add this <welcome-file>default.jsp</welcome-file>
		

    c) Before <welcome-file>, add this text:

	<!-- S T R I P E S      C O N F I G U R A T I O N  -->
	<filter>
		<filter-name>StripesFilter</filter-name>
		<filter-class>net.sourceforge.stripes.controller.StripesFilter</filter-class>
		<init-param>
		    <!-- All Action Beans are located in package called stuff.ab -->
			<param-name>ActionResolver.Packages</param-name>
			<param-value>stuff.ab</param-value>
		</init-param>
	</filter>
	<servlet>
		<servlet-name>DispatcherServlet</servlet-name>
		<servlet-class>net.sourceforge.stripes.controller.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<filter-mapping>
		<filter-name>StripesFilter</filter-name>
		<servlet-name>DispatcherServlet</servlet-name>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
	<servlet-mapping>
		<servlet-name>DispatcherServlet</servlet-name>
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>

		
When you're done, your web.xml should look like this:

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">


	<!-- S T R I P E S      C O N F I G U R A T I O N  -->
	<filter>
		<filter-name>StripesFilter</filter-name>
		<filter-class>net.sourceforge.stripes.controller.StripesFilter</filter-class>
		<init-param>
		    <!-- All Action Beans are located in package called stuff.ab -->
			<param-name>ActionResolver.Packages</param-name>
			<param-value>stuff.ab</param-value>
		</init-param>
	</filter>
	<servlet>
		<servlet-name>DispatcherServlet</servlet-name>
		<servlet-class>net.sourceforge.stripes.controller.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<filter-mapping>
		<filter-name>StripesFilter</filter-name>
		<servlet-name>DispatcherServlet</servlet-name>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
	<servlet-mapping>
		<servlet-name>DispatcherServlet</servlet-name>
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>

	
	<welcome-file-list>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
</web-app>



12. Add a logback.xml file to see logging
	a) Browse to webapp1 -> WAR -> WEB-INF -> classes
	b) Right-click on classes -> New -> File
	   filename:  logback.xml
	   
	c) Right-click on logback.xml -> Open With -> Text Editor
	   Copy this contents to your file
	
<?xml version="1.0" encoding="windows-1252" ?>

<configuration>	
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
	 	<encoder>
	 		<pattern>%d{MM/dd/yyyy HH:mm:ss} %logger %m%n</pattern>
	 	</encoder>
	</appender>
	
	<logger name="stuff" additivity="FALSE" level="DEBUG">
		<appender-ref ref="CONSOLE" />
	</logger>

	<logger name="net.sourceforge.stripes" additivity="FALSE" level="INFO">
		<appender-ref ref="CONSOLE" />
	</logger>
	
	<root level="DEBUG">
		<appender-ref ref="CONSOLE" />
	</root>	
</configuration>



13. Add a default.jsp page
    Right-click on WAR -> New -> File
	File name:  default.jsp
	
	
	<%@ page session="false" %>
	<%@ page language="java" contentType="text/html;charset=UTF-8" %>
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
	  
	<%-- Redirected the user to the MainPageController   --%>
	<jsp:forward page="/stuff/ab/MainPageController.action" />  

	

14. Create your first ActionBean classes
    a) Browse to webapp1 -> Java Resources -> src -> Right-click -> New -> Package
	   Name:  stuff.ab
	   
	b) Right-click on stuff.ab -> New -> Class
	   Name:  BaseActionBean
	   Press "Finish"	
			   
	c) Copy this java code to MainPageController.java
	
		package stuff.ab;

		import net.sourceforge.stripes.action.ActionBean;
		import net.sourceforge.stripes.action.ActionBeanContext;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;


		public class BaseActionBean  implements ActionBean 
		{
			private ActionBeanContext ctx;
			protected Logger logger = LoggerFactory.getLogger(getClass());

			@Override
			public ActionBeanContext getContext()
			{
				   return ctx;   
			}

			@Override
			public void setContext(ActionBeanContext aCtx) 
			{
				this.ctx = aCtx;
			}

		}

			
15. Create your MainPageController class
    a) Browse to webapp1 -> Java Resources -> src -> stuff.ab -> New -> Class
	   Name:  MainPageController
	   Press "Finish"	
			   
	b) Copy this java code to MainPageController.java
		   
		package stuff.ab;

		import net.sourceforge.stripes.action.DefaultHandler;
		import net.sourceforge.stripes.action.ForwardResolution;
		import net.sourceforge.stripes.action.Resolution;
		 
		public class MainPageController extends BaseActionBean
		{    

			@DefaultHandler   
			public Resolution showMain()
			{     
			    logger.debug("showMain() started");
				return new ForwardResolution("/WEB-INF/jsp/main.jsp");   
			}
		}
					
					
16. Create your main.jsp page
    Browse to WAR -> WEB-INF -> jsp -> Right-Click -> New -> File
	File name:  main.jsp
	
		<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"    "http://www.w3.org/TR/html4/strict.dtd" >

		<html>
		  <head>
			<title>Main</title>
		  </head>
		  
		  <body>
			<h3>main.jsp page</h3>
		  </body>
		  
		</html>
		

17. Create your images/, js/ and css/ directories
    a) Right-click on webapp1 -> WAR -> New -> Folder -> images
    b) Right-click on webapp1 -> WAR -> New -> Folder -> js
    c) Right-click on webapp1 -> WAR -> New -> Folder -> css
	
		 
18. Startup the webapp in debug mode
    a) Right-click on webapp1 -> Debug As -> Debug on Server
	    1. In the "Debug on Server", 
		   Single-click on Tomcat v.7.0 Server
		   Check "Always use this server when running this projecdt"
		   Press "Next"
		   Press "Finish"
		   
	