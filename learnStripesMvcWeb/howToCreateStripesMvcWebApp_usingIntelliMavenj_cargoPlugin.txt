How to Setup and Debug a Stripes MVC Web App using Intellij, Maven, and the Cargo Plugin
----------------------------------------------------------------------------------------


Assumptions:  
 A) You have Intellij 14 Community Edition installed
 B) You have Maven installed
 C) Your Maven configuration can download files from a maven repository
 D) You want to use the Cargo maven plugin to run your local Tomcat
 
 
Procedures
----------
 1. Create your "mywebapp2" Maven webapp project in Intellij
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project
       
    b. Pull File / New / Project....
       1) In the "New Project" window, Select Maven
            a) Next to Project SDK:  Press New
               -- Browse to your Java JDK:  C:\Program Files\Java\jdk1.7.0_60
               -- Press OK
               
            b) Check "Create from archetype"
            c) Select maven-archetype-webapp
               Press Next
               
       2) In the next screen
          GroupId:     com.resnick
          ArtifactId:  webapp2      
          Version:     1.0-SNAPSHOT
          Press Next
          
          
       3) In the next screen,
          Maven home directory:  C:/tools/apache-maven-3.2.3
          User settings file:    Check the checkbox to "Override"
                                 C:\tools\apache-maven-3.2.3\conf\settings.xml
          Press Next                       
                                 
       
       4) Project Name:      webapp2
          Project Location:  C:\tools\intellij\workspace\webapp2
          Press Finish
          
       5) If you get prompted that "C:\tools\intellij\workspace\webapp2" does not exist
          It will be created by Intellij
          Press OK 
     
       6) If you get prompted 
          New projects can either be opened in a new window or replace the project
          Press "This Window"
          
       7) If you are prompted 
          Maven projects need to be imported
          Press "Enable Auto-Import"
          
          Now, maven has created a simple "Hello World" web app
       
       
       
 2. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
          a) Single-click on Inspections
          b) next to Typo -- Uncheck the checkbox
          c) Press Apply
          
          

 3. Setup the Maven test directories for your Intellij project

    Add these directories
       src/test/               
       src/test/java                          # Holds unit test java code
       src/test/resources/                    # Holds the logback.xml used by unit test code
       src/main/webapp/resources/             # Holds any images, javascript, or css
       src/main/java
    
    
    a. Right-click on src             -> New -> Directory:    test
    b. Right-click on src/test        -> New -> Directory:    java
    c. Right-click on src/test        -> New -> Directory:    resources
    d. Right-click on src/main/webapp -> New -> Directory:    resources
    e. Right-click on src/main        -> New -> Directory:    java
  
    f. Right-click on src/main/java -> Mark Directory As -> Sources Root
    g. Right-click on src/test/java -> Mark Directory As -> Sources Root
    h. Right-click on src/test/java -> Mark Directory As -> Test Sources Root
    
      
    Now, you should have this directory structure
      src/main/java/ 
      src/main/resources/               # Holds logback.xml used by java code     
      src/main/webapp/                  
      src/main/webapp/resources/        # Holds any images, javascript, or css
      src/main/webapp/META-INF/
      src/main/webapp/WEB-INF/  
      src/test/
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code
   

   

           
 4. Add dependencies for Stripes, Web development, and Logback
    Your pom.xml should already have one dependency:
      <dependencies>
      
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>3.8.1</version>
          <scope>test</scope>
        </dependency>
        
      </dependencies>
    
        
        
        
    Copy and paste these dependencies into your pom.xml
    NOTE:  Add all of these dependencies should be between these tags:
       <dependencies>
       . . .
       </dependencies>
       
       
             <dependency>
                <!-- Spring MVC Framework -->
                <groupId>net.sourceforge.stripes</groupId>
                <artifactId>stripes</artifactId>
                <version>1.5.8</version>
            </dependency>
            
    
            <dependency>
                <!-- Dependency for Java Server Template Library (jstl) -->
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
                <version>1.2</version>
            </dependency>
            
         
            <dependency>
                <!-- Bridge Logging from Java Common Logging to SLF4J -->
                <groupId>org.slf4j</groupId>
                <artifactId>jcl-over-slf4j</artifactId>
                <version>1.7.5</version>
            </dependency>
        
               
            <dependency>
                <!-- Send Logging from SLF4j to Logback -->
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.0.13</version>
            </dependency>
 
        
            <dependency> 
                <!-- Tomcat provides the servlet classes -->
                <groupId>javax.servlet</groupId> 
                <artifactId>javax.servlet-api</artifactId> 
                <version>3.0.1</version> 
                <scope>provided</scope> 
            </dependency>


 5. Create directories under WEB-INF
    a. Create your src / main / webapp / WEB-INF / jsp directory
       -- Right-click on src / main / webapp / WEB-INF -> New -> Directory -> jsp
    


       
        

 6. Update your web.xml to load Stripes
    a. Browse to  src / main / webapp / WEB-INF / web.xml
    b. Replace your web.xml with this
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

        <?xml version="1.0" encoding="UTF-8"?>
        <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
            <display-name>mywebapp2</display-name>
        
        
            <!-- S T R I P E S      C O N F I G U R A T I O N  -->
            <filter>
                <filter-name>StripesFilter</filter-name>
                <filter-class>net.sourceforge.stripes.controller.StripesFilter</filter-class>
                <init-param>
                    <!-- All Action Beans are located in package called stuff.ab -->
                    <param-name>ActionResolver.Packages</param-name>
                    <param-value>stuff.ab</param-value>
                </init-param>
            </filter>
            <servlet>
                <servlet-name>DispatcherServlet</servlet-name>
                <servlet-class>net.sourceforge.stripes.controller.DispatcherServlet</servlet-class>
                <load-on-startup>1</load-on-startup>
            </servlet>
            <filter-mapping>
                <filter-name>StripesFilter</filter-name>
                <servlet-name>DispatcherServlet</servlet-name>
                <dispatcher>REQUEST</dispatcher>
                <dispatcher>FORWARD</dispatcher>
            </filter-mapping>
            <servlet-mapping>
                <servlet-name>DispatcherServlet</servlet-name>
                <url-pattern>*.action</url-pattern>
            </servlet-mapping>
        
            
            <welcome-file-list>
                <welcome-file>default.jsp</welcome-file>
            </welcome-file-list>
        </web-app>



 7. Add a logback.xml file to see logging
    a. Right-click on src/main/resources -> New -> File 
       filename:  logback.xml
        
    b. Copy this contents to your file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>

        <configuration debug="true">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %logger %m%n</pattern>
                </encoder>
            </appender>
            
            <logger name="stuff" additivity="FALSE" level="DEBUG">
                <appender-ref ref="CONSOLE" />
            </logger>

            <logger name="net.sourceforge.stripes" additivity="FALSE" level="INFO">
                <appender-ref ref="CONSOLE" />
            </logger>
            
            <root level="DEBUG">
                <appender-ref ref="CONSOLE" />
            </root> 
        </configuration>



 8.  Add a default.jsp page
     a. Right-click on src / main / webapp -> New -> File
        File name:  default.jsp
    
     b. Copy this contents to your file
    
        <%@ page session="false" %>
        <%@ page language="java" contentType="text/html;charset=UTF-8" %>
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
          
        <%-- Redirected the user to the MainPageController   --%>
        <jsp:forward page="/stuff/ab/MainPageController.action" />  


    
 9. Delete the generated index.jsp
    a. Right-click on src/main/webapp/index.jsp -> Delete
    b. In the Delete File window, press OK
  
  
     
10. Create your first ActionBean classes
    a. Browse to src/main/java  -> Right-click -> New -> Package
       Name:  stuff.ab
       
    b. Right-click on stuff.ab -> New -> Java Class
       Name:  BaseActionBean
       Press "Finish"   
               
    c. Copy this java code to MainPageController.java
    
        package stuff.ab;

        import net.sourceforge.stripes.action.ActionBean;
        import net.sourceforge.stripes.action.ActionBeanContext;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;


        public class BaseActionBean  implements ActionBean 
        {
            private ActionBeanContext ctx;
            protected Logger logger = LoggerFactory.getLogger(getClass());


            public ActionBeanContext getContext()
            {
                   return ctx;   
            }


            public void setContext(ActionBeanContext aCtx) 
            {
                this.ctx = aCtx;
            }

        }

            
10. Create your MainPageController class
    a. Browse to src/main/java -> stuff.ab -> New -> Java Class
       Name:  MainPageController
       Press "Finish"   
               
    b. Copy this java code to MainPageController.java
           
        package stuff.ab;

        import net.sourceforge.stripes.action.DefaultHandler;
        import net.sourceforge.stripes.action.ForwardResolution;
        import net.sourceforge.stripes.action.Resolution;
         
        public class MainPageController extends BaseActionBean
        {    

            @DefaultHandler   
            public Resolution showMain()
            {     
                logger.debug("showMain() started");
                return new ForwardResolution("/WEB-INF/jsp/main.jsp");   
            }
        }
                    
                    
11. Create your main.jsp page
    a. Browse to src / main / webapp / WEB-INF / jsp -> Right-Click -> New -> File
       Name:  main.jsp
 
               
    b. Copy this to your main.jsp
    
        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"    "http://www.w3.org/TR/html4/strict.dtd" >

        <html>
          <head>
            <title>Main</title>
          </head>
          
          <body>
            <h3>main.jsp page</h3>
          </body>
          
        </html>
 
 
       

12. Setup Remote Tomcat connection in Intellij
    a. Pull Run / Edit Configurations
    b. Click the "+"
    c. Select "Remote"
    d. Enter these values:
       Name:           Remote-mywebapp2
       Transport:      Socket
       Debugger Mode:  Attach
       Host:           localhost
       Port:           5005        
     
    e. Press Apply
    f. Press OK
    
    
    
13. Setup the Cargo maven plugin to startup a Tomcat from the command-line in debug mode
    The end of your pom.xml should look like this:
    
            <build>
              <finalName>webapp2</finalName>
            </build>
         </project>
     
    a. Replace the end of the of the pom.xml with this:
    
          <build>
            <finalName>webapp2</finalName>
    
          <plugins>
              <plugin>
                  <!-- Setup the Cargo plugin -->
                  <groupId>org.codehaus.cargo</groupId>
                  <artifactId>cargo-maven2-plugin</artifactId>
                  <version>1.4.13</version>
                  <configuration>
                      <container>
                          <!-- Tell Cargo to use the installed Tomcat7 located in <home>...</home> -->
                          <containerId>tomcat7x</containerId>
                          <type>installed</type>
                          <home>C:/tools/apache-tomcat-7.0.55</home>
                      </container>
                      <configuration>
                          <properties>
                              <!-- Have Cargo pass-in the debug parameters to the target -->
                              <cargo.jvmargs>
                                  -Xdebug
                                  -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005
                                  -Xnoagent
                                  -Djava.compiler=NONE
                              </cargo.jvmargs>
                              <cargo.logging>medium</cargo.logging>
                          </properties>
                      </configuration>
                  </configuration>
    
                  <executions>
                      <execution>
                          <id>run</id>
                          <goals>
                              <goal>run</goal>
                          </goals>
                      </execution>
                  </executions>
    
              </plugin>
          </plugins>
      </build>
    </project>
    
     
    
     
14. Startup the webapp in debug mode
    a. In Intellij, Pull File / Save All
    
    b. Set a breakpoint
       -- Browse to src/main/java -> app1.controllers -> MainPageController.java
       -- Click in the left margin around line 30 to set a breakpoint
       
    c. Startup Tomcat in debugging mode
       -- Open a DOS window by pressing <Start><Run>CMD and enter these commands
          DOS> cd /d c:\tools\intellij\workspace\webapp2
          DOS> mvn clean package cargo:run
       
      
          NOTE:  mvn clean package  will create a new build of your webapp
          NOTE:  mvn cargo:run      will have your webapp deployed to your tomcat and startup Tomcat in debug mode
       
       You should see this:
       
       [INFO] [talledLocalContainer] Tomcat 7.x starting...
       [INFO] [stalledLocalDeployer] Deploying [c:\tools\intellij\workspace\webapp2\target\webapp2.war] to [c:\tools\intellij\workspace\webapp2\target\cargo\configurations\tomcat7x/webapps]...
       [INFO] [talledLocalContainer] Listening for transport dt_socket at address: 5005
       
       At this point, your Tomcat is *waiting* for someone to connect to it remotely
        
    
    d. Use Intellij to connect to your Tomcat remotely
       -- In Intellij, pull Run / Debug / Remote-webapp2
        
    e. Open a web browser to your local webapp
       -- Open Firefox
       -- Connect to http://localhost:8080/webapp2
       -- You should reach your breakpoint        

    
         

  
  