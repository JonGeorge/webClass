How to Setup and Debug a Stripes MVC Web App using Eclipse and Maven
--------------------------------------------------------------------

Assumptions:  
 A) You have Eclipse installed
 B) You have Maven installed
 C) Your Maven configuration can download files from a maven repository
 
 
Procedures
----------
 1. Create your "mywebapp2" Maven project in Eclipse
    a. Startup Eclipse
       If you see the "Welcome" page, press the "X" next to it -- to remove the Welcome page
       If prompted for your workspace, use c:\tools\eclipse\workspace
       
    b. Pull File / New / Project...
        -- Choose Web -> Dynamic Web Project
        -- Press Next
        
    c. In the next screen
        Project Name:  mywebapp2
        Check "Use the default workspace"
        Press "New Runtime..."
       
        1) On New Server Runtime Environment
             -- Select Apache Tomcat v7.0
             -- Press "Next"
             
        2) On Tomcat Server
             -- Under Tomcat installation directory:  c:\tools\apache-tomcat-7.0.59   
                *OR* press "Browse" and browse to Computer -> Local Diskc (C:) -> tools -> apache-tomcat-7.0.59   
             -- Press "Finish"
             
    d. Back on Dynamic Web Project screen
       Press "Next"
       
    e. On the Java screen
       Press "Next"
       
    f. For the Web Module screen
       Context root:         mywebapp2
       Content directory:    src/main/webapp
       Check the checkbox to "Generate web.xml deployment desciptor"
       Press "Finish"



 2. Convert your web project into a Maven project        
    a. Right-click on mywebapp2 -> Configure -> Convert to Maven Project
               
    b. In the next screen
       Group Id:     com.resnick
       Artifact Id:  mywebapp2
       Version:      0.0.1-SNAPSHOT
       Packing:      war
       Press Finish
          
       NOTE:  This will generate a pom.xml file




 3. Setup the standard Maven directories for your Eclipse project
    Eclipse projects put java source code here:
       src/
              
    But, Maven uses this directory sturcture
      src/main/java/                         # Holds the java code used by the web app
      src/main/resources/                    # Holds the logback.xml used by java code
      src/main/webapp/    
      src/main/webapp/resources/             # Holds the javascript and css files used by webapp
      src/main/webapp/META-INF/
      src/main/webapp/WEB-INF/  
      src/test/               
      src/test/java                          # Holds unit test java code
      src/test/resources/                    # Holds the logback.xml used by unit test code
      
    So, we need to create these directories and tell Eclipse to use them
    
    
 
    a. Remove this line from your pom.xml
          <sourceDirectory>src</sourceDirectory>
   
    b. Right-click on the src -> Build Path -> Remove from Build Path
      
    c. Right-click on src/main        -> New -> Folder:    java
    d. Right-click on src/main        -> New -> Folder:    resources
    e. Right-click on src/main/webapp -> New -> Folder:    resources
   
    f. Right-click on src             -> New -> Folder:    test
    g. Right-click on src/test        -> New -> Folder:    java
    h. Right-click on src/test        -> New -> Folder:    resources

    Now, you should have this directory structure
      src/main/java/ 
      src/main/resources/               # Holds logback.xml used by java code     
      src/main/webapp/                  
      src/main/webapp/resources/        # Holds any images, javascript, or css
      src/main/webapp/META-INF/
      src/main/webapp/WEB-INF/  
      src/test/
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code
   
    i. Right-click on src/main/java      -> Build Path -> Use as Source Folder
    j. Right-click on src/main/resources -> Build Path -> Use as Source Folder
    k. Right-click on src/test/java      -> Build Path -> Use as Source Folder
    l. Right-click on src/test/resources -> Build Path -> Use as Source Folder


    m. Right-click on mywebapp1 -> Maven -> Update Project...
       In the "Update Maven Project" screen, press <OK>       
 
    n. Right-click on the src -> Build Path -> Remove from Build Path
 



 4. Tell Eclipse to include Tomcat libraries [so that jsp page validation works properly]
    a. Right-click on "mywebapp2" -> Build Path -> Configure Build Path...
    b. Click on the "Libraries" tab
       -- If you do not see "Apache Tomcat v7.0" then follow these steps
          1) Press "Add Library"
          2) Select "Server Runtime"
          3) Select Apache Tomcat v7.0
             Press <Finish>
             Press <OK>
            
        
 5. Add Maven Dependencies for your java webapp
    NOTE:  You can copy the <dependency> tags to your pom.xml *OR* 
           Enter each dependecy one at a time by right-clicking on mywebapp2 -> Maven -> Add Dependency

    a. Click on mywebapp2 -> Java Resources -> Libraries -> Maven Dependencies
       NOTE:  You should see nothing
        
    b. Add the dependency for the Spring MVC framework
       Right-click on mywebapp2 -> Maven -> Add Dependency
        
       NOTE:  If no scope is listed here, then use the default scope of "compile"
       Right-click on webapp1 -> Maven -> Add Dependency
            <dependency>
                <groupId>net.sourceforge.stripes</groupId>
                <artifactId>stripes</artifactId>
                <version>1.5.8</version>
            </dependency>
            
    
    c. Add the dependency for Java Server Template Library (jstl)  
       Right-click on webapp1 -> Maven -> Add Dependency
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
                <version>1.2</version>
            </dependency>
            
            
    d. Add the dependencies for sending log4j logging to logback (part 1)
       Right-click on mywebapp2 -> Maven -> Add Dependency         
        <dependency>
            <!-- Bridge Logging from Java Common Logging to SLF4J -->
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.5</version>
        </dependency>
        

    e. Add the dependencies for logging (part 2)
       Right-click on mywebapp2 -> Maven -> Add Dependency         
        <dependency>
            <!-- Send Logging from SLF4j to Logback -->
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
        </dependency>
                
            
    f. Add the dependencies for Tomcat
       Right-click on webapp1 -> Maven -> Add Dependency           
       NOTE:  Scope is *provided*
        
            <dependency> 
                <!-- Tomcat provides the servlet classes -->
                <groupId>javax.servlet</groupId> 
                <artifactId>javax.servlet-api</artifactId> 
                <version>3.0.1</version> 
                <scope>provided</scope> 
            </dependency>

 6. Create your / webapp / WEB-INF / jsp   directory
    a. Browse to "Deployed Resources" / webapp / WEB-INF 
    b. Right-click on WEB-INF -> New -> Folder
       Folder name:  jsp
       Press "Finish"           
        

 7. Update your web.xml to load Stripes
    a. Browse to "Deployed Resources" / webapp / WEB-INF  / web.xml
    b. Replace your web.xml with this
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

        <?xml version="1.0" encoding="UTF-8"?>
        <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
            <display-name>mywebapp2</display-name>
        
        
            <!-- S T R I P E S      C O N F I G U R A T I O N  -->
            <filter>
                <filter-name>StripesFilter</filter-name>
                <filter-class>net.sourceforge.stripes.controller.StripesFilter</filter-class>
                <init-param>
                    <!-- All Action Beans are located in package called stuff.ab -->
                    <param-name>ActionResolver.Packages</param-name>
                    <param-value>stuff.ab</param-value>
                </init-param>
            </filter>
            <servlet>
                <servlet-name>DispatcherServlet</servlet-name>
                <servlet-class>net.sourceforge.stripes.controller.DispatcherServlet</servlet-class>
                <load-on-startup>1</load-on-startup>
            </servlet>
            <filter-mapping>
                <filter-name>StripesFilter</filter-name>
                <servlet-name>DispatcherServlet</servlet-name>
                <dispatcher>REQUEST</dispatcher>
                <dispatcher>FORWARD</dispatcher>
            </filter-mapping>
            <servlet-mapping>
                <servlet-name>DispatcherServlet</servlet-name>
                <url-pattern>*.action</url-pattern>
            </servlet-mapping>
        
            
            <welcome-file-list>
                <welcome-file>default.jsp</welcome-file>
            </welcome-file-list>
        </web-app>



 8. Add a logback.xml file to see logging
    a. Right-click on src/main/resources -> New -> File 
       filename:  logback.xml
        
    b. Copy this contents to your file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>

        <configuration debug="true">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %logger %m%n</pattern>
                </encoder>
            </appender>
            
            <logger name="stuff" additivity="FALSE" level="DEBUG">
                <appender-ref ref="CONSOLE" />
            </logger>

            <logger name="net.sourceforge.stripes" additivity="FALSE" level="INFO">
                <appender-ref ref="CONSOLE" />
            </logger>
            
            <root level="DEBUG">
                <appender-ref ref="CONSOLE" />
            </root> 
        </configuration>



 9.  Add a default.jsp page
     a. Browse to "Deployed Resources" / webapp  -> New -> File
        File name:  default.jsp
    
     b. Copy this contents to your file
    
        <%@ page session="false" %>
        <%@ page language="java" contentType="text/html;charset=UTF-8" %>
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
          
        <%-- Redirected the user to the MainPageController   --%>
        <jsp:forward page="/stuff/ab/MainPageController.action" />  

    

10. Create your first ActionBean classes
    a. Browse to src/main/java  -> Right-click -> New -> Package
       Name:  stuff.ab
       
    b. Right-click on stuff.ab -> New -> Class
       Name:  BaseActionBean
       Press "Finish"   
               
    c. Copy this java code to MainPageController.java
    
        package stuff.ab;

        import net.sourceforge.stripes.action.ActionBean;
        import net.sourceforge.stripes.action.ActionBeanContext;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;


        public class BaseActionBean  implements ActionBean 
        {
            private ActionBeanContext ctx;
            protected Logger logger = LoggerFactory.getLogger(getClass());

            @Override
            public ActionBeanContext getContext()
            {
                   return ctx;   
            }

            @Override
            public void setContext(ActionBeanContext aCtx) 
            {
                this.ctx = aCtx;
            }

        }

            
11. Create your MainPageController class
    a. Browse to src/main/java -> stuff.ab -> New -> Class
       Name:  MainPageController
       Press "Finish"   
               
    b. Copy this java code to MainPageController.java
           
        package stuff.ab;

        import net.sourceforge.stripes.action.DefaultHandler;
        import net.sourceforge.stripes.action.ForwardResolution;
        import net.sourceforge.stripes.action.Resolution;
         
        public class MainPageController extends BaseActionBean
        {    

            @DefaultHandler   
            public Resolution showMain()
            {     
                logger.debug("showMain() started");
                return new ForwardResolution("/WEB-INF/jsp/main.jsp");   
            }
        }
                    
                    
12. Create your main.jsp page
    a. Browse to "Deployed Resources" / webapp / WEB-INF / jsp -> Right-Click -> New -> File
       Name:  main.jsp
 
               
    b. Copy this to your main.jsp
    
        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"    "http://www.w3.org/TR/html4/strict.dtd" >

        <html>
          <head>
            <title>Main</title>
          </head>
          
          <body>
            <h3>main.jsp page</h3>
          </body>
          
        </html>
        

    
         
13. Startup the webapp in debug mode
    a. Set a breakpoint in your MainPageController.showMain() method
    b. Right-click on webapp1 -> Debug As -> Debug on Server
       -- In the "Debug on Server", 
          Single-click on Tomcat v.7.0 Server
            Check "Always use this server when running this projecdt"
            Press "Next"
            Press "Finish"
           
  
  