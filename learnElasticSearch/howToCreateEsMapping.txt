How to Create an ElasticSearch Mapping
--------------------------------------



Rules for the setting-up good ES mappings
-----------------------------------------
 1) If you intend to do an auto-complete feature, then create an extra column called "suggest"
    And setup a simple analyzer called lowercaseSpaceAnalyzer

     PUT /my-index-name
     {
           "settings":{
              "analysis": {
                "analyzer": {
                  "lowercaseSpaceAnalyzer": {
                    "type": "custom",
                    "tokenizer": "whitespace",
                    "filter": [ "lowercase"]
                  }
                }
              }
            },

           "mappings":
           {
              "record": {

                    "suggest":
                    {
                        "type": "completion",
                        "index_analyzer": "lowercaseSpaceAnalyzer",
                        "search_analyzer": "lowercaseSpaceAnalyzer",
                        "preserve_separators": false
                    }
                    . . .
                   }
             }
      }


 2) If the field has a paragraph of text, then use type=string, index=analyzed

                 "short_description": {
                   "type": "string",
                   "index": "analyzed",
                   "analyzer": "snowball",
                   "include_in_all": true,
                   "copy_to": "suggest"
                }


 3) If the field is a lookup value, then had a nested ".raw" field for aggregates
    NOTE:
      1) The bucket aggregators will operate on the raw field -- in this case, called "category.raw"
         so the bucket aggregator treats the entire string as one word for buckets
      2) The searches will run on field called "category"  [so the search can be case-insensitive]


                   "category": {
                       "type": "string",
                       "index": "analyzed",
                       "include_in_all": true,
                       "copy_to": "suggest",
                       "fields": {
                            "raw": {
                                "type": "string",
                                "index": "not_analyzed"
                             }
                       }
                    }


 4) If the field is a string with a multi-word name or a string like "N/A" and you intend to sort,
    then you want to set it to not_analyzed 
    
            "created_by" : {
              "type": "string",
              "index": "not_analyzed",
              "include_in_all": true,
              "copy_to": "suggest"
    
    
 5) If the field is an IP address, then use this:
    NOTE:
       1) The ignore_malformed:true tells ES to ignore invalid IP address and to keep parsing the other fields
       2) By storing the nested ".raw" field, we can apply bucket aggregators against the source_ip.raw field
       3) By storing the nested ".raw" field, we can use   regular expressions against the source_ip.raw field

                   "source_ip": {
                       "type": "ip",
                       "ignore_malformed": true,
                       "store": true,
                       "include_in_all": true,
                       "copy_to": "suggest",
                       "fields": {
                            "raw": {
                                "type": "string",
                                "index": "not_analyzed"
                             }
                       }
                    }



 6) If the field is a date, then ues this:
     NOTE:
       1) The ignore_malformed:true tells ES to ignore the invalid date/time field and to keep parsing the other fields
       2) The 'T' in the format is a constant T:  We use it to do a search against 2017-05-02T230506 without needing quotes

                   "start_date": {
                      "ignore_malformed": true,
                      "type": "date",
                      "format": "yyyy-MM-dd HH:mm:ss.SSS||yyyy-MM-dd'T'HH:mm:ss||yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||S",
                      "index": "not_analyzed",
                      "include_in_all": true
                    }



 7) If the field is a numeric field, then use this:

                    "sequence_number": {
                      "type": "integer",
                      "index": "not_analyzed",
                      "include_in_all": true,
                      "copy_to": "suggest"
                    },
