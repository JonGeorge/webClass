How to Index Documents using ElasticSearch
------------------------------------------

Assumptions:
 A) You have ElasticSearch 1.7 running locally listening on http://localhost:9200
 B) You have the Chrome Sense extension installed

Important Lessons
-----------------
 + Documents are immutable: they cannot be changed, only replaced. The update API must obey the same rules. 
 + The retry_on_conflict=<number> parameter causes ES to attempt to retry updates in case there are problems during updates
   NOTE:  This is handy for incremental updates or updates in which the order does not matter
   
   
Procedure
---------
 1. Delete the index
    DELETE /records_db
    
 
 2. Create a mappings for the index
    PUT /records_db
    {
       "mappings": {
          "record": {
             "properties": {
                "title": {
                   "type": "string",
                   "analyzer": "snowball"
                },
                "permissions": {
                   "type": "string",
                   "analyzer": "standard"
                },
                "type": {
                   "type": "integer",
                   "index": "not_analyzed"
                },
                "createDate": {
                   "type": "string",
                   "index": "not_analyzed"
                },
                "description": {
                   "type": "string",
                   "analyzer": "snowball"
                }
             }
          }
       }
    }
     
 3. Insert a record (and set the id=1)
    POST /records_db/record/1
    {
       "title": "Record #1",
       "permissions": "This,that,other thing",
       "type": 7,
       "createDate": "02/25/2016",
       "description": "This is the description for record #1"
    }
    
   Expected Response:
   {
    "_index": "records_db",
    "_type": "record",
    "_id": "1",
    "_version": 1,
    "created": true
   }


 4. Query for all records  [should show one result]
    POST /records_db/_search
    
    *OR*
    
   POST /records_db/_search
   {
      "query" : {"match_all": {} }
   }    
     
   Expected Results:  
    . . .
      "hits": {
      "total": 1,
      "max_score": 1,
      "hits": [
         {
            "_index": "records_db",
            "_type": "record",
            "_id": "1",
            "_score": 1,
            "_source": {
               "title": "Record #1",
               "permissions": "This,that,other thing",
               "type": 7,
               "createDate": "02/25/2016",
               "description": "This is the description for record #1"
            }
         }
      ]
   }
    

    
5a. Update the title of the 1st record using script:
    NOTE:  You will need to add this entry to your elasticsearch.yml
       script.groovy.sandbox.enabled: true
       
   POST /records_db/record/1/_update
    {
          "script" : "ctx._source.title = \"Record #1 Updated right now\""
    }
   
   Now, do a search to see the title has been updated
   POST /records_db/record/_search
     
     
     
5b. Update the title of the 1st record without a script
    POST /records_db/record/1/_update
    {
        "doc" : {
            "type":  5,
            "title": "This is the updated title -- Hi Mom"
        }
    }


5c. Update the title (and retry if there is a conflict)
    POST /records_db/record/1/_update?retry_on_conflict=3
    {
        "doc" : {
            "type":  5,
            "title": "This is the updated title -- Hi Mom"
        }
    }
   
 
 
6a. Delete a record by ID
    a. Delete the record.  The response should show "found": true
       DELETE /records_db/record/1

    b. Search for the records (you should see it is not present)
       POST /records_db/record/_search
 
    a. Delete the record again.  The response should show "found": false
       DELETE /records_db/record/1


    
