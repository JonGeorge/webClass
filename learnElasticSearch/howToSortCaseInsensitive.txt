How to Sort Case Insensitive
----------------------------
Solution:  Create a custom analyzer called "case_insensitive_analyzer"

Procedure
---------
 1. Delete the test index
    DELETE /records_db

 2. Create the index with a special "sophos.raw" field that uses the case_insensitive_analyzer
    PUT /records_db
    {
        "settings": {
            "analysis": {
                "analyzer": {
                    "case_insensitive_analyzer": {
                      "tokenizer": "keyword",    
                      "filter":  [ "lowercase" ] 
                    }
                }
            }
        },
        "mappings": {
              "record": {
                 "properties": {
                    "title": {
                       "type": "string",
                       "analyzer": "snowball"
                    },
                    "permissions": {
                       "type": "string",
                       "analyzer": "standard"
                    },
                    "type": {
                       "type": "integer",
                       "index": "not_analyzed"
                    },
                    "createDate": {
                       "type": "string",
                       "index": "not_analyzed"
                    },
                    "description": {
                       "type": "string",
                       "analyzer": "snowball"
                    },
                   "sophos": {
                      "type": "string",
                      "fields": {
                        "raw": {
                          "type": "string",
                          "analyzer": "case_insensitive_analyzer"
                        }
                      },
                      "include_in_all": true
                    }
                 }
              }
           }
    }

 3. Add some records
    POST _bulk
        { "create": { "_index": "records_db", "_type": "record", "_id": "1" }}
        { "sophos": "YYtop", "title": "Record #1", "permissions": "x,y,z", "type": 7, "createDate": "02/25/2016", "description": "This is the description for record #1" }
        { "create": { "_index": "records_db", "_type": "record", "_id": "2" }}
        { "sophos": "zzTop","title": "Record #2", "permissions": "a,b,c,d", "type": 4, "createDate": "02/25/2016", "description": "This is the description for record #2"}
        { "create": { "_index": "records_db", "_type": "record", "_id": "3" }}
        { "title": "Record #3", "permissions": "a,y,z", "type": 7, "createDate": "02/25/2016", "description": "This is the description for record #3"}
        { "create": { "_index": "records_db", "_type": "record", "_id": "4" }}
        { "sophos": "abc","title": "Record #4", "permissions": "a,y,z", "type": 7, "createDate": "02/25/2016", "description": "This is the description for record #4"}


 4. Search for all records and sort by "sophos.raw"
    NOTE:  If "missing": "_first" is set,then null fields will be on top
           If "missing": "_last" is set, then null fields will be on bottom
           TRICK:  Have your back-end REST calls check the "order" and set "missing": "_first" or "missing": "_last"
                   based on whether the sorting is "asc" or "desc"
           
    -- Run a search with a case-insensitive sort    
    POST /records_db/_search
    {
        "_source": ["sophos"],
      "query": {
        "match_all": {}
      },
      "size": 20,
      "sort": [
        {
          "sophos.raw": {
            "order": "asc",
            "missing" : "_first"
          }
        }
      ]
    }
    
    
