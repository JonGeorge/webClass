How to Create a Spring Bean for an Elastic Search Client 2.3.3
--------------------------------------------------------------
Suppose your web app needs to talk to an ElasticSearch server and you want to
use Spring to manage the ElasticSearch client singleton.


Assumptions:
 A) You have an ElasticSearch 1.7.5 server running
 B) You have a Java Web App using Spring
 C) You have an existing applicationContext.xml file
 

Procedure
---------
 1. Add the ElasticSearch 2.3.3 dependency to your pom.xml
 
       <dependency>
          <!-- WARNING:  The ElasticSearch java client should match the ElasticSearch instance version -->
          <groupId>org.elasticsearch</groupId>
          <artifactId>elasticsearch</artifactId>
          <version>2.3.3</version>
      </dependency>
      

      
 2. Add the ElasticSearch property values to your webapp's property file:
    NOTE:  Your property file may be located in /src/main/config/ or /src/main/resources/
    
            es.hostname=192.168.1.162
            es.port=9300
      

      
 3. Add this class:  EsClientUtils
    a. Right-click on /src/main/java/utilities -> New -> Java Class
       name:  EsClientUtils
    
    b. Copy this to your Java Class
    
            package app1.utilities;
            
            import org.elasticsearch.client.Client;
            import org.elasticsearch.client.transport.TransportClient;
            import org.elasticsearch.common.transport.InetSocketTransportAddress;
            import org.slf4j.Logger;
            import org.slf4j.LoggerFactory;
            
            import javax.annotation.PostConstruct;
            import java.net.InetAddress;
            import java.util.Properties;
            
            /**
             * Created by adam on 11/29/2016.
             */
            public class EsClientUtils
            {
                private Client esClient = null;
            
                private static final Logger logger = LoggerFactory.getLogger(EsClientUtils.class);
            
            
                /******************************************************************
                 * Private EsClientSingleton Constructor
                 * -- Do one-time initialization here
                 *******************************************************************/
                public EsClientUtils(final Properties aProperties) throws Exception
                {
                    // Pull the ES hostname and port from the properties
                    final String esHostname = aProperties.getProperty("hostname", "");
                    final int esPort = Integer.parseInt(aProperties.getProperty("port", "0"));
            
                    logger.debug("EsClient() Started.  hostname={}  port={}", esHostname, esPort);
            
            
                    if ((esHostname == null) || (esHostname.length() == 0))
                    {
                        throw new RuntimeException("Critical Error in EsClient() constructor.  The ES hostname is either blank or null.");
                    }
                    else if (esPort == 0)
                    {
                        throw new RuntimeException("Critical Error in EsClient() constructor.  The ES port is zero.  This is not valid.");
                    }
            
                    // Connect to the ElasticSearch instance using port 9300  [it's a binary protocol]
                    // NOTE:  The java client does not connect to port 9200
                    InetAddress addrEsHostname = InetAddress.getByName(esHostname);

                    this.esClient = TransportClient.builder().build()
                            .addTransportAddress(new InetSocketTransportAddress(addrEsHostname, esPort));

                    logger.debug("EsClient() finished successfully.");
                }
            
            
                /********************************************************************
                 * verifyClassIsInitialized()
                 *
                 * Verify that the ElasticSearch client was actually instantiated
                 *
                 * NOTE:  Because this is used in a Spring app,
                 *        You must have either of these set in your sping initialization
                 *            <context:annotation-config/> (or <context:component-scan/>
                 ********************************************************************/
                @PostConstruct
                public void verifyClassIsInitialized()
                {
                    if (this.esClient == null)
                    {
                        throw new RuntimeException("Critical Error in EsClient.  The esClient is null.");
                    }
                }
            
            
                /******************************************************************
                 * close()
                 *******************************************************************/
                public void close()
                {
                    if (this.esClient != null)
                    {
                        // Close the ElasticSearch client
                        logger.debug("Attempting to close the ES client.");
                        this.esClient.close();
                        logger.debug("Finished closing the ES client.");
                    }
                }
            
            
                public Client getClient()
                {
                    return this.esClient;
                }
            }
      

      
 4. Add this Spring Bean to your applicationContext.xml
    a. Edit your /src/main/webapp/WEB-INF/spring/applicationContext.xml
    
    b. Add this entry:
    
        <!-- Setup a spring bean that holds our ElasticSearch Client                            -->
        <!-- NOTE:  Set destroy-method="close" so that Spring will close the client on shutdown -->
        <bean id="esClient" class="app1.utilities.EsClientUtils" scope="singleton" destroy-method="close">
            <constructor-arg>
                <props>
                    <prop key="hostname">${es.hostname}</prop>
                    <prop key="port">${es.port}</prop>
                </props>
            </constructor-arg>
        </bean>

   
   
    NOTE:  Your applicationContext.xml file should look something like this:
    
        <?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <beans xmlns="http://www.springframework.org/schema/beans"
               xmlns:context="http://www.springframework.org/schema/context"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.springframework.org/schema/beans
                                           http://www.springframework.org/schema/beans/spring-beans.xsd
                                           http://www.springframework.org/schema/context
                                           http://www.springframework.org/schema/context/spring-context.xsd">
        
        
            <!-- Autodetect classes and register the corresponding beans -->
            <context:component-scan
                    base-package="app1"
                    use-default-filters="true">
        
                <context:exclude-filter
                        type="annotation"
                        expression="org.springframework.stereotype.Controller"/>
            </context:component-scan>
        
        
            <!-- Allow the use of @Autowire and @Required -->
            <context:annotation-config />
        
        
            <!--
                    This will automatically locate any and all property files you have
                    within your classpath, provided they fall under the META-INF
                    directory. The located property files are parsed and their values can
                    then be used within application context files in the form of
                    ${propertyKey}.
            -->
            <context:property-placeholder location="classpath*:*.properties" />
        
         
            <!-- Setup a spring bean that holds our ElasticSearch Client                            -->
            <!-- NOTE:  Set destroy-method="close" so that Spring will close the client on shutdown -->
            <bean id="esClient" class="app1.utilities.EsClientUtils" scope="singleton" destroy-method="close">
                <constructor-arg>
                    <props>
                        <prop key="hostname">${es.hostname}</prop>
                        <prop key="port">${es.port}</prop>
                    </props>
                </constructor-arg>
            </bean>
        
        </beans>



 5. **OPTIONAL** 
    Inject your bean into a WelcomeController class to see if it works:
    
    a. Edit your WelcomeController class
    
    b. Add this entry:
    
        @Resource
        private EsClientUtils esClientUtils;
    
    
    c. Add this method to the end of your class
    
        private void createIndex()
        {
            final String ES_INDEX_NAME = "bogus2";
    
            // A T T E M P T      T O     C R E A T E      I N D E X    (within ElasticSearch)
            try
            {
                // Create an index called "music"
                logger.debug("Attempting create the index called '{}'....", ES_INDEX_NAME);
                Settings indexSettings = Settings.builder()
                        .put("number_of_shards", 1)
                        .put("number_of_replicas", 1)
                        .build();
                CreateIndexRequest indexRequest = new CreateIndexRequest(ES_INDEX_NAME, indexSettings);
                CreateIndexResponse res = esClientUtils.getClient().admin().indices().create(indexRequest).actionGet();
                if (! res.isAcknowledged())
                {
                    logger.error("I failed to create this index:  {}", ES_INDEX_NAME);
                }
            }
            catch (IndexAlreadyExistsException alreadyExistsException)
            {
                // Ignore this exception
                logger.debug("Ignoring IndexAlreadyExistsException that was raised.");
            }
    
        }
    
    d. Modify the default mapper so it calls createIndex()
    
        /**********************************************************************
         * handleDefaultPage()
         *
         * The user browsed to the   http://www.myserver.com/webapp
         * So, forward the user to   http://www.myserver.com/webapp/forward
         ***********************************************************************/
        @RequestMapping("/")
        public ModelAndView handleDefaultPage( Model aModel ) throws Exception
        {
            createIndex();
    
            // By default, forward users to the /welcome page
            return new ModelAndView("forward:/welcome");
         }
  
  
    e. Debug your web app to see if it runs
    
    