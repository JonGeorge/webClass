How to Query using Java to List All Indexes in ElasticSearch
------------------------------------------------------------


Assumptions:
 A) You have an ElasticSearch instance running (with version 2.3.3)
 B) Your ElasticSearch instance is running on localhost and listening on port 9300
 C) You are using IntelliJ to create a project
 
 

Procedure
---------
 1. Create a Java command-line project
 
 2. Add these dependencies to your pom.xml

      <dependency>
          <groupId>org.elasticsearch</groupId>
          <artifactId>elasticsearch</artifactId>
          <version>2.3.3</version>
      </dependency>
      
      
      WARNING:  If using ElasticSearch with Apache Storm,
             Then, you might have to exclude the org.jboss.netty to connect to ElasticSearch properly.
             
     		 So, your Apache Storm dependency would look like this:
		      <dependency>
		          <groupId>org.apache.storm</groupId>
		          <artifactId>storm-core</artifactId>
		          <version>0.9.2-incubating</version>
		          <scope>compile</scope>
		          <exclusions>
		               <exclusion>
		                  <!-- Storm comes with jboss.netty and io.netty.  This removed the jboss.netty ones -->
		                  <groupId>org.jboss.netty</groupId>
		                  <artifactId>netty</artifactId>
		              </exclusion>
		          </exclusions>
		      </dependency>
             
  
 3. Create this file:  logback.xml
		 
		<?xml version="1.0" encoding="windows-1252" ?>
		<!DOCTYPE project>
		
		<configuration debug="false">
		    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		        <encoder>
		            <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
		        </encoder>
		    </appender>
		
		
		
		    <logger name="com.wahtever" level="DEBUG" additivity="false">
		        <appender-ref ref="CONSOLE"/>
		    </logger>
		
		    <root level="DEBUG">
		        <appender-ref ref="CONSOLE"/>
		    </root>
		</configuration>             
 
 
 
 4. Create this class:  EsClientSingleton
    This singleton class will hold your ElasticSearch Client
		    
		package com.whatever;
		
		import org.elasticsearch.client.Client;
		import org.elasticsearch.client.transport.TransportClient;
		import org.elasticsearch.common.transport.InetSocketTransportAddress;
		import java.net.InetAddress;
		
		/**
		 * Created by adam on 6/25/16.
		 */
		public enum EsClientSingleton
		{
		    INSTANCE;
		
		    private Client esClient;
		
		    /******************************************************************
		     * Private EsClientSingleton Constructor
		     * -- Do one-time initialization here
		     *******************************************************************/
		    private EsClientSingleton()
		    {
		        // The very first time this singleton is called, we will initialize the ES Client
		        initializeEsClientNoException();
		    }
		
		
		    /******************************************************************
		     * initializeEsClient()
		     * -- Attempt to connect to the ElasticSearch Instance
		     *******************************************************************/
		    private void initializeEsClientNoException()
		    {
		        try {
		            // Connect to the ElasticSearch instance using port 9300  [it's a binary protocol]
		            // NOTE:  The java client does not connect to port 9200
		            InetAddress addrEsHostname = InetAddress.getByName("localhost");
		
		            esClient = TransportClient.builder().build()
		                    .addTransportAddress(new InetSocketTransportAddress(addrEsHostname, 9300));
		        }
		        catch (Exception e)
		        {
		            // Convert the exception to a RunTime exception
		            RuntimeException re = new RuntimeException(e);
		            re.setStackTrace(e.getStackTrace());
		            throw re;
		        }
		
		    }
		
		    public Client getEsClient()
		    {
		        return esClient;
		    }
		}
		
				

 5. Create this class:  App
		
		package com.whatever;
		
		import com.fasterxml.jackson.databind.ObjectMapper;
		import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;
		import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;
		import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;
		import org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;
		import org.elasticsearch.action.index.IndexRequest;
		import org.elasticsearch.action.index.IndexResponse;
		import org.elasticsearch.action.search.SearchResponse;
		import org.elasticsearch.client.Client;
		import org.elasticsearch.common.settings.Settings;
		import org.elasticsearch.common.xcontent.XContentBuilder;
		import org.elasticsearch.index.IndexNotFoundException;
		import org.elasticsearch.indices.IndexAlreadyExistsException;
		import org.elasticsearch.search.SearchHit;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import static org.elasticsearch.common.xcontent.XContentFactory.*;
		
		import java.util.HashMap;
		import java.util.Map;
		
		/**
		 * App
		 *
		 */
		public class App 
		{
		    public static final Logger logger = LoggerFactory.getLogger(App.class);
		
		    public static void main( String[] args ) throws Exception
		    {
		        logger.debug("main() started");
		
		
		        // Connect to the ElasticSearch instance and return the client
		        Client esClient = EsClientSingleton.INSTANCE.getEsClient();
		
		
		        // Get a map of keys=<index name as string>  value=<IndexMetaData>
		        ImmutableOpenMap<String, IndexMetaData> indexMap = esClient.admin().cluster()
		                .prepareState().execute()
		                .actionGet().getState()
		                .getMetaData().indices();
		
		
		        // Loop through all of the keys (index names)
		        UnmodifiableIterator iter = indexMap.keysIt();
		        while (iter.hasNext() )
		        {
		            String sIndexName = (String) iter.next();
		
		            // Get the metadata for this index
		            IndexMetaData metadata = indexMap.get(sIndexName);
		
		            logger.debug("sIndexName={}   metadata={}", sIndexName, metadata.toString());
		        }
		        
        
		        logger.debug("main() finished");
		    }
		}

		   
         
 
 6. Startup your local ElasticSearch Instance
    unix> sudo service elasticsesarch start
    
 
 
 7. Run the code
    a. Within Intellij, right-click on the App class -> Run 'App.main()'
    
    b. You should see the following in your console:
    		
	