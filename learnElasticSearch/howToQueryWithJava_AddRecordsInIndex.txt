How to Query using Java to Get All Records from an Index
--------------------------------------------------------


Assumptions:
 A) You have an ElasticSearch instance running (with version 2.3.3)
 B) Your ElasticSearch instance is listening on localhost and on port 9300
 C) You are using IntelliJ to create a project

 
 

Procedure
---------
 1. Create a Java command-line project
 
 
 
 2. Add these dependencies to your pom.xml

      <dependency>
          <groupId>org.elasticsearch</groupId>
          <artifactId>elasticsearch</artifactId>
          <version>2.3.3</version>
      </dependency>
      
      
      WARNING:  If using ElasticSearch with Apache Storm,
             Then, you might have to exclude the org.jboss.netty to connect to ElasticSearch properly.
             
     		 So, your Apache Storm dependency would look like this:
		      <dependency>
		          <groupId>org.apache.storm</groupId>
		          <artifactId>storm-core</artifactId>
		          <version>0.9.2-incubating</version>
		          <scope>compile</scope>
		          <exclusions>
		               <exclusion>
		                  <!-- Storm comes with jboss.netty and io.netty.  This removed the jboss.netty ones -->
		                  <groupId>org.jboss.netty</groupId>
		                  <artifactId>netty</artifactId>
		              </exclusion>
		          </exclusions>
		      </dependency>
             


 3. Create this file:  logback.xml
		<?xml version="1.0" encoding="windows-1252" ?>
		<!DOCTYPE project>
		
		<configuration debug="false">
		    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		        <encoder>
		            <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
		        </encoder>
		    </appender>
		
		
		
		    <logger name="com.wahtever" level="DEBUG" additivity="false">
		        <appender-ref ref="CONSOLE"/>
		    </logger>
		
		    <root level="DEBUG">
		        <appender-ref ref="CONSOLE"/>
		    </root>
		</configuration>
              
 
 
 4. Create this class:  EsClientSingleton
    This singleton class will hold your ElasticSearch Client
		    
		package com.whatever;
		
		import org.elasticsearch.client.Client;
		import org.elasticsearch.client.transport.TransportClient;
		import org.elasticsearch.common.transport.InetSocketTransportAddress;
		import java.net.InetAddress;
		
		/**
		 * Created by adam on 6/25/16.
		 */
		public enum EsClientSingleton
		{
		    INSTANCE;
		
		    private Client esClient;
		
		    /******************************************************************
		     * Private EsClientSingleton Constructor
		     * -- Do one-time initialization here
		     *******************************************************************/
		    private EsClientSingleton()
		    {
		        // The very first time this singleton is called, we will initialize the ES Client
		        initializeEsClientNoException();
		    }
		
		
		    /******************************************************************
		     * initializeEsClient()
		     * -- Attempt to connect to the ElasticSearch Instance
		     *******************************************************************/
		    private void initializeEsClientNoException()
		    {
		        try {
		            // Connect to the ElasticSearch instance using port 9300  [it's a binary protocol]
		            // NOTE:  The java client does not connect to port 9200
		            InetAddress addrEsHostname = InetAddress.getByName("localhost");
		
		            esClient = TransportClient.builder().build()
		                    .addTransportAddress(new InetSocketTransportAddress(addrEsHostname, 9300));
		        }
		        catch (Exception e)
		        {
		            // Convert the exception to a RunTime exception
		            RuntimeException re = new RuntimeException(e);
		            re.setStackTrace(e.getStackTrace());
		            throw re;
		        }
		
		    }
		
		    public Client getEsClient()
		    {
		        return esClient;
		    }
		}
		
				

 5. Create this class:  App
		package com.whatever;
		
		import com.fasterxml.jackson.databind.ObjectMapper;
		import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;
		import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;
		import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;
		import org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;
		import org.elasticsearch.action.index.IndexRequest;
		import org.elasticsearch.action.index.IndexResponse;
		import org.elasticsearch.action.search.SearchResponse;
		import org.elasticsearch.client.Client;
		import org.elasticsearch.common.settings.Settings;
		import org.elasticsearch.common.xcontent.XContentBuilder;
		import org.elasticsearch.index.IndexNotFoundException;
		import org.elasticsearch.indices.IndexAlreadyExistsException;
		import org.elasticsearch.search.SearchHit;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import static org.elasticsearch.common.xcontent.XContentFactory.*;
		
		import java.util.HashMap;
		import java.util.Map;
		
		/**
		 * App
		 *
		 */
		public class App 
		{
		    public static final Logger logger = LoggerFactory.getLogger(App.class);
		
		    public static void main( String[] args ) throws Exception
		    {
		        logger.debug("main() started");
		
		
		        // Connect to the ElasticSearch instance and return the client
		        Client esClient = EsClientSingleton.INSTANCE.getEsClient();
		
		
				// Get information about all indices
				// -- Get a map of key=index-name  value=index-metadata        
		        ImmutableOpenMap<String, IndexMetaData> myIndices = esClient.admin().cluster()
	                .prepareState().execute()
	                .actionGet().getState()
	                .getMetaData().indices();
	                
		
		
		        logger.debug("main() finished");
		    }
		}

         
 
 6. Startup your local ElasticSearch Instance
 
 7. Run the code
    a. Within Intellij, right-click on the App class -> Run 'App.main()'
    
    b. You should see the following in your console:
		06/25/2016 17:34:46 DEBUG com.whatever.App main() started
		06/25/2016 17:34:46 INFO  org.elasticsearch.plugins [Yeti] modules [], plugins [], sites []
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [generic], type [cached], keep_alive [30s]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [index], type [fixed], size [6], queue_size [200]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [fetch_shard_store], type [scaling], min [1], size [12], keep_alive [5m]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [get], type [fixed], size [6], queue_size [1k]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [snapshot], type [scaling], min [1], size [3], keep_alive [5m]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [force_merge], type [fixed], size [1], queue_size [null]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [suggest], type [fixed], size [6], queue_size [1k]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [bulk], type [fixed], size [6], queue_size [50]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [warmer], type [scaling], min [1], size [3], keep_alive [5m]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [flush], type [scaling], min [1], size [3], keep_alive [5m]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [search], type [fixed], size [10], queue_size [1k]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [fetch_shard_started], type [scaling], min [1], size [12], keep_alive [5m]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [listener], type [fixed], size [3], queue_size [null]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [percolate], type [fixed], size [6], queue_size [1k]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [management], type [scaling], min [1], size [5], keep_alive [5m]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.threadpool [Yeti] creating thread_pool [refresh], type [scaling], min [1], size [3], keep_alive [5m]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.common.network configuration:
		
		lo
		        inet 127.0.0.1 netmask:255.255.255.255 scope:host
		        inet6 ::1 prefixlen:128 scope:host
		        UP LOOPBACK mtu:65536 index:1
		
		eth0
		        inet 192.168.1.159 netmask:255.255.255.0 broadcast:192.168.1.255 scope:site
		        inet6 fe80::a00:27ff:fecb:fa14 prefixlen:64 scope:link
		        hardware 08:00:27:CB:FA:14
		        UP MULTICAST mtu:1500 index:2
		
		06/25/2016 17:34:46 DEBUG org.elasticsearch.common.netty using gathering [true]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.client.transport [Yeti] node_sampler_interval[5s]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.netty.channel.socket.nio.SelectorUtil Using select timeout of 500
		06/25/2016 17:34:46 DEBUG org.elasticsearch.netty.channel.socket.nio.SelectorUtil Epoll-bug workaround enabled = false
		06/25/2016 17:34:46 DEBUG org.elasticsearch.client.transport [Yeti] adding address [{#transport#-1}{127.0.0.1}{localhost/127.0.0.1:9300}]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.transport.netty [Yeti] connected to node [{#transport#-1}{127.0.0.1}{localhost/127.0.0.1:9300}]
		06/25/2016 17:34:46 DEBUG org.elasticsearch.transport.netty [Yeti] connected to node [{Wiz Kid}{m_vra2t6TiuTtRkZk0BzzQ}{192.168.1.159}{localhost/127.0.0.1:9300}]
		06/25/2016 17:34:48 DEBUG com.whatever.App Ignoring IndexNotFoundException that was raised.
		06/25/2016 17:34:49 DEBUG com.whatever.App Attempting co reate the index called 'records-db'....
		06/25/2016 17:34:58 DEBUG com.whatever.App After adding record #1. res.isCreated=true  res.getId()=1
		06/25/2016 17:35:04 DEBUG com.whatever.App After adding record #2. res.isCreated=true  res.getId()=2
		06/25/2016 17:35:04 DEBUG com.whatever.App After adding record #3. res.isCreated=true  res.getId()=3
		06/25/2016 17:35:04 DEBUG com.whatever.App After adding record #4. res.isCreated=true  res.getId()=4
		06/25/2016 17:35:08 DEBUG org.elasticsearch.common.compress.lzf using decoder[VanillaChunkDecoder] 
		06/25/2016 17:35:08 DEBUG com.whatever.App After running search.  hits.length=4
		06/25/2016 17:35:09 DEBUG com.whatever.App main() finished


		   
