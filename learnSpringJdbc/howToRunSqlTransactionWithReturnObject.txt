How to use Spring-JDBC to Run a SQL Transaction that Returns an Object
----------------------------------------------------------------------


Assumptions
 A) You have some way of getting a reference to the DataSource object
    For example, 
       a) You have a singleton DaoUtilities class that returns a DataSource  *OR*
            final DataSource ds = DaoUtilities.getDataSource();
     
       b) Use the SpringAppContextUtils.getBean("my-bean-name")   *OR*
            // Get a reference to the mySqlDataSource bean
            final DataSource mySqlDataSource = (DataSource) SpringAppContextUtils.getBean("mysqlDataSource");
  
       c) You inject your spring bean into your class by using
            @Resource
            private DataSource mySqlDataSource
 

 b) Your database is turned on



Run a Sql Transaction that returns an object
--------------------------------------------
The following method will do that

   

    /**********************************************************************
     * runTransactionReturnResult()
     * 
     * Demonstration method to show how to run a SQL Transaction
     * and return an object from it
     ***********************************************************************/
    private String runTransactionReturnResult() throws Exception
    {
        logger.debug("runTransactionReturnResult() started");
        
        final DataSource ds = DaoUtilities.getDataSource();
        
        TransactionTemplate tt = new TransactionTemplate();
        tt.setTransactionManager(new DataSourceTransactionManager(ds));
        
        // This transaction will throw a TransactionTimedOutException after 60 seconds (causing the transaction to rollback)
        tt.setTimeout(60);
        
        // Tell the tt object that this method returns a String
        String sReturnedInfo = tt.execute(new TransactionCallback<String>()
        {
         
            @Override
            public String doInTransaction(TransactionStatus aStatus) 
            {
                
                try
                {
                    JdbcTemplate jt = new JdbcTemplate(ds);
                
                    // Run SQL Statement #1
                    jt.update("delete from junk where id <= 25");
                    
                    // Run SQL Statement #2
                    String sSql = "Insert into junk(id, name) values(?, ?)";
                    jt.update(sSql, 7, "Person #7");

                    // Run SQL Statement #2
                    String sSql2 = "Insert into junk(id, name) values(?, ?)";
                    jt.update(sSql2, 8, "Person #8");

                    // Run SQL Statement #3
                    String sSqlCount = "select count(id) from junk";
                    int iTotalRecords = jt.queryForObject(sSqlCount, Integer.class);

                    // The message should say that the table has only 2 records
                    String sMessage = "Transaction finished.  This table has " + iTotalRecords + " records";
                    return(sMessage);
                    
                    // Commit the transaction if I get to the end of this method
                }
                catch(Exception e)
                {
                    // Rollback the transaction by calling setRollbackOnly() or by throwing a RuntimeException
                    RuntimeException re = new RuntimeException("Exception occurred, rolling back transaction", e);
                    re.setStackTrace(e.getStackTrace() );
                    throw re;
                }
            }
        });
        
        
        logger.debug("runTransactionReturnResult() finished.  returns {}", sReturnedInfo);
        
        return(sReturnedInfo);
    }
    
    
Create a mysql table called 'junk'
----------------------------------
# Put this session in mysql's read-committed mode
SET SESSION tx_isolation='READ-COMMITTED';


# Create Junk table
create table junk
(
  id   int auto_increment not null,
  name varchar(50) not null,
  primary key(id)
);
  
  
# Insert some bogus records
delete from junk;
insert into junk(id, name) values(1, 'Adam');
insert into junk(id, name) values(2, 'Person 2');
insert into junk(id, name) values(3, 'Person 3');
insert into junk(id, name) values(4, 'Person 4');
commit;

select * from junk;