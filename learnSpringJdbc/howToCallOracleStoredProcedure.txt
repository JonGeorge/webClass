How to use Spring-JDBC to call an Oracle Stored Procedure
---------------------------------------------------------

import java.sql.Types;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import utilities.DaoUtillities;


private void addTestRecordsInDatabase(String aUser) throws Exception
 {
    logger.debug("Attempting to add test records for {}", aUser);
    
    // I assume that you have a DaoUtilities that can return a DataSource object [that points to Oracle Database]
    DataSource ds = DaoUtilities.getDatasource();
    
    // Setup the simpleCall object so that we can call an Oracle stored procedure
    SimpleJdbcCall simpleCall = new SimpleJdbcCall(ds)
                .withProcedureName("ADD_TEST_RECORD")
                .withoutProcedureColumnMetaDataAccess()
                .useInParameterNames("IN_USER")
                .declareParameters(new SqlParameter("IN_USER", Types.VARCHAR));
                
                
    simpleCall.setFunction(false);
    simpleCall.setReturnValueRequired(false);
    simpleCall.setAccessCallParameterMetaData(false);
    
    // Setup a map to hold the input parameters
    SqlParameterSource in = new MapSqlParameterSource("IN_USER", aUser);
    
    // Execute the stored procedure
    simpleCall.execute(in);
    
    logger.debug("Successfully added test records for {}", aUser); 
 }