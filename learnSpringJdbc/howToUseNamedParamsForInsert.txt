How to use named params for SQL Insert
--------------------------------------

Assumptions
 A) You have some way of getting a reference to the DataSource object
    For example, 
       a) You have a singleton DaoUtilities class that returns a DataSource  *OR*
            final DataSource ds = DaoUtilities.getDataSource();
     
       b) Use the SpringAppContextUtils.getBean("my-bean-name")   *OR*
            // Get a reference to the mySqlDataSource bean
            final DataSource mySqlDataSource = (DataSource) SpringAppContextUtils.getBean("mysqlDataSource");
  
       c) You inject your spring bean into your class by using
            @Resource
            private DataSource mySqlDataSource
 
 B) Your database is turned on
 
 

Procedure:  Setting named parameters using SqlParameterSource
-------------------------------------------------------------
Datasource ds = DaoUtilities.getDataSource();
final String sSql = "Insert into junk(id, name) values( :id, :name )";
NamedParameterJdbcTemplate npJdbcTemplate = new NamedParameterJdbcTemplate( ds );


// Store named parameters in a MapSqlParameterSource object
SqlParameterSource namedParameters = new MapSqlParameterSource();  
namedParameters.addValue("id", aId);  
namedParameters.addValue("name", aName);  
  
// Execute the SQL 
npJdbcTemplate.update(sSql, mappedParameters);  




Procedure:  Setting named parameters using a hashmap
----------------------------------------------------
Datasource ds = DaoUtilities.getDataSource();
final String sSql = "Insert into junk(id, name) values( :id, :name )";
NamedParameterJdbcTemplate npJdbcTemplate = new NamedParameterJdbcTemplate( ds );

// Store named parameters in a HashMap
Map mappedParameters = new HashMap();     
mapedParameters.put("id", aId);     
mappedParameters.put("name", aName);  

// Execute the SQL 
npJdbcTemplate.update(sSql, mappedParameters);  
