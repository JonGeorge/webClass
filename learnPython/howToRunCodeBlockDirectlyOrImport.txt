How to Run Python Code Directly or When Code is Imported
--------------------------------------------------------


Solution:  Check the __name__ variable
--------------------------------------
if __name__ == '__main__':
	print 'This program is being run by itself'
else:
	print 'I am being imported from another module'



Explanation
-----------
This block of code lets you execute code you want to run the module as a program
and not have it execute when someone just wants to import your module and call your functions themselves.	

If this module is imported from another module then  __name__ == "<module's name>"
If this module is run directly then __name__ == "__main__"



Sample Code
-----------
 1. Startup PyCharm
 2. Create a new python script called usingName.py
 3. Copy this to usingName.py
       
	#######################################################################
	# Filename:  usingName.py
	# Author:    <your name>
	#######################################################################
	# Purpose:
	#   Demonstrates code that is called directly vs code called from import
	#
	# Usage
	#   DOS> python usingName.py
	#   or
	#   DOS> python
	#
	#
	# Assumptions
	#   A) python is in the PATH
	#######################################################################
	import os
	import time
	
	gsScriptName = os.path.basename(__file__)
	print("%s has started as of %s" % (gsScriptName, time.strftime("%c")))
	
	
	version = 1.0
	
	
	def do_something():
	    print "do_something called"
	
	
	if __name__ == '__main__':
	    print("%s module called directly." % gsScriptName)
	else:
	    print("%s module is imported." % gsScriptName)
	
	
	print("%s has finished as of %s" % (gsScriptName, time.strftime("%c")))
 

 4. Run usingName.py from the command:
    DOS> cd /d c:\tools\intellij\workspace\pythonScripts
    DOS> python usingName.py
	usingName.py has started as of 05/27/16 10:43:00
	usingName.py module called directly.
	usingName.py has finished as of 05/27/16 10:43:00
 
 
 5. Run usingName with import usingName
    DOS> cd /d c:\tools\intellij\workspace\pythonScripts
    DOS> python
	Python 2.7.10 (default, May 23 2015, 09:40:32) [MSC v.1500 32 bit (Intel)] on win32
	Type "help", "copyright", "credits" or "license" for more information.
	>>> import usingName
	usingName.py has started as of 05/27/16 10:43:18
	usingName.py module is imported.
	usingName.py has finished as of 05/27/16 10:43:18
	>>> quit()        
	        
        
 6. Create another python script called moduleCaller.py
    a. Create a file called moduleCaller.py
    b. Copy this to moduleCaller.py

	#######################################################################
	# Filename:  moduleCaller.py
	# Author:    <your name>
	#######################################################################
	# Purpose:
	#   Demonstrates code that is called directly vs code called from import
	#
	# Usage
	#   DOS> python moduleCaller.py
	#   or
	#   DOS> python
	#
	#
	# Assumptions
	#   A) python is in the PATH
	#######################################################################
	import os
	import time
	import usingName
	
	gsScriptName = os.path.basename(__file__)
	
	print("%s has started as of %s" % (gsScriptName, time.strftime("%c")))
	
	print("usingName.version=%s" % usingName.version)
	sResponse = usingName.do_something()
	
	print("usingName.do_something() returns %s" % sResponse)
	
	print("%s has finished as of %s" % (gsScriptName, time.strftime("%c")))
	
	

 7. Run the module caller
    DOS> python moduleCaller.py
	usingName.pyc has started as of 05/27/16 10:45:05
	usingName.pyc module is imported.
	usingName.pyc has finished as of 05/27/16 10:45:05
	moduleCaller.py has started as of 05/27/16 10:45:05
	usingName.version=1.0
	do_something called
	usingName.do_something() returns None
	moduleCaller.py has finished as of 05/27/16 10:45:05

    NOTE:
      1) *First* the usingName module is imported and called
      2) *Second* the moduleCaller starts
