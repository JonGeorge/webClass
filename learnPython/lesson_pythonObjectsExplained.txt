Lesson:  Python Objects Explained
---------------------------------

References
----------
http://effbot.org/zone/python-objects.htm


Lesson
------
All python objects have this:
 1) A unique identity.  To see the value, use id(x)
 2) A type.  To view the type, use type(x)
 3) some content
 4) zero or more methods
 5) zero or more names
 
 
You cannot change the identity
You cannot change the type
Some objects allow you to change their content (w/o changing the id or type).


Names
-----
Names live in namespaces (a dictionary of key=name value=object reference)
Assignment statements modify namespaces (not objects)

Example:
  name = 10
You're adding the name "name" to your local namespace *and*
Making this object refer to an integer object containing the value 10


If the name is already present, the assignement replaces the original name
  name = 10
  name = 20
The 2nd all replaces the oname, making it point to an integer object containing the value 20.
The original "10" object isn't affected by this operation.

In contarct,
  name=[]
  name.append(1)
What happended:
 1) You're first adding the name "name" to the local namespace, making it refer to an empty list
    This modifies the namespace.
 2) Calling .append() telling it to append an integer object to itself.
    This modifies the content of the list object.  But, it doesn't affect the namespace
    It doesn't touch the integer object
    
