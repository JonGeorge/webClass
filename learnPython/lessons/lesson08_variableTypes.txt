Lesson:  Variables Types
------------------------
In Python, there are 5 standard variable types:
 1) Number
 2) String
 3) List        (collection of stuff)
 4) Dictionary  (key/value pairs)
 5) Tuple       (read-only collection of stuff)
 6) Booleans    (hold true/false)
 7) None        (represents the null value)
 

Numbers  
-------
Numbers are created when you assign a value
      counter = 100        # Number is an integer
      totalMoney = 400.02  # Number is a floating point




Strings
-------
Strings are a series of character between quotation marks
       name = "John"
       item = 'shoe'
       
Some notes about strings:
 a) The quotes can be single-quote or double-quote
 
 b) You can get a slice of a string using square brackets
       str = 'Hello World!'
       print("str[0]=%s" % str[0])         # Prints first character of the string       -- "h"
       print("str[2:5]=%s" % str[2:5])     # Prints characters starting from 3rd to 5th -- "llo" 

 c) Largest string you can create is really limited by how much memory you have
    On a 64-bit operating system, if you have 64 GB of RAM, a Python string could hold 63 GB 
        
 d) If you do *not* want to expand \n to a newline or \t to a tab
    Then create a string in "raw" mode
       sRawString = r"In this string, the \n is not converted to a new line"
       print("sRawString=%s" % sRawString)
    
 e) You can create a multiple-line string using the triple quote:
       sMultiLineString = """
       This is an example of a string in the heredoc syntax.
       This text can span multiple lines
       This is the last line of a string
       """
       print("sMultiLineString=%s" % sMultiLineString)       


        Handy:  Create a multi-line string and evaluate variables
        ---------------------------------------------------------
        Suppose you want to create a multi-line string and plug-in variables.
        
            Dear {fullname},
          
              The license for package {packageName} has expired as of {expirationDate}.
          
              Please call us at 800-555-1234 to resolve this issue.
          
          
          
         Here is the Python Code:
          
            # Create the template
               sTemplate = """
                Dear {fullname},
              
                  The license for package {packageName} has expired as of {expirationDate}.
              
                  Please call us at 800-555-1234 to resolve this issue.
               """
              
              # Get the dictionary with data
              smallDict = {'fullname':       'Mr. John Smith',
                           'packageName':    'MS Office 365',
                           'expirationDate': '05/01/2016'
                           }

            # Apply the dictionary to the template
            # NOTE:  The double-asterisk is used to pass-in dictionary as arguments                     
              sFinalMesg = sTemplate.format(**smallDict)




Lists
-----
Lists contain multiple items separated by comma and surrounded by square brackets [ ]
You can access values within a list using the [] and [:]
    myList = [ 'abcd', 786 , 2.23, 'john', 70.2 ]         
    print list          # Prints complete list
    print list[0]       # Prints first element of the list
    print list[1:3]     # Prints elements starting from 2nd till 3rd 

Lists can mutable:
  -- You can add items to lists
  -- You can remove items from lists
  -- Lists are slower than tuples




Dictionaries
------------
Python's dictionaries are kind of hash table type.  They consist of key/value combinations.
A dictionary key can be any python type but are usually numbers or strings.
A dictionary value can be anything
Dictionaries are enclosed within curly braces { }

    tinydict = {
                'name': 'john',
                'code':6734, 
                'dept': 'sales'
                }


    print dict['one']       # Prints value for 'one' key
    print dict[2]           # Prints value for 2 key
    print tinydict          # Prints complete dictionary



Tuples
------
Tuples can be thought of as read-only lists.  
A tuple consists of a number of values separated by comma and enclosed within parentheses.
    mytTuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )
    
    print tuple           # Prints complete list
    print tuple[0]        # Prints first element of the list
    print tuple[1:3]      # Prints elements starting from 2nd till 3rd 

Tupes are immutable: 
 -- You cannot add items to a tuple
 -- You cannot remove items from a tuple
 -- You can use the "in" operator to check if an element exists within a tuple 
 -- Tuples are *faster* than lists
 -- Tuples make your code safer (as the list is read-only)




Booleans
--------
Boolean can hold 2 possibles values:  True or False

    showStatus = false   # Invalid (false is not capitalized)
    showStatus = False   # Valid False  (False has a capital F)
    showStatus = 0       # Valid False
    showStatus = None    # Valid False
    
    
    showStatus = True    # Valid True  (true has a capital T)
    showStatus = 1       # Also considered True
    
    
    if (showStatus == True):
        # showStatus holds True....so, show the status
        print("showStatus holds %s" % showStatus)
        print("Status is this....that....otherthing")
    
    else:
        # showStatus holds False....so, don't show the status
        print("showStatus holds %s" % showStatus)




None
----
None is used to represent the absence of a value
-- Often used when default arguments are not passed to a function
-- If a function has no return values, then it returns None


Sampe Python subroutine that returns None:
    #############################################
    # printinfo1()
    # -- This function takes-in two arguments and prints them
    #
    # This function returns nothing
    #############################################
    def printinfo1(name, age):
        print("Name=%s  Age=%s" % (name, age))
    
        # Exit the function and return nothing
        return
    
    
    
    sReturnedValue = printinfo1("john", 44)
    print("sReturnedValue=%s" % sReturnedValue)
    
    
    Generated Output is:
        Name=john  Age=44
        sReturnedValue=None    
    



Sample Python subroutine with arguments that default to None
    #############################################
    # printinfo1()
    # -- This function takes-in two arguments and prints them
    #
    # This function returns nothing
    #############################################
    def printinfo1(name=None, age=None):
        print("Name=%s  Age=%s" % (name, age))
    
        # Exit the function and return nothing
        return
    
    
    
    sReturnedValue = printinfo1(name = "john")
    print("sReturnedValue=%s" % sReturnedValue)


    Generated Output is:
        Name=john  Age=None
        sReturnedValue=None
    
    




