Sample Bash Script to Restart an RDA on a Platform
--------------------------------------------------

  

#!/bin/bash
#######################################################
# Filename:  rdaChecker.sh
#######################################################
# Purpose:
#   If certain rdas are not running, then attempt to start them
#
# Design:
#   1) Verify command-line arguments
#   2) Get the status of the rda-container
#   3) If the rda-container status it not "RUNNING" or "STARTING"
#      Then, start it
#
# Usage:
#   1) Upload this script to the rda_deployer_server
#   2) Make sure this script is executable
#      unix> chomd ugo+x ./rdaChecker.sh
#   3) Run the script to make sure this container is up
#      unix> ./rdaChecker.sh --container-name="app1"
#
# Assumptions:
#   1) This script must be located on the same server as the rda_deployer_server
#   2) To get the list of containers and their status
#         /var/bdp/bin/rda-containers list
#   3) To start the RDA use, this command
#         /var/bdp/bin/rda-containers start -i ${containerId}
#
# History:
#   Create Date:  09/27/2019
#######################################################
CONTAINER_NAME=""

readonly SCRIPT_ARGS="$@"                            # Holds the command line arguments
readonly SCRIPT_NAME=`basename $0`                   # Holds the name of this bash script
readonly TMP_FILE_PATH=/tmp/${SCRIPT_NAME}.$$.tmp    # Holds the path of temporary files

containerStatus=""


#######################################################
# main()
#
#######################################################
function main()
{
  # S C R I P T        S T A R T S       H E R E
  echo "${SCRIPT_NAME} started as of `date`"

  # Part 1:  Parse Command Line Arguments
  parseCommandLineArguments

  # Part 2:  Backup current production database
  restartRdaIfNotRunning "$CONTAINER_NAME"

  if [ $? -ne 0 ]; then
     die "I failed to start this RDA container:  ${aContainerName}"
  fi

  # S C R I P T         E N D S        H E R E
  echo -e "${SCRIPT_NAME} finished successfully as of `date`"

  # Return an exit status of zero to indicate the program finished successfully
  exit 0
}


#######################################################
# cleanup()
#
# This method is always called before the script ends
#######################################################
function cleanup()
{
  # Clean-up the tmp file
  rm -f $TMP_FILE_PATH
}

# Tell bash to call cleanup() when the program ends
# NOTE:  Whether the program crashes or succeeds, this method is the last method called
trap cleanup EXIT


#######################################################
# displayUsage()
# -- Display the usage statement
#######################################################
function displayUsage()
{
  # Display a multi-line-string with the usage statement
  cat << EOF

   ${SCRIPT_NAME} --container-name=<name of the RDA container>

EOF
}


#######################################################
# parseCommandLineArguments()
#
# Examine the command line arguments
# Verify that the command line arguments are valid
# If valid, set the global vars
#######################################################
function parseCommandLineArguments()
{
  CONTAINER_NAME=""

  local arg=""

  # Parse Command Line Arguments
  # NOTE:  Use "{SCRIPT_ARGS[*]}" so that arg values can be in double quotes
  for arg in "${SCRIPT_ARGS[*]}" ; do
    case $arg in
        --container-name=*)
           CONTAINER_NAME=`echo $arg | sed 's/[-a-zA-Z0-9]*=//'`
           shift 1
           ;;
    esac
  done


  if [[ "$CONTAINER_NAME" == "" ]]; then
     # The user passed-in an empty string for --container-name
     displayUsage
     echo "The --container-name value must be specified"
     exit 1
  fi

  echo -e "\tCommand line arguments were successfully parsed:"
  echo -e "\tCONTAINER_NAME=${CONTAINER_NAME}"
}


#######################################################
# restartRdaIfNotRunning()
#  If the RDA container is not running then
#     While (containerStatus != 'started' and loop count < 3)
#       a) Start the RDA container
#       b) Wait until the status is either started or failed
#       c) If the status is started then break out of the loop
#
#######################################################
function restartRdaIfNotRunning()
{
   local aContainerName=$1

   echo -e "\nrestartRdaIfNotRunning() started for aContainerName=${aContainerName}"

   # Get the RDA status
   getRdaStatus "${aContainerName}"

   if [ "${containerStatus}" == "RUNNING" ]; then
     echo -e "\tThis RDA container is already running:  ${aContainerName}  There is nothing to do."
     return 0
   fi

   # This container is not running
   echo -e "\tThis RDA container is not running:  aContainerName=${aContainerName}"


   loopCount=1
   wasRdaStarted=0
   while [[ $loopCount -lt 3 ]] && [[ $wasRdaStarted -eq 0 ]]
   do
       # Start the RDA container
       echo -e "\t\tloopCount=${loopCount}  "
       startRdaContainer "$aContainerName"

       # Keep getting the container status until it's 'started' or 'failed'
       # NOTE:  The conatiner status is stored in ${containerStatus}
       waitUntilContainerStartsOrTimeout "$aContainerName"

       if [ "${containerStatus}" == "RUNNING" ]; then
          # RDA was started -- so break out of this loop
          echo -e "\t\tRDA was successfully started"
          wasRdaStarted=1
          break
       fi

       loopCount=$((loopCount+1))
   done

   echo -e "\tAfter loop:  loopCount=${loopCount}  wasRdaStarted=${wasRdaStarted}"

   if [ $wasRdaStarted -eq 0 ]; then
      # RDA failed to start after 3 tries
      echo -e "\tI failed to start this container:  $aContainerName"
      return 1
   else
      echo -e "\tI successfully started this container:  $aContainerName"
      return 0
   fi
}


############################################################
# waitUntilContainerStartsOrTimeout()
#
# Loop until either (container status is RUNNING or 10 minutes has passed
#   a) Get the rda container status
#   b) If the rda container status == RUNNING, then break out of loop
############################################################
function waitUntilContainerStartsOrTimeout
{
  local aContainerName=$1

  echo -e "\nwaitUntilContainerStartsOrTimeout()  aContainerName=${aContainerName=}"

  local runtime="10 minute"

  # Set the endtime to be 10 minutes in the future
  local endTime=$(date -ud "$runtime" +%s)
  local endTimeHumanReadable=`date -d@"${endTime}"`
  echo -e "\tI will stop waiting at ${endTimeHumanReadable}"

  while [[ $(date -u +%s) -le $endTime ]]
  do
    # Get the RDA status
    getRdaStatus "${aContainerName}"

    if [ ${containerStatus} == "RUNNING" ]; then
      echo -e "\tThis RDA container is now running:  ${aContainerName}"
      return
    fi

    # Wait 30 seconds
    echo -e "\tSleeping for 30 seconds"
    sleep 30
  done


  echo -e "\tTimeout.  The container did not startup in time"

}



############################################################
# getRdaStatus()
# 1) Run the rda-container list command
# 2) Get the status from the output
# 3) Store the status in the global variable ${containerStatus}
############################################################
function getRdaStatus()
{
  local aContainerName=$1

  echo -e "\ngetRdaStatus()  aContainerName=${aContainerName}"

  # Run the rda-containers list command to get the status of the container
  output=`/var/bdp/bin/rda-containers list | sort | grep -i "${aContainerName}"`

  if [ $? -ne 0 ]; then
    # Error the RDA container is not found in the list of contains
    echo -e "\tCritical Error:  I could not find this RDA container in the list of containers:  ${aContainerName}"
    exit 1
  fi

  # Get the *last* word from the $output string  (the last word should hold the status)
  local status=`echo $output | grep -oE '[^[:space:]]+$' `
  echo -e "\tstatus=$status"

  # Set the global variable containerStatus
  containerStatus=${status}
}


############################################################
# startRdaContainer()
#  1) Get the id of the container name
#  2) Start that container id
############################################################
function startRdaContainer()
{
  local aContainerName=$1
  local output=""
  local containerId=0

  echo -e "\nstartRdaContainer() started  aContainerName=${aContainerName}"


  # Run the rda-containers list command to get the id of this container
  output=`/var/bdp/bin/rda-containers list | sort | grep -i "${aContainerName}"`

  if [ $? -ne 0 ]; then
    # Error the RDA container is not found in the list of contains
    echo -e "\tCritical Error:  I could not find this RDA container in the list of containers:  ${aContainerName}"
    exit 1
  fi

  # Get the *first* word from the $output string  (the first word should hold the id)
  local containerIdAsString=`echo $output | grep -oE '[0-9]+' `

  # Convert the containerId from string to number (by adding zero)
  containerId=$(( ${containerIdAsString} + 0 ))

  if [ $containerId -le 0 ]; then
    echo -e "\tCritical Error:  I failed to get the containerId from this output:  ${output}"
    exit 1
  fi

  # Start the RDA (using rda-containers start)
  echo -e "\tStarting container ${containerId}"
  echo -e "\t/var/bdp/bin/rda-containers start -i ${containerId} "
  /var/bdp/bin/rda-containers start -i ${containerId}

  if [ $? -ne 0 ]; then
    # An occurred starting the RDA container -- show a warning
    echo -e "\tCritical Error:  The rda-containers start command returned a non-zero error code."
    exit 1
  fi

  echo -e "startRdaContainer() finished  aContainerName=${aContainerName}"
}





# Run the main() function
main
