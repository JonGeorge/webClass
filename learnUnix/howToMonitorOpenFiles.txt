How to Monitor Open Files
-------------------------

Suppose, you want to monitor the number of open files that your jetty unix user account is using.


Part 1:  Setup the script and generate results (writing to /tmp/monitor.log)
----------------------------------------------------------------------------
 1. Create the /tmp/monitor.sh script
    unix> vi /tmp/monitor.sh
 
    #!/bin/bash
    ##########################################################
    # Filename:  monitor.sh
    ##########################################################
    # Purpose:
    #   Continuously monitor the number of open files 
    #   used by a specific user
    #
    # Usage:
    #   unix> cd /path/to/this/script
    #   unix> chmod u+x ./monitor.sh
    #   unix> nohup sh ./monitor.sh > /tmp/monitor.log 2>&1 &
    ##########################################################
    readonly USERNAME=username
    
    while [ 1 ];
    do
       count1=`lsof -u $USERNAME | awk '{print $NF}' | wc -l`
       count2=`lsof -u $USERNAME | awk 'BEGIN { total=0; } $4 ~ /^[0-9]/ { total = total + 1 } END { print total}' `

       echo `date`  count1=$count1  count2=$count2
       sleep 1
    done

 
 2. Make the script executable
    unix> chmod ugo+x /tmp/monitor.sh
    
 3. Run the script 
    unix> nohup /tmp/monitor.sh > /tmp/monitor.log 2>/dev/null  &
    
 4. Watch the results
    unix> tail -f /tmp/monitor.log
    


Part 2:  Examine the results (get highest, lowest, and average)
---------------------------------------------------------------
 1. Display the highest count1 found
    unix> cat /tmp/monitor.log | awk 'BEGIN { highestCount1=0; highestLine=""; } { if (match($0, /count1=([0-9]+)/,m)) { if (m[1] > highestCount1) { highestCount1=m[1]; highestLine=$0; }}  }  END { print "highest count is" , highestCount1, "....", highestLine }'


 2. Display the lowest count1 found
    unix> cat /tmp/monitor.log | awk 'BEGIN { lowestCount1=-1; lowestLine=""; } { if (match($0, /count1=([0-9]+)/,m)) { if ((lowestCount1 == -1) || (m[1] < lowestCount1))  { lowestCount1=m[1];  lowestLine=$0; }}  }  END { print "lowest count is" , lowestCount1, "....", lowestLine }'
    
    
 3. Display the average count1 found
    unix> cat /tmp/monitor.log | awk 'BEGIN { iRecordCount=0; iRecordSum=""; } { if (match($0, /count1=([0-9]+)/,m)) { iRecordCount++; iRecordSum = iRecordSum + m[1]; }}  END { printf("Average count1 is %2.2f\n" , (iRecordSum/iRecordCount)) }'






    



