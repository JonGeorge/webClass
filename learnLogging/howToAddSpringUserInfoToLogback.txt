How to Add Spring User Info to your Logging (using Logback)
-----------------------------------------------------------

Problem:  You are debugging a problem in your web app 
          But, your log file does not show the name of the user that caused the problem
          -- It would be really helpful to have this user information on each line of the log file



Solution #1: Extend PatternLayout class
---------------------------------------
 1. Add this class:  UserConverter
 
        package app1.utilities;
        
        import ch.qos.logback.classic.pattern.ClassicConverter;
        import ch.qos.logback.classic.spi.ILoggingEvent;
        import org.springframework.security.core.Authentication;
        import org.springframework.security.core.context.SecurityContextHolder;
        
        /**
         * Created by adam on 2/2/2017.
         */
        public class UserConverter extends ClassicConverter
        {
            @Override
            public String convert(ILoggingEvent event)
            {
                Authentication auth = SecurityContextHolder.getContext().getAuthentication();
                if (auth != null) {
                    return auth.getName();
                }
                return "NO_USER";
            }
        }



 2. Add this class:  SessionConverter

        package app1.utilities;
        
        import ch.qos.logback.classic.pattern.ClassicConverter;
        import ch.qos.logback.classic.spi.ILoggingEvent;
        import org.springframework.web.context.request.RequestAttributes;
        import org.springframework.web.context.request.RequestContextHolder;
        
        /**
         * Created by adam on 2/2/2017.
         */
        public class SessionConverter extends ClassicConverter
        {
            @Override
            public String convert(ILoggingEvent event)
            {
                RequestAttributes attrs = RequestContextHolder.getRequestAttributes();
                if (attrs != null) {
                    return attrs.getSessionId();
                }
                return "NO_SESSION";
            }
        } 
 
 
 
 3. Add this class:  PatternLayoutWithUserContext
 
        package app1.utilities;
        
        import ch.qos.logback.classic.PatternLayout;
        
        /**
         * Created by adam on 2/2/2017.
         */
        public class PatternLayoutWithUserContext extends PatternLayout
        {
            static
            {
                PatternLayout.defaultConverterMap.put("user", UserConverter.class.getName());
                PatternLayout.defaultConverterMap.put("session", SessionConverter.class.getName());
            }
        }



 4. Update your logback.xml    to show your new %user and %session variables              

        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>
        
        <configuration debug="true">
        
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder name="enc" class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                    <layout class="app1.utilities.PatternLayoutWithUserContext">
                        <param name="Pattern" value="%d{MM/dd/yyyy HH:mm:ss} %-5level %c [%user %session] - %msg%n" />
                    </layout>
                </encoder>
            </appender>
        
            <logger name="org.springframework" level="INFO" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
        
            <logger name="app1" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
        
            <root level="WARN">
                <appender-ref ref="CONSOLE"/>
            </root>
        
        </configuration>





Solution #2: Using log4j
------------------------
 1) Create a filter that works on all requests
    NOTE:  The filter should have this
    
       import org.apache.log4j.MDC
    
    
       in the filter code:
          try
          {
           MDC.put("username"), getUsername() );
          }
          finally
          {
           MDC.clear()            
           }
           
           
 2) Adjust your logger to display the username
  
   pattern should have  %X{username}
   
   
Solution #3:  Using SLF4j
-------------------------
package com.javacodegeeks.examples.logbackmdcexample;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;

import org.slf4j.MDC;

@WebFilter( filterName = "mdcFilter", urlPatterns = { "/*" } )
public class MDCFilter implements Filter {

    @Override
    public void destroy() {

    }

    @Override
    public void doFilter( final ServletRequest request, final ServletResponse response, final FilterChain chain )
        throws IOException, ServletException {

        // Get the parameter value.
        final String parameter = request.getParameter( "clientName" );

        // Put it in the MDC map.
        MDC.put( "clientName", parameter );

        try {
            chain.doFilter( request, response );
        } f
        inally {
            // When the control returns to the filter, clean it.
            MDC.remove( "clientName" );
        }
    }

    @Override
    public void init( final FilterConfig filterConfig ) throws ServletException {

    }
}
          
