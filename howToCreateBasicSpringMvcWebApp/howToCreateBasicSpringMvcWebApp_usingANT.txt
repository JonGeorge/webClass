How to setup a basic Spring MVC web application using ANT
---------------------------------------------------------


Assumptions:  
 A) You have Eclipse installed
 B) You have ANT installed

 
Procedures
----------
1. Create your "mywebapp1" Maven project in Eclipse
    a) Startup Eclipse
       If you see the "Welcome" page, press the "X" next to it -- to remove the Welcome page
	   If prompted for your workspace, use c:\tools\eclipse\workspace
	   
	b) Pull File / New / Project...
        -- Choose Web -> Dynamic Web Project
		-- Press Next
		
	c) In the next screen
		Project Name:  mywebapp1
		Check "Use the default workspace"
		Press "New Runtime..."
	   
		1) On New Server Runtime Environment
			 -- Select Apache Tomcat v7.0
			 -- Press "Next"
			 
		2) On Tomcat Server
			 -- Under Tomcat installation directory:  c:\tools\apache-tomcat-7.0.59   
				*OR* press "Browse" and browse to Computer -> Local Diskc (C:) -> tools -> apache-tomcat-7.0.59   
			 -- Press "Finish"
			 
	d) Back on Dynamic Web Project screen
	   Press "Next"
	   
	e) On the Java screen
	   Press "Next"
	   
	f) For the Web Module screen
	   Context root:         mywebapp1
	   Content directory:    WAR
	   Check the checkbox to "Generate web.xml deployment desciptor"
	   Press "Finish"
		
		
	   
		   
2. Download and install your Java JAR files
    a) Download the spring distribution zip file  (which contains all of the spring jars)
       1. http://repo.spring.io/release/org/springframework/spring/4.1.1.RELEASE/spring-framework-4.1.1.RELEASE-dist.zip
       2. Save the file to c:\vault
       
    b) Install the spring jar files to your Project's WAR / WEB-INF / lib directory
       1. Right-click on c:\vault\spring-framework-4.1.1.RELEASE-dist.zip -> 7zip -> Extract Here
       2. Go to C:\vault\spring-framework-4.1.1.RELEASE\libs
       3. Drag & drop the following JAR files to your mywebapp1 -> WAR -> WEB-INF -> lib 

            spring-aop-4.1.1.RELEASE.jar
            spring-beans-4.1.1.RELEASE.jar
            spring-context-4.1.1.RELEASE.jar
            spring-core-4.1.1.RELEASE             
            spring-expression-4.1.1.RELEASE.jar
            spring-jdbc-4.1.1.RELEASE.jar
            spring-tx-4.1.1.RELEASE.jar
            spring-webmvc-4.1.1.RELEASE.jar
            spring-web-4.1.1.RELEASE.jar
                   
    c) Install jstl-1.2.jar to your Project's WAR / WEB-INF / lib directory
       1. Go to http://mvnrepository.com/artifact/javax.servlet/jstl/1.2
       2. Click "Download (JAR)"
       3. Save the file to your c:\vault
       4. Drag & Drop jstl-1.2.jar to your Project's WAR / WEB-INF / lib directory
      
    d) Install logback-core-1.1.3.jar to your Project's WAR / WEB-INF / lib directory
       1. Go to http://mvnrepository.com/artifact/ch.qos.logback/logback-core/1.1.3
       2. Click "Download (JAR)"
       3. Save the file to your c:\vault
       4. Drag & Drop logback-core-1.1.3.jar to your Project's WAR / WEB-INF / lib directory

    e) Install logback-classic-1.1.3 jar to your Project's WAR / WEB-INF / lib directory
       1. Go to http://mvnrepository.com/artifact/ch.qos.logback/logback-classic/1.1.3
       2. Click "Download (JAR)"
       3. Save the file to your c:\vault
       4. Drag & Drop logback-classic-1.1.3.jar to your Project's WAR / WEB-INF / lib directory
         
    f) Install aopalliance-1.0.jar to your Project's  WAR / WEB-INF / lib directory
       1. Go to http://mvnrepository.com/artifact/aopalliance/aopalliance/1.0
       2. Click "Download (JAR)"
       3. Save the file to your c:\vault
       4. Drag & Drop aopalliance-1.0.jar to your Project's WAR / WEB-INF / lib directory
       
    g) Install slf4j-api-1.7.5.jar to your Project's  WAR / WEB-INF / lib directory
       1. Go to http://mvnrepository.com/artifact/org.slf4j/slf4j-api/1.7.5
       2. Click "Download (JAR)"
       3. Save the file to your c:\vault
       4. Drag & Drop slf4j-api-1.7.5.jar to your Project's WAR / WEB-INF / lib directory

    h) Install jcl-over-slf4j-1.7.5 to your Project's  WAR / WEB-INF / lib directory
       1. Go to http://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j/1.7.5
       2. Click "Download (JAR)"
       3. Save the file to your c:\vault
       4. Drag & Drop jcl-over-slf4j-1.7.5 to your Project's WAR / WEB-INF / lib directory
       
    i) Install the Tomcat jar files into your project's documents / tomcat-7.0.59 / lib directory
       1. Right-click on mywebapp1 -> new -> folder
          documents/tomcat-7.0.59/lib
           
       2. Right-click on your new lib directory -> Buildpath -> Use as Source folder
       3. Browse to C:\tools\apache-tomcat-7.0.55\lib
       4. Drag and drop all of the jar files to your mywebapp1 -> documents -> tomcat-7.0.59 -> lib
        
     
        

3. Create your WAR / WEB-INF / classes directory
    a) Browse to mywebapp1 -> WAR -> WEB-INF
    b) Right-click on WEB-INF -> New -> Folder
       Folder name:  classes
	   Press "Finish"
	c) Right-click on your new classes directory -> Build Path -> Use as Source Folder
       
4. Create your WAR / WEB-INF / jsp directory
    a) Browse to mywebapp1 -> WAR -> WEB-INF
    b) Right-click on WEB-INF -> New -> Folder
       Folder name:  jsp
	   Press "Finish"

5. Create your WAR / WEB-INF / spring directory
    a) Browse to mywebapp1 -> WAR -> WEB-INF
    b) Right-click on WEB-INF -> New -> Folder
       Folder name:  spring
	   Press "Finish"
	   
6. Update your web.xml to load Spring
    a) Browse to webapp1 -> WAR -> WEB-INF -> web.xml
	
	   The original web.xml probably looks like this:
	   
		<?xml version="1.0" encoding="UTF-8"?>
		<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
		  <display-name>mywebapp1</display-name>
		  <welcome-file-list>
			<welcome-file>index.html</welcome-file>
			<welcome-file>index.htm</welcome-file>
			<welcome-file>index.jsp</welcome-file>
			<welcome-file>default.html</welcome-file>
			<welcome-file>default.htm</welcome-file>
			<welcome-file>default.jsp</welcome-file>
		  </welcome-file-list>
		</web-app>
	
	
		Change it to this:
		NOTE:   The file must *start* with <?xml...... There can be no loading spaces
		
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">

	<display-name>mywebapp1</display-name>
	
	<welcome-file-list>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<!-- Configure ContextLoaderListener to use XML files as configuration. -->
	<context-param>
	<description>Type of context to load - spring</description>
	<param-name>contextClass</param-name>
	<param-value>org.springframework.web.context.support.XmlWebApplicationContext</param-value>
	</context-param>


	<!-- Configure the application context XML file locations.  -->
	<context-param>
	<description>Location of context config file(s)</description>
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/spring/applicationContext.xml</param-value>
	</context-param>


	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/dispatch-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	  
</web-app>

	
7. Create your applicationContext.xml file
    mywebapp1 -> WAR -> WEB-INF -> spring -> new -> file
	File name:  applicationContext.xml
	Press "Finish"
	
	Copy this into your new file
		
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:aop="http://www.springframework.org/schema/aop" 
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:jee="http://www.springframework.org/schema/jee" 
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop.xsd
                            http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/jee
                            http://www.springframework.org/schema/jee/spring-jee.xsd 
                            http://www.springframework.org/schema/mvc
                            http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-xsd">

       
       <!-- Autodetect classes and register the corresponding beans -->
       <context:component-scan  
       		base-package="app1"
       		use-default-filters="true">
       	
       		<context:exclude-filter 
       			type="annotation"
       			expression="org.springframework.stereotype.Controller"/>
       	</context:component-scan>
       
       
       
        <!-- Allow the use of @Autowire and @Required -->
        <context:annotation-config />
        
       
        <!-- Map the relative address for certain locations -->
        <mvc:resources
        	mapping="/resources/**"
        	location="/resources/" />
       
       
        <!--
                This will automatically locate any and all property files you have
                within your classpath, provided they fall under the META-INF
                directory. The located property files are parsed and their values can
                then be used within application context files in the form of
                ${propertyKey}.
        -->
        <context:property-placeholder location="classpath*:*.properties" />
        
        
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        	<property name="order" value="2" />
        	<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        	<property name="prefix" value="/WEB-INF/jsp/" />
        	<property name="suffix" value=".jsp" />
        </bean>
         
</beans>
		
	
	
	
	
8. Create this file:  dispatch-servlet.xml
    mywebapp1 -> WAR -> WEB-INF -> spring -> new -> file
	File name:  dispatch-servlet.xml
	Press "Finish"
	
	Copy this into your new file
		
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:aop="http://www.springframework.org/schema/aop" 
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:jee="http://www.springframework.org/schema/jee" 
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop.xsd
                            http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/jee
                            http://www.springframework.org/schema/jee/spring-jee.xsd 
                            http://www.springframework.org/schema/mvc
                            http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-xsd">

		<!-- Autodetect classes and register the beans -->
		<!-- This context:component-scan should built upon the one 
			 that was already don in the applicationContext.  The goal is to add in the @Controller
			 annotations to the context since Spring MVC requires that those beans are
			 registered at this level.
			 
			 If context:component-scans a file, then it will overwrite anything
			 that wdone for that file in the applicationContext's component-scan.
			 So, you should use point to the package that was previously ignored,
			 or use the resource-pattern property to only scan the corret Java files
			 
			 Be careful if you use the filter tags within the component-scan
			 because that doesn't prevent the file from being scanned, and 
			 will likely cause you to overwrite something that you didn't mean to.
		 -->
		 <context:component-scan
				base-package="app1"
				use-default-filters="false">
				
				<!-- Make sure that the use-default filters property is set to false.
					 When a file is scanned with the @Controller annotation,
					 it should be included in the context at this point. -->
				<context:include-filter
					type="annotation"
					expression="org.springframework.stereotype.Controller" />
					
				<context:include-filter
					type="annotation"
					expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
		 </context:component-scan>
								  
								  
		<!-- Registers the DefaultAnnotationhandlerMapping and AnnotationMethodHandlerAdapter beans
			(that are required for Spring MVC to dispatch requests to @Controllers -->
		<mvc:annotation-driven />


		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="order"     value="2" />
			<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
			<property name="prefix"    value="/WEB-INF/jsp/" />
			<property name="suffix"    value="" />
		</bean>                       
						
</beans>            
	         
	
	
	
	
	


9. Create this file:  logback.xml
	a) Browse to mywebapp1 -> WAR -> WEB-INF -> classes
	b) Right-click on classes -> New -> File
	   filename:  logback.xml
	   
	c) Right-click on logback.xml -> Open With -> Text Editor
	   Copy this contents to your file
	
<?xml version="1.0" encoding="windows-1252" ?>
<configuration>
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{MM/dd/yyyy HH:mm:ss} %c %m%n</pattern>
		</encoder>
	</appender>
	
	
	<logger name="org.springframework" level="DEBUG" additivity="false">
		<appender-ref ref="CONSOLE"/>
	</logger>
	
	<logger name="app1" level="DEBUG" additivity="false">
		<appender-ref ref="CONSOLE"/>
	</logger>	
	
	<root level="DEBUG">
		<appender-ref ref="CONSOLE"/>
	</root>
	
</configuration>





10. Create your UserInfo object
    a) Right-click on mywebapp1 -> New -> Package
	   Name:  app1.model
	   
	b) Right-click on app1.model -> New -> Class
	   Name:  UserInfo
	   Press "Finish"	
			   
	b) Copy this java code to UserInfo.java
		   
package app1.model;

public class UserInfo
{
	private boolean isAdministrator = false;
	private String username;
	
	
	public UserInfo()
	{
		
	}
	
	public boolean getIsAdministrator()
	{
		return this.isAdministrator;
	}
	
	public void setIsAdministrator(boolean aValue)
	{
		this.isAdministrator = aValue;
	}
	
	public String getUserName()
	{
		return this.username;
	}
	
	public void setUserName(String aUserName)
	{
		this.username = aUserName;
	}
}

	

	
	
11. Create your WelcomeController
    a) Right-click on mywebapp1 -> New -> Package
	   Name:  app1.controllers
	   
	b) Right-click on app1.controllers -> New -> Class
	   Name:  WelcomeController
	   Press "Finish"	
			   
	c) Copy this java code to WelcomeController.java
	
package app1.controllers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import app1.model.UserInfo;


@Controller
public class WelcomeController 
{
	private final static Logger logger = LoggerFactory.getLogger(WelcomeController.class);
	 
	/**********************************************************************
	 * mainPage()
	 * 
	 * The user browsed to the /welcome page
	 *  1) Get a userinfo object setup
	 *  2) Forward the user to the welcome.jsp page
	 ***********************************************************************/
	@RequestMapping("/welcome")
	public ModelAndView mainPage( Model aModel )
	{
		logger.debug("mainPage() started");
				
		// Create a modelAndView object
		ModelAndView mav = new ModelAndView();
		
		// Show the welcome.jsp page
		mav.setViewName("welcome.jsp");
		
		// Create a userInfo object
		UserInfo userInfo = new UserInfo();
		userInfo.setUserName("Adam");
		userInfo.setIsAdministrator(true);
		
		// Add the userInfo information to the view
		mav.addObject("userInfo", userInfo);
		
		logger.debug("mainPage() finished");
		return mav;
	}
}


			


13. Create this file:  stdJspIncludes.jsp
    Browse to WAR -> WEB-INF -> jsp -> Right-Click -> New -> File
	File name:  stdJspIncludes.jsp

<%@ page session="false" language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" %>

<%-- Allow all JSPs to use the tag libraries --%>
<%@ taglib prefix='c'      uri='http://java.sun.com/jsp/jstl/core' %>
<%@ taglib prefix='spring' uri='http://www.springframework.org/tags' %>
<%@ taglib prefix='form'   uri='http://www.springframework.org/tags/form' %>

<%-- Allow all JSPs to have the contextPath variable --%>
<c:set var="contextPath" value="${pageContext.request.contextPath}" />
    
	
	
		
	
14. Create this file:   stdHeader.jsp
    Browse to WAR -> WEB-INF -> jsp -> Right-Click -> New -> File
	File name:  stdHeader.jsp

<table style="width: 100%; border: 1px solid black">
    <tr>
        <td align="center">Standard Header is here</td>
    </tr>
</table>
	
	
	
	
	
15. Create your stdFooter.jsp
	Browse to WAR -> WEB-INF -> jsp -> Right-Click -> New -> File
	File name:  stdFooter.jsp

<table style="width: 100%; border: 1px solid black">
    <tr>
        <td align="center">Standard Footer is here</td>
    </tr>
</table>



	
	
	
16. Create your welcome.jsp page
    Browse to WAR -> WEB-INF -> jsp -> Right-Click -> New -> File
	File name:  welcome.jsp
	
<%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>

<!DOCTYPE HTML>

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <title>Welcome Page</title>
</head>

<body>
    
    <%-- S T A N D A R D       H E A D E R  --%>
    <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
    
    <h2>welcome.jsp</h2>
    
    <br/>
    
    Hello ${userInfo.userName} <br/>
    Are you an administrator: ${userInfo.isAdministrator }
       
    <br/>
    <br/>    

    <%-- S T A N D A R D       F O O T E R  --%>
    <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
    
</body>
</html>
		
		

		
17. Add a default.jsp page
    Right-click on WAR -> New -> File
	File name:  default.jsp
	
	
<%@ page session="false" %>
<%@ page language="java" contentType="text/html;charset=UTF-8" %>
<!DOCTYPE html>

<%-- If a user visits http://localhost:8080/webapp1/, then forward them to http://localhost:8080/webapp1/welcome  --%>
<jsp:forward page="/welcome" />
		
		
		
18. Pull File / Save All
		
		
19. Startup the webapp in debug mode
    a) Right-click on mywebapp1 -> Debug As -> Debug on Server
	    1. In the "Debug on Server", 
		   Single-click on Tomcat v.7.0 Server
		   Check "Always use this server when running this projecdt"
		   Press "Next"
		   Press "Finish"
		   
	
	
	
	
What happens when you start the debugger
----------------------------------------
 1) Your browser opens to here:  http://localhost:8080/webapp1
    
 2) Your tomcat will see if a default.jsp page exists
    It does, so Tomcat forwards you to http://localhost:8080/webapp1/default.jsp 
 
 3) Your default.jsp page forwards you to here: 
    http://localhost:8080/webapp1/welcome
	   
 4) Your WelcomeController has this line in it:
   	@RequestMapping("/welcome")
	public ModelAndView mainPage( Model aModel )
	{
	
	}
	
	So your mainPage() method is executed
	
    
 5) The WelcomeController.mainPage() method then does the following
     	a) Creates a UserInfo object
	b) Binds that UserInfo object to your welcome.jsp
	c) Forward the user to the welcome.jsp page  [with the UserInfo object bound to it].
	 
	 -- As a result, the user sees the welcome.jsp page  [with the information attached to it]
	 
