How to Make a Deep Clone Copy of a List
---------------------------------------
Problem:  Your method needs to make a copy of the list
          But, the usual methods only make shallow copies
          -- So, if you call a method in your copy-of-list, then you change the original-list


Solution: Change your object to implement Cloneable
          Loop through the original list and call .clone() on each object


Sample Code
-----------
Suppose you have a a list of MyData objects

    public class MyData {
        private String value;
        private Integer id;

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }
    }


 1. Change the MyData object to be cloneable

      public class MyData implements Cloneable {
         private String value;
         private Integer id;

         public String getValue() { return this.value; }
         public voi
      }


 2. Add a constructor that takes all of the private fields

       public MyData(String aValue, Integer aId) {
          this.value = aValue;
          this.id = aid;
       }


 3. Add a clone() method to your MyData class

        @Override
        protected MyData clone() throws CloneNotSupportedException {
            return new MyData(value, id);
        }


 When finished, your class looks like this:

       public class MyData implements Cloneable {
           private String value;
           private Integer id;

           public String getValue() {
               return value;
           }

           public void setValue(String value) {
               this.value = value;
           }

           public Integer getId() {
               return id;
           }

           public void setId(Integer id) {
               this.id = id;
           }


           public MyData(String aValue, Integer aId) {
               this.value = aValue;
               this.id = aId;
           }

           @Override
           protected MyData clone() throws CloneNotSupportedException {
               return new MyData(value, id);
           }

       }



4. Loop through the original list to make a copy

    List<MyData> originalList = .....

    // Make a *deep* copy of the list (in size)
    List<MyData> copyOfList = new ArrayList<MyData>(originalList.size());
    for (MyData item : originalList) {
          copyOfList.add(item.clone());
    }
