ObjectMapper Techniques
-----------------------


Some Cool ObjectMapper Tricks
-----------------------------
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.module.scala.DefaultScalaModule$;

// Initialize the object mapper (to be used inside the objectWriter)
this.objectMapperIncludeNulls = new ObjectMapper();

// Tell the object mapper to convert Objects to snake case
// For example:  report.getDisplayName --> "display_name" in the JSON
this.objectMapperIncludeNulls.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);

// Tell the ObjectMappers to Escape Non-ASCII fields
this.objectMapperIncludeNulls.getFactory().configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true);

// Register the scala module so that the objectMapper successfully converts arrays and maps within in the object
// Used if working with Scala maps
this.objectMapperIncludeNulls.registerModule(DefaultScalaModule$.MODULE$);



// Convert the record object into a JSON string
String jsonForObject = objectMapperIncludeNulls.writeValueAsString(record);

// Append this individual ES bulk request to the StringBuilder object
sbJsonRequest.append("{ \"index\": { \"_index\": \"" )
                         .append(esNewIndexName)
                         .append("\", \"_type\": \"record\", \"_id\": \"" )
                         .append(id)
                         .append("\" }}\n")
                         .append(jsonForObject)
                         .append("\n");


submitBulkJsonRequestAndRetry(sbJsonRequest.toString());



  public void submitBulkJsonRequestAndRetry(String aJson) throws Exception {

    // Try 5 times before giving-up
    final int TOTAL_ATTEMPTS = 5;

    // Attempt hte JSON bulk request 3 times.
    for (int i=1; i<=TOTAL_ATTEMPTS; i++) {

    // Make a POST call to ElasticSearch  (this performs the bulk index request)
    Response response = this.asyncHttpClient.preparePost(this.elasticSearchUrl + "/_bulk")
            .setRequestTimeout(this.ES_REQUEST_TIMEOUT_IN_MILLISECS)
            .setHeader("accept", "application/json")
            .setHeader("Content-Type", "application/json")
            .setBody(aJson)
            .execute()
            .get();

        if (response.getStatusCode() != 200) {
          // ElasticSearch returned a non-200 status response -- that's bad
          throw new RuntimeException("Critical Error running submitBulkJsonRequest():  I got a non-200 status code of " + response.getStatusCode() + ".  The error is " + response.getResponseBody());
        }

        // Convert the response JSON string into a map and examine it to see if the request really worked
        HashMap<String, Object> mapResponse = this.objectMapper.readValue(response.getResponseBody(), new TypeReference<Map<String, Object>>() {});

        if ((mapResponse != null) && (mapResponse.get("errors") != null)) {
          // The errors flag was found in the returned JSON
          if (mapResponse.get("errors").toString().equalsIgnoreCase("true")) {
            // The "errors" flag came back as true
            if (i<TOTAL_ATTEMPTS) {
              // This bulk request failed, but there are attempts left.

              // So, sleep for a few seconds and try the bulk request again
              LOGGER.warn("Failed to run the bulk json request.  I got a 200 status response code, but ES returned errors.  {}", response.getResponseBody());
              Thread.sleep(2000);
              continue;
            }
            else {
              // This is the 5th failed bulk attempt.  So, stop here and throw a Runtime Exception
              throw new RuntimeException("Critical Error in submitBulkJsonRequest():  I got a 200 status response code, but ES returned errors.  " + response.getResponseBody());
            }
          }
          else {
            // The bulk json request succeeded so stop here
            return;
          }
        }

    } // end for loop
  }


