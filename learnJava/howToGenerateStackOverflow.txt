How to Generate a StackOverflow Error
-------------------------------------
Create a method that is recursive.
After about 10,000 method calls, we get a StackOverflowError


Sample Code
-----------
   private static final Logger logger = LoggerFactory.getLogger(App.class);


    private static int recurseTree(int left) {
        logger.debug("recurseTree()  left={}", left);
        return recurseTree(left+1);
    }

    /**
     * Web Application Starts Here
     **/
    public static void main( String[] args ) throws Exception
    {
        logger.debug("main() started.");

        int i = recurseTree(2);



        // Start up Spring Boot
        SpringApplication.run(App.class, args);

        logger.debug("WebApp is Up.");
    }


Java Stack Size Settings
------------------------
If you set -Xss1M,   then you get about     10,000 recursive calls before it blows pu
If you set -Xss10M,  then you get about    108,000 recursive calls
If you set -Xss100M, then you get about  3,186,109 recursive calls



Generated Output
----------------
08/14/2019 16:54:32 DEBUG com.lessons.App recursiveMethod()  left=10012
08/14/2019 16:54:32 DEBUG com.lessons.App recursiveMethod()  left=10013
08/14/2019 16:54:32 DEBUG com.lessons.App recursiveMethod()  left=10014
08/14/2019 16:54:32 DEBUG com.lessons.App recursiveMethod()  left=10015
Exception in thread "main" java.lang.StackOverflowError
	at java.lang.StringBuilder.append(StringBuilder.java:136)
	at org.slf4j.helpers.MessageFormatter.safeObjectAppend(MessageFormatter.java:302)
	at org.slf4j.helpers.MessageFormatter.deeplyAppendParameter(MessageFormatter.java:271)
	at org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:233)
	at org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:173)
	at ch.qos.logback.classic.spi.LoggingEvent.getFormattedMessage(LoggingEvent.java:293)
	at ch.qos.logback.classic.spi.LoggingEvent.prepareForDeferredProcessing(LoggingEvent.java:206)
	at ch.qos.logback.core.OutputStreamAppender.subAppend(OutputStreamAppender.java:223)
	at ch.qos.logback.core.OutputStreamAppender.append(OutputStreamAppender.java:102)
	at ch.qos.logback.core.UnsynchronizedAppenderBase.doAppend(UnsynchronizedAppenderBase.java:84)
	at ch.qos.logback.core.spi.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:51)
	at ch.qos.logback.classic.Logger.appendLoopOnAppenders(Logger.java:270)
	at ch.qos.logback.classic.Logger.callAppenders(Logger.java:257)
	at ch.qos.logback.classic.Logger.buildLoggingEventAndAppend(Logger.java:421)
	at ch.qos.logback.classic.Logger.filterAndLog_1(Logger.java:398)
	at ch.qos.logback.classic.Logger.debug(Logger.java:486)
	at com.lessons.App.recursiveMethod(App.java:16)
	at com.lessons.App.recursiveMethod(App.java:17)
	at com.lessons.App.recursiveMethod(App.java:17)
	at com.lessons.App.recursiveMethod(App.java:17)
	at com.lessons.App.recursiveMethod(App.java:17)
	at com.lessons.App.recursiveMethod(App.java:17)
	at com.lessons.App.recursiveMethod(App.java:17)
	at com.lessons.App.recursiveMethod(App.java:17)
	at com.lessons.App.recursiveMethod(App.java:17)
	at com.lessons.App.recursiveMethod(App.java:17)
