How to create a Java Command-line Program using IntelliJ and Maven
------------------------------------------------------------------


Assumptions:  
 A) You have Intellij installed
 B) You have Maven installed

 
 
Procedures
----------
 1. Create your "addNumbers" Maven command-line project in Intellij
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project
       
    b. Press "Create New Project"
       1) In the "New Project" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java JDK:  /usr/lib/jvm/java-1.8.0-openjdk
                      -- Press OK
               
            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next
               
       2) In the next screen
          GroupId:     com.lessons
          ArtifactId:  addNumbers
          Version:     1.0-SNAPSHOT
          Press Next
          
          
       3) In the next screen,
          Maven home directory:  /opt/apache-maven-3.3.9
          User settings file:    /home/adam/.m2/settings.xml
          Press Next                       
                                 
       4) Project Name:      addNumbers
          Project Location:  /home/adam/intellijProjects/addNumbers
          Press Finish
     
       5) If you get prompted 
          "New projects can either be opened in a new window or replace the project"
          Press "This Window"
          
       6) If you are prompted 
          Maven projects need to be imported
          Press "Enable Auto-Import"
          
          Now, maven has created a simple Java JAR project
       
       
       
 2. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
          a) Single-click on Inspections
          b) next to Typo -- Uncheck the checkbox
          c) Press Apply
          
          

 3. Setup the Maven directories for your Intellij project

    Add these directories
       src/test/resources/             # Holds the logback.xml used by unit test code
       src/main/resources/             # Holds the logback.xml used by main program


    a. Right-click on src/test   -> New -> Directory:    resources
    b. Right-click on src/main   -> New -> Directory:    resources


    Now, you should have this directory structure
      src/main/java/ 
      src/main/resources/               # Holds logback.xml used by java main program     
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code
   


           
 4. Add dependencies for your project
    
    Your pom.xml should already have one dependency:
      <dependencies>
      
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.12</version>
          <scope>test</scope>
        </dependency>
        
      </dependencies>
    
        
        
    a. Copy and paste these dependencies into your pom.xml
       NOTE:  Add all of these dependencies should be between these tags:
       <dependencies>
       . . .
       </dependencies>
       
       
         <dependency>
             <groupId>org.apache.commons</groupId> 
             <artifactId>commons-lang3</artifactId> 
             <version>3.3.2</version> 
         </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
        </dependency>

    b. Change the maven.compiler.source and target from 1.7 to 1.8
    
       <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <maven.compiler.source>1.7</maven.compiler.source>
         <maven.compiler.target>1.7</maven.compiler.target>
       </properties>  
 

 5. Create this file:  logback.xml
    a. Browse to src/main/resources
    b. Right-click on classes -> New -> File
       filename:  logback.xml
    c. Copy this contents to your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
    
         <?xml version="1.0" encoding="windows-1252" ?>

         <configuration debug="false">
             <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                 <encoder>
                     <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                 </encoder>
             </appender>

             <logger name="com.lessons" level="DEBUG" additivity="false">
                 <appender-ref ref="CONSOLE"/>
             </logger>

             <root level="INFO">
                 <appender-ref ref="CONSOLE"/>
             </root>

         </configuration>

        


 6. Create your class:  AddStuff
    a. Right-click on src/main/java/com/lessons -> New Class
       Name:  AddStuff
         
    b. Change your class to this:
 
       package com.lessons;

       import org.slf4j.Logger;
       import org.slf4j.LoggerFactory;

       public class AddStuff
       {
           private static final Logger logger = LoggerFactory.getLogger(AddStuff.class);


           private int operand1;
           private int operand2;

           /**********************************************************
            * AddStuff()   **CONSTRUCTOR**
            *
            * Assumes that the strings are numeric
            ********************************************************** */
           public AddStuff(String aArg1, String aArg2)
           {
               logger.debug("AddStuff() constructor started.");

               this.operand1 = java.lang.Integer.parseInt(aArg1);
               this.operand2 = java.lang.Integer.parseInt(aArg2);
           }



           /**********************************************************
            * getSum()
            *
            * Add=up the numeric values and return the result
            ********************************************************** */
           public int getSum()
           {
               logger.debug("getSum() called.  Returns {}", this.operand1 + this.operand2);
               return(this.operand1 + this.operand2);
           }

       }


 7. Edit the App class  (this is your driver class)
    b. Change the App class to this

       package com.lessons;

       import org.apache.commons.lang3.StringUtils;
       import org.slf4j.Logger;
       import org.slf4j.LoggerFactory;

       public class App
       {
           private static final Logger logger = LoggerFactory.getLogger(App.class);


           /**********************************************************
            * main()
            *
            * Main program to access this class from the command-line
            ********************************************************** */
           public static void main(String[] args)
           {
               logger.debug("main() started");

               // Verify the command line arguments
               verifyCommandLineArgs(args);

               String arg1 = args[0];
               String arg2 = args[1];

               // Create a new instance (or copy) of the AddStuff class
               AddStuff a = new AddStuff(arg1, arg2);

               // Calcultae the sum
               int sum = a.getSum();

               logger.debug("sum={}", sum);
               System.out.println(arg1 +  "+" + arg2 + "=" + sum);


               logger.debug("main() finished.");
           }


           /**********************************************************
            * verifyCommandLineArgs()
            *
            * Verify that the args are valid
            * Verify that only 2 args were provided
            ********************************************************** */
           private static void verifyCommandLineArgs(String[] args)
           {
               if (args.length != 2)
               {
                   // The user did not provide the two arguments
                   throw new RuntimeException("You did not provide exactly 2 arguments");
               }

               String arg1 = args[0];
               String arg2 = args[1];

               if (StringUtils.isNumeric(arg1) == false)
               {
                   throw new RuntimeException("Your 1st argument of " + arg1 + " is not numeric.  It must be a number.");
               }
               else if (StringUtils.isNumeric(arg2) == false)
               {
                   throw new RuntimeException("Your 2nd argument of " + arg2 + " is not numeric.  It must be a number.");
               }
           }

       }

 
 
      
 8. Setup your debugger
    a. Set a breakpoint or or near line 19 of your App.main by clicking in the margin
       NOTE:  your breakpoint should be on this line:  logger.debug("main() started");
       
         
    b. Browse to your /src/main/java/com/lessons/App -> Right-Click -> Debug 'App.main()'
     
       Press F9 to continue the program and you should see this in your Console:
          Exception in thread "main" java.lang.RuntimeException: You did not provide exactly 2 arguments
             at com.lessons.App.verifyCommandLineArgs(App.java:52)
             at com.lessons.App.main(App.java:22)
    
    
    c. Let's tell your debugger to add 2 arguments
       1) Pull Run / Edit Configurations...
       2) Single-click on App  (on the left)
       3) On the right side
          a) In the big "Program Arguments" box, type-in this:
               10 25
          b) Press OK
           
          Now, your debugger will pass-in 2 arguments to your main
           
       
     3. Pull Run / Debug 'AddStuff'
        You should see this:
           
        10/14/2019 17:49:20 DEBUG com.lessons.App main() started
        10/14/2019 17:49:20 DEBUG com.lessons.AddStuff AddStuff() constructor started.
        10/14/2019 17:49:20 DEBUG com.lessons.AddStuff getSum() called.  Returns 35
        10/14/2019 17:49:20 DEBUG com.lessons.App sum=35
        10+25=35
        10/14/2019 17:49:20 DEBUG com.lessons.App main() finished.

           
                
               
 9. Create a Java JAR
     a. Update your pom.xml to tell Maven to rename your java JAR that has *all* of the dependencies
        Edit your pom.xml

        Add the following text so that appears **AFTER** the <pluginManagement>...</pluginManagement> section
                                and it appears **BEFORE** the closing </build>        
             <plugins>
                 <plugin>
                     <artifactId>maven-compiler-plugin</artifactId>
                     <version>3.1</version>
                     <configuration>
                         <source>1.8</source>
                         <target>1.8</target>
                     </configuration>
                 </plugin>

                 <plugin>
                     <groupId>org.apache.maven.plugins</groupId>
                     <artifactId>maven-jar-plugin</artifactId>
                     <version>2.3.2</version>
                     <configuration>
                         <!-- Set the name of the generated Java JAR filename *without* dependencies -->
                         <finalName>addNumbers</finalName>
                     </configuration>
                 </plugin>

                 <plugin>
                     <artifactId>maven-assembly-plugin</artifactId>

                     <configuration>
                         <descriptorRefs>
                             <descriptorRef>jar-with-dependencies</descriptorRef>
                         </descriptorRefs>

                         <archive>
                             <manifest>
                                 <addClasspath>true</addClasspath>
                             </manifest>
                         </archive>
                     </configuration>

                     <executions>
                         <execution>
                             <id>make-assembly</id>
                             <phase>package</phase>
                             <goals>
                                 <goal>single</goal>
                             </goals>
                             <configuration>
                                 <!-- Set the name of the generated Java JAR filename *with* dependencies -->
                                 <appendAssemblyId>false</appendAssemblyId>
                                 <finalName>addNumbersUber</finalName>
                             </configuration>
                         </execution>
                     </executions>
                 </plugin>

             </plugins>
    
    
    b. Save your pom.xml by pressing control-s
     
    c. Build your Java JAR by running mvn package
       unix> cd ~/intellijProjects/addNumbers
       unix> mvn clean package

       unix> ls -l target
          Now, you should have a target directory with addNumbers.jar in it:
               /home/adam/intellijProjects/addNumbers/target/addNumbers.jar       # smaller file
               /home/adam/intellijProjects/addNumbers/target/addNumbersUber.jar   # larger file
           
       
          NOTE:  The addNumbersUber.jar has its dependencies so we can run it
           
              
               
               
10. Run your Java JAR from the command-line  (using java -cp)
    unix> cd ~/intellijProjects/addNumbers
    unix> java -cp ./target/addNumbersUber.jar com.lessons.App 15 25
       
       You should see this:
       10/14/2019 17:52:10 DEBUG com.lessons.App main() started
       10/14/2019 17:52:10 DEBUG com.lessons.AddStuff AddStuff() constructor started.
       10/14/2019 17:52:10 DEBUG com.lessons.AddStuff getSum() called.  Returns 40
       10/14/2019 17:52:10 DEBUG com.lessons.App sum=40
       15+25=40
       10/14/2019 17:52:10 DEBUG com.lessons.App main() finished.

 
 
11. Reduce logging in com.lessons from DEBUG to WARN, rebuild, and re-run
    a. Browse your src/main/resources/logback.xml
       You should see this:
     
            <logger name="com.lessons" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>   
            
    b. Change the logging to show WARN and higher
            <logger name="com.lessons." level="WARN" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>       
     
    c. Rebuild your java JAR
       1) Open a DOS window by pressing <Start><Run>CMD
       2) In the DOS window, type-in this:
          unix> cd ~/intellijProjects/addNumbers
          unix> mvn clean package
           
    e. Run your Java JAR from the command-line  (using java -cp)
       DOS> java -cp ./target/addNumbersUber.jar com.lessons.App 15 25
        
       You should see this:
       15+25=40
        


12. Change your Java JAR so that it is "executable" JAR
    
    a. Go to your pom.xml
    
    b. Look at your maven-assembly-plugin.  It should look like this:
          <plugin>
           <artifactId>maven-assembly-plugin</artifactId>

           <configuration>
             <descriptorRefs>
               <descriptorRef>jar-with-dependencies</descriptorRef>
             </descriptorRefs>

             <archive>
               <manifest>
                 <addClasspath>true</addClasspath>
               </manifest>
             </archive>
           </configuration>

           <executions>
             <execution>
               <id>make-assembly</id>
               <phase>package</phase>
               <goals>
                 <goal>single</goal>
               </goals>
               <configuration>
                 <!-- Set the name of the generated Java JAR filename *with* dependencies -->
                 <appendAssemblyId>false</appendAssemblyId>
                 <finalName>addNumbersUber</finalName>
               </configuration>
             </execution>
           </executions>
         </plugin>
      
     c. Edit the <archive>...</archive> section so it looks like this:
           <archive>
              <!-- Set the main class in the manifest -->
              <manifest>
                <addClasspath>true</addClasspath>
                <mainClass>com.lessons.App</mainClass>
              </manifest>
           </archive>  
    
          
    d. Rebuild your java JAR
       unix> cd ~/intellijProjects/addNumbers
       unix> mvn clean package

    e. Run your executable java JAR (using java -jar)
       unix> java -jar ./target/addNumbersUber.jar 15 25

       You should see this:
       15+25=40
