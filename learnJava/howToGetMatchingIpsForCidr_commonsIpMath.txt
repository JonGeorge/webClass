How to Get Matching IPs for a given a CIDR Range (using Commons IP Math Library)
--------------------------------------------------------------------------------
The commons-ip-math library is very fast
-- It is able to check 160,000 IPs (to see if they exist in a single CIDR) in 80 msecs.


References
----------
https://github.com/jgonian/commons-ip-math


Procedure
---------
 1. Add this maven dependency
        <dependency>
            <!-- https://github.com/jgonian/commons-ip-math -->
            <groupId>com.github.jgonian</groupId>
            <artifactId>commons-ip-math</artifactId>
            <version>1.32</version>
        </dependency>


 2. Add this test class:

     @Test
     public void testIfIpExistsInCidrUsingCommonsMath() {
         String cidr         = "4.4.4.0/24";
         String ipInsideCidr = "4.4.4.4";

         Ipv4Range ipv4Range = Ipv4Range.parse(cidr);
         Ipv4 ipv4 = Ipv4.of(ipInsideCidr);

         // Determine if this IP exists within this CIDR range
         boolean bExistsInRange = ipv4Range.contains(ipv4);

         assertTrue(bExistsInRange);
     }



Procedure - Speed Test
----------------------
 1. Add this maven dependency
        <dependency>
            <!-- https://github.com/jgonian/commons-ip-math -->
            <groupId>com.github.jgonian</groupId>
            <artifactId>commons-ip-math</artifactId>
            <version>1.32</version>
        </dependency>

        <!-- Add the dependency for your postgreSQL JDBC driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgres_version}</version>
        </dependency>

        <!-- Send Logging from SLF4j to Logback -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback_classic_version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


 2. Add this logback.xml
		<?xml version="1.0" encoding="utf-8" ?>

		<configuration debug="false">
			<!-- Development Logback.xml -->
			<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
				<encoder>
				    <pattern>%d{MM/dd/yyyy HH:mm:ss}  %thread %-5level %c %line %m%n</pattern>
				</encoder>
			</appender>

			<!-- Root Logger - default level INFO -->
			<root level="INFO" additivity="false">
				<appender-ref ref="CONSOLE"/>
			</root>

			<logger name="csaac.ng" level="DEBUG" additivity="false">
				<appender-ref ref="CONSOLE"/>
			</logger>
		</configuration>



 3. Add this test method

    /*
     * This method can compare 100,000 ipv6s against an ipv6 cidr in 450 msec on a laptop
     */
    @Test
    public void testIpinCidrUsingCommonsMath() {

        logger.info("testIpinCidrUsingCommonsMath() started.");

        SingleConnectionDataSource sd = new SingleConnectionDataSource();
        sd.setUrl("jdbc:postgresql://localhost:5432/test");
        sd.setUsername("test");
        sd.setPassword("test");
        sd.setDriverClassName("org.postgresql.Driver");

        // Get a list of 100,000 ipv6 indicators
        String sql = "select ipv6_uncompressed from indicators ";
        JdbcTemplate jt = new JdbcTemplate(sd);
        List<String> indicatorValues = jt.queryForList(sql, String.class);

        long startTime = System.currentTimeMillis();
        Ipv6Range ipv6Range = Ipv6Range.parse("::ffff:404:400/120");    // Same as 4.4.4.0/24

        for (String ipv6AsString: indicatorValues) {
            Ipv6 ipv6 = Ipv6.of(ipv6AsString);

            // Determine if this IP exists within this CIDR range
            boolean bExistsInRange = ipv6Range.contains(ipv6);
        }

        long endTime = System.currentTimeMillis();
        logger.info("Time to compare {} records is {} ms", indicatorValues.size(), endTime - startTime);
    }

