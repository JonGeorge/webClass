Build a Sample Java JAR that will Export to Excel
-------------------------------------------------



Procedure
---------
 1. Create your "myReports" Maven command-line project in Intellij
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project
       
    b. Press "Create New Project"
       1) In the "New Project" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java JDK:  /usr/lib/jvm/java-1.8.0-openjdk
                      -- Press OK
               
            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next
               
       2) In the next screen
	      Name:   		myReports
		  Location: 	~/intellijProjects/addNumbers   
		  
		  Under "Artifact Coordinates"
            GroupId:     com.lessons
            ArtifactId:  myReports
            Version:     1.0-SNAPSHOT
			
          Press Next
          
          
       3) In the next screen,
          Maven home directory:  /opt/apache-maven-3.3.9     (or where ever you installed Maven)
          User settings file:    /home/adam/.m2/settings.xml
          Press Finish                       
                                 
       4) Project Name:      addNumbers
          Project Location:  /home/adam/intellijProjects/myReports
          Press Finish

          
          Now, maven has created a simple Java JAR project
       
       
       
 2. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
       3) Single-click on Inspections
       4) On the right side, you should see Proofreading -> Typo
	      Uncheck "Typo" 
		  Press OK
          
          

 3. Setup the Maven directories for your Intellij project
    Add these directories
       src/test/resources/             # Holds the logback.xml used by unit test code
       src/main/resources/             # Holds the logback.xml used by main program

    a. Right-click on src/test   -> New -> Directory:    resources
    b. Right-click on src/main   -> New -> Directory:    resources


    Now, you should have this directory structure
      src/main/java/ 
      src/main/resources/               # Holds logback.xml used by java main program     
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code
   

           
 4. Add dependencies for your project
    
    Your pom.xml should already have one dependency:
      <dependencies>
      
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.11</version>
          <scope>test</scope>
        </dependency>
        
      </dependencies>
    
        
        
    a. Copy and paste these dependencies into your pom.xml
       NOTE:  Add these 5 dependencies should be between the <dependencies>...</depdendencies> tags
       

		<dependency>
			  <groupId>ch.qos.logback</groupId>
			  <artifactId>logback-classic</artifactId>
			  <version>1.2.3</version>
		</dependency>

		<dependency>
			  <!-- Apache POI dependency (used to generate xlsx files) -->
			  <groupId>org.apache.poi</groupId>
			  <artifactId>poi-ooxml</artifactId>
			  <version>4.1.2</version>
		</dependency>

		<dependency>
			  <!-- StringUtils Dependency -->
			  <groupId>org.apache.commons</groupId>
			  <artifactId>commons-lang3</artifactId>
			  <version>3.5</version>
		</dependency>

		<dependency>
			  <!-- Spring-JDBC -->
			  <groupId>org.springframework</groupId>
			  <artifactId>spring-jdbc</artifactId>
			  <version>5.0.3.RELEASE</version>
		</dependency>

		<dependency>
			  <!-- Database Driver that will be used to talk to the database -->
			  <groupId>org.postgresql</groupId>
			  <artifactId>postgresql</artifactId>
			  <version>42.1.4</version>
		</dependency>


    b. Change the maven.compiler.source and target from 1.7 to 1.8
    
       <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <maven.compiler.source>1.8</maven.compiler.source>
         <maven.compiler.target>1.8</maven.compiler.target>
       </properties>  
 
    
	c. Update your maven dependencies inside Intellij
	   Right-click on pom.xml -> Maven -> Reload Project
	
		  
		  
   When finished, your pom.xml should look something like this:
		<?xml version="1.0" encoding="UTF-8"?>

		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		  <modelVersion>4.0.0</modelVersion>

		  <groupId>com.lessons</groupId>
		  <artifactId>myReports</artifactId>
		  <version>1.0-SNAPSHOT</version>

		  <name>myReports</name>

		  <properties>
			<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
			<maven.compiler.source>1.8</maven.compiler.source>
			<maven.compiler.target>1.8</maven.compiler.target>
		  </properties>

		  <dependencies>
			<dependency>
			  <groupId>ch.qos.logback</groupId>
			  <artifactId>logback-classic</artifactId>
			  <version>1.2.3</version>
			</dependency>

			<dependency>
			  <!-- Apache POI dependency (used to generate xlsx files) -->
			  <groupId>org.apache.poi</groupId>
			  <artifactId>poi-ooxml</artifactId>
			  <version>4.1.2</version>
			</dependency>

			<dependency>
			  <!-- StringUtils Dependency -->
			  <groupId>org.apache.commons</groupId>
			  <artifactId>commons-lang3</artifactId>
			  <version>3.5</version>
			</dependency>

			<dependency>
			  <!-- Spring-JDBC -->
			  <groupId>org.springframework</groupId>
			  <artifactId>spring-jdbc</artifactId>
			  <version>5.0.3.RELEASE</version>
			</dependency>

			<dependency>
			  <!-- Database Driver that will be used to talk to the database -->
			  <groupId>org.postgresql</groupId>
			  <artifactId>postgresql</artifactId>
			  <version>42.1.4</version>
			</dependency>

			<dependency>
			  <groupId>junit</groupId>
			  <artifactId>junit</artifactId>
			  <version>4.11</version>
			  <scope>test</scope>
			</dependency>
		  </dependencies>

		  <build>
			<pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
			  <plugins>
				<!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
				<plugin>
				  <artifactId>maven-clean-plugin</artifactId>
				  <version>3.1.0</version>
				</plugin>
				<!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
				<plugin>
				  <artifactId>maven-resources-plugin</artifactId>
				  <version>3.0.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-compiler-plugin</artifactId>
				  <version>3.8.0</version>
				</plugin>
				<plugin>
				  <artifactId>maven-surefire-plugin</artifactId>
				  <version>2.22.1</version>
				</plugin>
				<plugin>
				  <artifactId>maven-jar-plugin</artifactId>
				  <version>3.0.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-install-plugin</artifactId>
				  <version>2.5.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-deploy-plugin</artifactId>
				  <version>2.8.2</version>
				</plugin>
				<!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
				<plugin>
				  <artifactId>maven-site-plugin</artifactId>
				  <version>3.7.1</version>
				</plugin>
				<plugin>
				  <artifactId>maven-project-info-reports-plugin</artifactId>
				  <version>3.0.0</version>
				</plugin>
			  </plugins>
			</pluginManagement>
		  </build>
		</project>

    

 5. Create this file:  logback.xml
    a. Browse to src/main/resources
    b. Right-click on resources -> New -> File
       filename:  logback.xml
    c. Copy this contents to your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
    
         <?xml version="1.0" encoding="UTF-8" ?>
		 
         <configuration debug="false">
             <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                 <encoder>
                     <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                 </encoder>
             </appender>

             <logger name="com.lessons" level="DEBUG" additivity="false">
                 <appender-ref ref="CONSOLE"/>
             </logger>

             <root level="INFO">
                 <appender-ref ref="CONSOLE"/>
             </root>

         </configuration>

   
	
	
 6. Add your method to open the existing file, add a sheet, and write to it
    a. Right-click on src/main/java/com/lessons -> New Package
	   Package Name:  utilities
	
	b. Right-click on src/main/java/com/lessons/utilities -> New Java Class
	   Class Name:  ExcelUtilities
	
	c. Copy this to your newly-created file
		package com.lessons.utilities;

		import org.apache.commons.lang3.StringUtils;
		import org.apache.poi.ss.usermodel.Cell;
		import org.apache.poi.ss.usermodel.CellStyle;
		import org.apache.poi.ss.usermodel.Font;
		import org.apache.poi.ss.usermodel.Row;
		import org.apache.poi.xssf.streaming.SXSSFSheet;
		import org.apache.poi.xssf.streaming.SXSSFWorkbook;
		import org.apache.poi.xssf.usermodel.XSSFWorkbook;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.jdbc.support.rowset.SqlRowSet;
		import org.springframework.jdbc.support.rowset.SqlRowSetMetaData;

		import java.io.File;
		import java.io.FileInputStream;
		import java.io.FileOutputStream;

		public class ExcelUtilities {
			private static final Logger logger = LoggerFactory.getLogger(ExcelUtilities.class);


			public static void createExcelFileWithRowSet(SqlRowSet aSqlRowSet,
														 String aOutputFilePath,
														 String aSheetName,
														 boolean aAddColumnNames) throws Exception {
				logger.debug("createExcelFileWithRowSet() started  writing to file: {}", aOutputFilePath);

				// Creating a Streaming Workbook instance
				//        Keep 100 rows in memory.  The remaining rows will be written to disk
				//        + This does not increase or decreate the time it takes to generate the XLSX file
				//        + This reduces memory consumption
				SXSSFWorkbook streamingWorkBook = new SXSSFWorkbook(100);

				// Create the worksheet (within this excel workbook)
				SXSSFSheet sheet = streamingWorkBook.createSheet(aSheetName);

				// Get a fixed list of column names
				SqlRowSetMetaData sqlRowSetMetaData = aSqlRowSet.getMetaData();
				String[] columnNames = sqlRowSetMetaData.getColumnNames();

				// In Apache POI, the first row starts with row number of zero
				int currentRowNumber = 0;

				if (aAddColumnNames) {
					// Set the first row with column headers
					addHeaderRowToSheet(sheet, columnNames);
					currentRowNumber++;
				}

				// Loop through the remaining data, writing it one row at a time
				while (aSqlRowSet.next()) {

					// Create a row in this worksheet
					Row row = sheet.createRow(currentRowNumber);

					// Loop through each column in this row, adding it to the excel sheet
					for (int i=0; i<columnNames.length; i++) {
						String columnName = columnNames[i];
						String value = aSqlRowSet.getString(columnName);

						// Create the cell in this row
						Cell cell = row.createCell(i);
						cell.setCellValue(value);
					}

					currentRowNumber++;
				}

				// Write the remaining contents of the excel file to disk
				try (FileOutputStream outputStream = new FileOutputStream(aOutputFilePath)) {
					// Overwrite the existing file
					streamingWorkBook.write(outputStream);
				}

				// Dispose of the temporary file (used by the streaming workbook)
				streamingWorkBook.dispose();

				logger.debug("createExcelFileWithRowSet() finished writing to file: {}", aOutputFilePath);
			}


			public static void appendRowSetToExcelFile(SqlRowSet aSqlRowSet,
															 String aExistingExcelFilePath,
															 String aSheetName,
															 boolean aAddColumnNames) throws Exception {

				if (StringUtils.isEmpty(aExistingExcelFilePath)) {
					throw new RuntimeException("Critical error in appendRowSetToExcelFile:  The passed-in excel file path is null or empty.");
				}

				File file = new File(aExistingExcelFilePath);
				if (! file.exists()) {
					throw new RuntimeException("Critical error in appendRowSetToExcelFile:  The passed-in file path does not exist: " + aExistingExcelFilePath);
				}

				// Open the existing excel file
				// NOTE:  You *must* use a new FileInputStream here to open the workbook.  Do not use a File object as that will not work.
				XSSFWorkbook wb = new XSSFWorkbook(new FileInputStream(aExistingExcelFilePath));

				// Get a reference to the Streaming Workbook instance
				//        Keep 100 rows in memory.  The remaining rows will be written to disk
				//        + This does not increase or decreate the time it takes to generate the XLSX file
				//        + This reduces memory consumption
				SXSSFWorkbook streamingWorkBook = new SXSSFWorkbook(wb, 100);

				// Create the worksheet (within this excel workbook)
				SXSSFSheet sheet = streamingWorkBook.createSheet(aSheetName);

				// Get a fixed list of column names
				SqlRowSetMetaData sqlRowSetMetaData = aSqlRowSet.getMetaData();
				String[] columnNames = sqlRowSetMetaData.getColumnNames();

				// In Apache POI, the first row starts with row number of zero
				int currentRowNumber = 0;

				if (aAddColumnNames) {
					// Set the first row with column headers
					addHeaderRowToSheet(sheet, columnNames);
					currentRowNumber++;
				}

				// Loop through the remaining data, writing it one row at a time
				while (aSqlRowSet.next()) {

					// Create a row in this worksheet
					Row row = sheet.createRow(currentRowNumber);

					// Loop through each column in this row, adding it to the excel sheet
					for (int i=0; i<columnNames.length; i++) {
						String columnName = columnNames[i];
						String value = aSqlRowSet.getString(columnName);

						// Create the cell in this row
						Cell cell = row.createCell(i);
						cell.setCellValue(value);
					}

					currentRowNumber++;
				}


				// Write the remaining contents of the excel file to disk
				try (FileOutputStream outputStream = new FileOutputStream(aExistingExcelFilePath)) {
					// Overwrite the existing file
					streamingWorkBook.write(outputStream);
					streamingWorkBook.close();
				}

				// Dispose of the temporary file (used by the streaming workbook)
				streamingWorkBook.dispose();
			}



			private static void addHeaderRowToSheet(SXSSFSheet aSheet, String[] aColumnNames) {
				if (aSheet == null) {
					throw new RuntimeException("Critical error in addHeaderRowToSheet():  The passed-in aSheet is null");
				}

				// Create a row in this worksheet
				Row row = aSheet.createRow(0);

				CellStyle headerCellStyle = aSheet.getWorkbook().createCellStyle();
				Font font = aSheet.getWorkbook().createFont();
				font.setBold(true);
				font.setFontHeightInPoints((short) 11);
				headerCellStyle.setFont(font);

				// Loop through the column names, writing them to this row
				int i=0;
				for (String columnName: aColumnNames) {
					// Create a cell in this worksheet
					Cell cell = row.createCell(i);
					cell.setCellValue(columnName);
					cell.setCellStyle(headerCellStyle);   // Set this cell as bold

					// This is the width that fits most of the headers
					aSheet.setColumnWidth(i, 4500);
					i++;
				}
			}
		}

 
 7. Create this class:  FileUtilities
    a. Right-click on com.lessons.utilities -> New Java Class
	   Class Name:  FileUtilities
	
	b. Copy this to your newly-created class

		package com.lessons.utilities;

		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import java.io.File;
		import java.io.FileInputStream;
		import java.io.InputStream;
		import java.nio.file.Paths;
		import java.util.Properties;

		public class FileUtilities {
			private static final Logger logger = LoggerFactory.getLogger(FileUtilities.class);

			/**
			 * @return String holding the path of the current directory
			 */
			public static String getCurrentWorkingDirectory() {
				return Paths.get(".").toAbsolutePath().normalize().toString();
			}

			/**
			 * @param aFilePath Holds the complete file path of a file
			 * @return TRUE if the passed-in file path exists
			 */
			public static boolean doesFileExist(String aFilePath) {
				File file = new File(aFilePath);
				return file.exists();
			}


			/**
			 * @param aPropertiesInputFilePath holds the file path of a file to read propertie sfrom
			 * @return Properties object from the passed-in property file
			 */
			public static Properties readProperties(String aPropertiesInputFilePath) throws Exception {
				logger.debug("readProperties() started for file:  {}", aPropertiesInputFilePath);

				if (! doesFileExist(aPropertiesInputFilePath)) {
					throw new RuntimeException("Critical error in readProperties():  The passed-in file path does not exist " + aPropertiesInputFilePath);
				}

				Properties properties = new Properties();
				try (InputStream inputStream = new FileInputStream(aPropertiesInputFilePath)) {
					// Read the file and automatically close it as soon as we leave this try block
					properties.load(inputStream);
				}

				logger.debug("readProperties() finished for file: {}", aPropertiesInputFilePath);
				return properties;
			}
		}


 8. Create this class:  DatabaseUtilities
    a. Right-click on com.lessons.utilities -> New Java Class
	   Class Name:  DatabaseUtilities
	
	b. Copy this to your newly-created class

		package com.lessons.utilities;

		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.jdbc.core.JdbcTemplate;
		import org.springframework.jdbc.datasource.SingleConnectionDataSource;

		import javax.sql.DataSource;
		import java.util.Properties;

		public class DatabaseUtilities {
			private static final Logger logger = LoggerFactory.getLogger(DatabaseUtilities.class);


			public static DataSource buildDataSource(Properties aProperties) {
				logger.debug("buildDataSource() started.");

				if ( (! aProperties.containsKey("jdbc.url")) || (! aProperties.containsKey("jdbc.username")) || (! aProperties.containsKey("jdbc.password")) || (! aProperties.containsKey("jdbc.schema"))) {
					// Some of the required properties are missing
					throw new RuntimeException("I found the property file but some of the REQUIRED fields are missing.  It must have username, password, url, and schema.");
				}

				// Pull the url, username, password, and schema from the props object
				String url =      aProperties.getProperty("jdbc.url");
				String username = aProperties.getProperty("jdbc.username");
				String password = aProperties.getProperty("jdbc.password");
				String schema   = aProperties.getProperty("jdbc.schema");
				String driver   = aProperties.getProperty("jdbc.driverClassName");

				logger.debug("Connecting to jdbc.url={}   username={}  schema={}", url, username, schema);


				// Create the Data Source
				SingleConnectionDataSource sdds = new SingleConnectionDataSource();
				sdds.setDriverClassName(driver);
				sdds.setUsername(username);
				sdds.setPassword(password);
				sdds.setSchema(schema);
				sdds.setUrl(url);

				// Verify that we can run a query
				// If this query works, then the DataSource object is good
				String sql = "select now()";
				JdbcTemplate jt = new JdbcTemplate(sdds);
				String currentDate = jt.queryForObject(sql, String.class);

				logger.debug("buildDataSource() finished.  Current database time is {}", currentDate);
				return sdds;
			}
		}


 9. Create this class:  MyReport
    a. Right-click on com.lessons -> New Java Class
	b. Class Name:  MyReport
	c. Copy this to your newly-created class

		package com.lessons;

		import com.lessons.utilities.ExcelUtilities;
		import com.lessons.utilities.FileUtilities;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.jdbc.core.JdbcTemplate;
		import org.springframework.jdbc.support.rowset.SqlRowSet;

		import javax.sql.DataSource;
		import java.util.Properties;

		public class MyReport {
			private static final Logger logger = LoggerFactory.getLogger(MyReport.class);

			private final DataSource dataSource;
			private final Properties properties;

			public MyReport(DataSource aDataSource, Properties aProperties) {
				if (aDataSource == null) {
					throw new RuntimeException("Critical Error in MyReport():  The passed-in data source is null.");
				}
				else if ((aProperties == null) || (aProperties.size() == 0)) {
					throw new RuntimeException("Critical Error in MyReport():  The passed-in properties object is null or empty.");
				}
				this.dataSource = aDataSource;
				this.properties = aProperties;
			}



			public void runReport() throws Exception {
				logger.debug("runReport() started.");
				long startTime = System.currentTimeMillis();

				// Construct the SQL to get the information from the database
				String sql = "select id, display_name, priority, created_date " +
							 "from reports " +
							 "order by id";

				// Execute the SQL, generating a read-only SqlRowSet
				JdbcTemplate jt = new JdbcTemplate(this.dataSource);
				SqlRowSet rs = jt.queryForRowSet(sql);

				// Construct the path of the excel file
				String outputFilePath = FileUtilities.getCurrentWorkingDirectory() + "/output.xlsx";

				// Send the SqlRowSet to the excel file
				ExcelUtilities.createExcelFileWithRowSet(rs, outputFilePath, "report 1", true);

				long endTime = System.currentTimeMillis();
				logger.debug("runReport() finished after {} secs.", ((endTime - startTime) / 1000));
			}
		}


	
10. Edit this class:  App
    a. Edit the src/main/java/com/lessons/App.java

	c. Replace the App with this

		package com.lessons;

		import com.lessons.utilities.DatabaseUtilities;
		import com.lessons.utilities.FileUtilities;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;

		import javax.sql.DataSource;
		import java.util.Properties;

		public class App {
			private static final Logger logger = LoggerFactory.getLogger(App.class);


			/**
			 * Main class that will run a report
			 *
			 * @param args
			 * @throws Exception
			 */
			public static void main(String[] args) throws Exception {
				if (args.length != 1) {
					// The user did not provide exactly 1 command-line argument
					System.out.println("\nUSAGE STATEMENT\njava -cp /path/to/this/myUberReports.jar com.lessons.App /path/to/properties.file\n");
					System.exit(1);
				}

				logger.debug("main() started.");

				// The first argument is the properties file
				String propertiesInputFilePath = args[0];

				// Read the file into the properties object
				Properties properties = FileUtilities.readProperties(propertiesInputFilePath);

				// Get the data source
				DataSource dataSource = DatabaseUtilities.buildDataSource(properties);

				// Create a Report Object
				MyReport report = new MyReport(dataSource, properties);
				report.runReport();

				logger.debug("main() finished.");
			}

		}



11. Create a postgres database and postgres user account
    unix> psql -U postgres -h localhost
    password:  secret

      create database app2_db;
      create user app2_user with password 'secret';
      grant all privileges on database app2_db to app2_user;
      alter database app2_db     SET search_path=app2_db;
      alter role     app2_user   SET search_path=app2_db;  
      \q
    
	  
12. Create the app2_db schema, reports table the reports table with data 
    unix> psql -U app2_user -d app2_db -h localhost
	password:  secret
	
	create schema app2_db;
	
	
	CREATE TABLE reports
        (
          id                  INTEGER PRIMARY KEY NOT NULL,
          version             INTEGER,
          description         TEXT,
          display_name        VARCHAR(255),
          reviewed            BOOLEAN,
          reference_source    INTEGER,
          priority            INTEGER,
          created_date        TIMESTAMP,
          last_modified_date  TIMESTAMP,
          is_custom_report    BOOLEAN DEFAULT FALSE,
          reserved            BOOLEAN,
          reserved_by         VARCHAR(255)
        );
    
	 insert into reports(id, display_name, priority, created_date) values(1, 'report 1.txt', 5, now() );
	 insert into reports(id, display_name, priority, created_date) values(2, 'report 2.txt', 5, now() );
	 insert into reports(id, display_name, priority, created_date) values(3, 'report 3.txt', 5, now() );
	 
	 \q
	 
 

13. Create a properties file with the database credentials
    a. Right-click on myReports -> New Directory
	   Directory Name:  docs
	   
	b. Right-click on myReports/docs -> New File
	   File name:  reports.properties
	
	c. Copy this to your newly-created properties file
	
		####################################################################
		# reports.properties
		####################################################################
		jdbc.url=jdbc:postgresql://localhost:5432/app2_db
		jdbc.username=app2_user
		jdbc.password=secret
		jdbc.schema=app2_db
		jdbc.driverClassName=org.postgresql.Driver
 
 
14. Run the program and make sure docs/reports.properties is the 1st argument
    a. Right-click on src/main/java/com/lessons/App -> Debug 'App.main()'
	   
	   It should show you 
			USAGE STATEMENT
			java -cp /path/to/this/myUberReports.jar com.lessons.App /path/to/properties.file
    
	b. Pull Run -> Edit Configurations
	c. In the Configuration
	     Main class:         com.lessons.App
		 Program arguments:  docs/reports.properties
		 Press "OK"
	
	d. Activate the debugger
	   
	   You should see this:

			09/29/2020 20:11:46 DEBUG com.lessons.App main() started.
			09/29/2020 20:11:48 DEBUG com.lessons.utilities.FileUtilities readProperties() started for file:  docs/reports.properties
			09/29/2020 20:11:48 DEBUG com.lessons.utilities.FileUtilities readProperties() finished for file: docs/reports.properties
			09/29/2020 20:11:49 DEBUG com.lessons.utilities.DatabaseUtilities buildDataSource() started.
			09/29/2020 20:11:49 DEBUG com.lessons.utilities.DatabaseUtilities Connecting to jdbc.url=jdbc:postgresql://localhost:5432/app2_db   username=app2_user  schema=app2_db
			09/29/2020 20:11:49 INFO  org.springframework.jdbc.datasource.SingleConnectionDataSource Loaded JDBC driver: org.postgresql.Driver
			09/29/2020 20:11:50 INFO  org.springframework.jdbc.datasource.SingleConnectionDataSource Established shared JDBC Connection: org.postgresql.jdbc.PgConnection@1623b78d
			09/29/2020 20:11:50 DEBUG com.lessons.utilities.DatabaseUtilities buildDataSource() finished.  Current database time is 2020-09-29 20:11:50.110896-04
			09/29/2020 20:11:53 DEBUG com.lessons.MyReport runReport() started.
			09/29/2020 20:11:54 DEBUG com.lessons.utilities.ExcelUtilities createExcelFileWithRowSet() started  writing to file: /home/adam/intellijProjects/myReports/output.xlsx
			09/29/2020 20:11:57 DEBUG com.lessons.utilities.ExcelUtilities createExcelFileWithRowSet() finished writing to file: /home/adam/intellijProjects/myReports/output.xlsx
			09/29/2020 20:11:57 DEBUG com.lessons.MyReport runReport() finished after 4 secs.
			09/29/2020 20:11:57 DEBUG com.lessons.App main() finished.

       
	 e. Open up the output.xlsx
        -- It should have one tab called "report 1"
		-- The tab should have 4 columns with 3 records in it
		-- The headers should all be in bold
		
