Java Fundamentals
-----------------
 1. Understanding the "instance world" and the "static world"

    In the "instance world", objects go through the life-cycle
      1) Objects are created using new.
           Car c = new Car();
           Car d = new Car();
      2) Objects may be used
           c.runMethod();

      3) Objects are destroyed
         -- Garbage collection destroys object when it is no longer used


    In the "static world", there is no life-cycle.  The object is simply used.
    There are 2 common cases for static methods and static variables
     1) Creating a helper class
     2) Creating a Constants class
        -- Examples include the Constants class -- e.g.,
         public class Constants
          {
             public static final String SUPER_USER_ROLENAME = "superuser";
          }

        -- Using the Constants.SUPER_USER_ROLENAME in your code

        We can add a private constructor to ensure that users do not attempt to instantiate the Constants class
             public class Constants
              {
                 public static final String SUPER_USER_ROLENAME = "superuser";

                 private Constants() {
                     // This is a private constructor to prevent users from creating instances of this class
                 }
              }

    Spring gives us the best of both worlds:
      1) Spring calls new on all of your services and controllers on spring-app-context startup automatically
      2) Spring creates singleton (single-instances) java objects
      3) Spring lets you inject those singleton into other classes so they are readily available

    If there is some code you need to reuse, then create another service class and inject it.


    Instance variables are used by Oejcts to store their states
    Instance variables are *not* static
    Instance variable values are specific to an instance (and not shared among instances)

    Class variables are attached to a class.  When you declare a static variable, only a single instance of this variable is created (common to all objects of that class).
    Static variables can be accessed when no objects of that class exists
    Class variables are marked with static
    Class variables are shared among all of the classes
    Class methods are invoked with just the class name -- e.g., Math.addValues()



 2. What is the difference between JDK, JRE, and JVM

    JDK contains everything you need to develop *and* run java application
    JRE contains everything you need to run java application (that has already been compiled)
    JVM is a the layer between your java compiled code and the operating system
    -- JVM only works with bytecode

          Java Bytecode  (compiled)

          Java Virtual Machine

          Operating System



 3. String vs StringBuilder class

    String is immutable and final in java  (every modification of a string creates a new string)
    -- Calling trim() on a string causes a new string to be created

    String + operator is overloaded to do concatenation

    If you want to compare strings, use equalsIgnoreCase()

