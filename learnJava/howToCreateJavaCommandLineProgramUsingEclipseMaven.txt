How to create a Java Command-line Program using Eclipse and Maven
-----------------------------------------------------------------


Assumptions:  
 A) You have Eclipse installed
 B) You have Maven installed
 C) Your Maven configuration can download files from a maven repository
 
 
 
Procedures
----------
 1. Create the Java project in Eclipse
    a. Startup Eclipse
    b. Pull File / New Project....
    c. Select Java Project
       press Next
       
    d. In the "Create a Java Project" screen
       Project Name:  addNumbers
       press Next
    
    e. In the "Java Settings" screen
       press Finish
      
       

 2. Convert this Eclipse Java project into a Maven Project
    a. Right-click on addNumbers -> Configure -> Convert to Maven Project
    
       Group id:    com.resnick   
       Artifact id: addNumbers
       Version:     0.0.1-SNAPSHOT
       Packaging:   jar
       Press Finish
      
       Now, you have a Maven pom.xml file
       
       
 
 3. Setup the standard Maven directories for your Eclipse project
    Eclipse projects put java source code here:
      src/
              
    But, Maven uses this directory sturcture
      src/main/
      src/main/java/
      src/main/resources/
      src/test/
      src/test/java
      src/test/resources/
   
    So, we need to create these directories and tell Eclipse to use them
    
    
 
    a. Remove this line from your pom.xml
          <sourceDirectory>src</sourceDirectory>
   
 
    b. Right-click on the src -> Build Path -> Remove from Build Path
       NOTE:  This tells Eclipse to treat src/ as a regular directory
      
    c. Right-click on "src" -> New -> Folder:   main
    d. Right-click on "main" -> New -> Folder:    java
    e. Right-click on "main" -> New -> Folder:    resources
   
    f. Right-click on "src" -> New -> Folder:   test
    g. Right-click on "test" -> New -> Folder:    java
    h. Right-click on "test" -> New -> Folder:    resources

    Now, you should have this directory structure
      src/
      src/main/
      src/main/java/
      src/main/resources/
      src/test/
      src/test/java
      src/test/resources/
    
    i. Right-click on src/main/java      -> Build Path -> Use as Source Folder
    j. Right-click on src/main/resources -> Build Path -> Use as Source Folder
    k. Right-click on src/test/java      -> Build Path -> Use as Source Folder
    l. Right-click on src/test/resources -> Build Path -> Use as Source Folder


    m. Right-click on addNumbers -> Maven -> Update Project...
       In the "Update Maven Project" screen, press <OK>       
 
 
 
 
       
           
 3. Add dependencies for your project
    NOTE:  You can copy the <dependency> tags to your pom.xml *OR* 
           Enter each dependecy one at a time by right-clicking on mywebapp1 -> Maven -> Add Dependency

        
    a. Add the dependency for the Spring MVC framework
       Right-click on addNumbers -> Maven -> Add Dependency
        
       NOTE:  If no scope is listed here, then use the default scope of "compile"
        
        <dependency>
             <groupId>org.apache.commons</groupId> 
             <artifactId>commons-lang3</artifactId> 
             <version>3.3.2</version> 
         </dependency>
    
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.5</version>
        </dependency>
        
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
        </dependency>
        
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>



4 . Create this file:  logback.xml
    a. Browse to mywebapp1 -> src/main/resources
    b. Right-click on classes -> New -> Other... -> Search for file
       filename:  logback.xml
       
    c. Right-click on logback.xml -> Open With -> Text Editor
       Copy this contents to your file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
    
        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>
        
        <configuration debug="false">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %c %m%n</pattern>
                </encoder>
            </appender>
            
            
            <logger name="numbers" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>   
            
            <root level="WARN">
                <appender-ref ref="CONSOLE"/>
            </root>
            
        </configuration>
        


 5. Create your class:  AddStuff
    a. Right-click on src/main/java -> New Package 
       Name:  numbers      
       Press Finish
       
    b. Right-click on numbers -> New Class
       Name:  AddStuff
       Check the checkbox that says "public static void main(String[] args)
       Press Finish
       
       You should see something like this:
       
        package numbers;

        public class AddStuff {
        
            public static void main(String[] args) {
                // TODO Auto-generated method stub
        
            }
        
        }
    
     
    c. Change your class to this:
 
        package numbers;
        
        import org.apache.commons.lang3.StringUtils;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        
        public class AddStuff 
        {
            private static final Logger logger = LoggerFactory.getLogger(AddStuff.class);
            
            /**********************************************************
             * main()
             * 
             * Main program to access this class from the command-line
            ********************************************************** */
            public static void main(String[] args) 
            {
                logger.debug("main() started");
        
                // Verify the command line arguments
                verifyCommandLineArgs(args);
                
            
                String arg1 = args[0];
                String arg2 = args[1];
            
                AddStuff a = new AddStuff(arg1, arg2);
                
                int iResult = a.addValues();
                
                logger.debug("iResult = {}", iResult);
                System.out.println(arg1 +  "+" + arg2 + "=" + iResult);
        
                
                logger.debug("main() finished.");
            }
            
            
            /**********************************************************
             * verifyCommandLineArgs()
             * 
             * Verify that the args are valid
             * Verify that only 2 args were provided
            ********************************************************** */
            private static void verifyCommandLineArgs(String[] args)
            {
                if (args.length != 2)
                {
                    // The user did not provide the two arguments
                    throw new RuntimeException("You did not provide exactly 2 arguments");
                }
                
                String arg1 = args[0];
                String arg2 = args[1];
                
                if (StringUtils.isNumeric(arg1) == false)
                {
                    throw new RuntimeException("Your 1st argument of " + arg1 + " is not numeric.  It must be a number.");
                }
                else if (StringUtils.isNumeric(arg2) == false)
                {
                    throw new RuntimeException("Your 2nd argument of " + arg2 + " is not numeric.  It must be a number.");
                }
            }
        
            
            // ------------------------------------------------------------------------
            
            private int iArg1;
            private int iArg2;
            
            /**********************************************************
             * AddStuff()   **CONSTRUCTOR**
             * 
             * Pass-in String args
             * Assumes that the strings are numeric
            ********************************************************** */
            public AddStuff(String asArg1, String asArg2)
            {
                this.iArg1 = java.lang.Integer.parseInt(asArg1);
                this.iArg2 = java.lang.Integer.parseInt(asArg2);
            }
            
            
            
            /**********************************************************
             * addValues() 
             * 
             * Add=up the numeric values and return the result
            ********************************************************** */
            public int addValues()
            {
                return(this.iArg1 + this.iArg2);
            }
        
        }
 
 
      
  6. Setup your debugger
     a. Set a breakpoint or or near line 18 in your main by clicking in the margin
     b. Browse to src/main/java -> numbers -> AddStuff -> Right-Click -> Debug As -> Java Application
     
        Press F8 to continue the program and you should see this in your Console:
            07/14/2015 20:26:21 numbers.AddStuff main() started
            Exception in thread "main" java.lang.RuntimeException: You did not provide exactly 2 arguments
            at numbers.AddStuff.verifyCommandLineArgs(AddStuff.java:50)
            at numbers.AddStuff.main(AddStuff.java:21)
    
    
     c. Let's tell your debugger to add some arguments
        1) Right-click on "AddStuff.java" -> Debug As -> Debug Configurations
           a) Click on the "Arguments" tab
           b) In the big "Program Arguments" box, type-in this:
               1  20
           c) Press Apply
           d) Press Close
           
           Now, your debugger will pass-in 2 arguments to your main
           
           
     d. Start up your debugger
        Browse to src/main/java -> numbers -> AddStuff -> Right-Click -> Debug As -> Java Application
    
        Press F8 to continue past any breakpoints.  You should see this:
            07/14/2015 20:29:22 numbers.AddStuff main() started
            07/14/2015 20:29:34 numbers.AddStuff iResult = 21
            1+20=21
            07/14/2015 20:29:40 numbers.AddStuff main() finished.
            
            
        NOTE:  Any logger calls are formatted with the date/time
               Any System.out.println() calls are not formatted
               
               
               
  7. Create a Java JAR
     a. Update your pom.xml to tell Maven to rename your java JAR filename
        Edit your pom.xml
        
        Add this <plugin> so that it fits between <plugins>...</plugins>
        
           <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <!-- Set the name of the generated Java JAR filename *without* dependencies -->
                    <finalName>addNumbers</finalName>                   
                </configuration>
            </plugin>
     
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                      <manifest>
                        <addClasspath>true</addClasspath>
                      </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                         <configuration>
                            <!-- Set the name of the generated Java JAR filename *with* dependencies -->
                            <appendAssemblyId>false</appendAssemblyId>
                            <finalName>addNumbers2</finalName>
                        </configuration>
                    </execution>
                </executions>
              </plugin>
              
     b. Save your pom.xml by pressing control-s
     
     c. Build your Java JAR by running mvn package
        1) Open a DOS window by pressing <Start><Run>CMD
        2) In the DOS window, type-in this:
           DOS> cd /d c:\tools\eclipse\workspace\addNumbers
           DOS> mvn clean package
           
           Now, you should have a target directory with addNumbers.jar in it:
               c:\tools\eclipse\workspace\addNumbers\target\addNumbers.jar
               c:\tools\eclipse\workspace\addNumbers\target\addNumbers2.jar   # larger file
           
       
           NOTE:  The addNumbers2.jar has its dependencies so we can run it
           
              
               
               
  8. Run your Java JAR from the command-line
     a. Open a DOS window by pressing <Start><Run>CMD
     b. In the DOS window, type-in this:
        DOS> cd /d c:\tools\eclipse\workspace\addNumbers
        DOS> java -cp .\target\addNumbers2.jar numbers.AddStuff 15  25
        
        You should see this:
        07/14/2015 21:01:43 numbers.AddStuff main() started
        07/14/2015 21:01:43 numbers.AddStuff iResult = 40
        15+25=40
        07/14/2015 21:01:43 numbers.AddStuff main() finished.
 
 
 
 
  9. Turn off logging and re-run
     a. Browse your src/main/resources/logback.xml
        You should see this:
     
            <logger name="numbers" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>   
            
     b. Change it to this  [to set the debugging level to WARN for your ]
            <logger name="numbers" level="WARN" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>       
     
     c. Press control-s
     
     d. Rebuild your java JAR
        1) Open a DOS window by pressing <Start><Run>CMD
        2) In the DOS window, type-in this:
           DOS> cd /d c:\tools\eclipse\workspace\addNumbers
           DOS> mvn clean package
           
     e. Run your java JAR
        DOS> java -cp .\target\addNumbers2.jar numbers.AddStuff 15  25
        
        You should see this:
        15+25=40
        
        