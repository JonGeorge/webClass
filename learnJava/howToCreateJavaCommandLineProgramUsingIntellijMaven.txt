How to create a Java Command-line Program using Eclipse and Maven
-----------------------------------------------------------------


Assumptions:  
 A) You have Intellij Community Edition installed
 B) You have Maven installed
 C) Your Maven configuration can download files from a maven repository
 
 
 
Procedures
----------
 1. Create your "addNumbers" Maven command-line project in Intellij
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project
       
    b. Press "Create New Project"
       1) In the "New Project" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java JDK:  C:\Program Files\Java\jdk1.7.0_60
                      -- Press OK
               
            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next
               
       2) In the next screen
          GroupId:     numbers
          ArtifactId:  addNumbers      
          Version:     1.0-SNAPSHOT
          Press Next
          
          
       3) In the next screen,
          Maven home directory:  C:/tools/apache-maven-3.2.3
          User settings file:    Check the checkbox to "Override"
                                 C:\tools\apache-maven-3.2.3\conf\settings.xml
          Press Next                       
                                 
       
       4) Project Name:      addNumbers
          Project Location:  C:\tools\intellij\workspace\addNumbers
          Press Finish
          
       5) If you get prompted that "C:\tools\intellij\workspace\addNumbers" does not exist
          It will be created by Intellij
          Press OK 
     
       6) If you get prompted 
          "New projects can either be opened in a new window or replace the project"
          Press "This Window"
          
       7) If you are prompted 
          Maven projects need to be imported
          Press "Enable Auto-Import"
          
          Now, maven has created a simple Java JAR project
       
       
       
 2. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
          a) Single-click on Inspections
          b) next to Typo -- Uncheck the checkbox
          c) Press Apply
          
          

 3. Setup the Maven test directories for your Intellij project

    Add these directories
       src/test/resources/             # Holds the logback.xml used by unit test code
       src/main/resources/             # Holds the logback.xml used by main program


    a. Right-click on src/test   -> New -> Directory:    resources
    b. Right-click on src/main   -> New -> Directory:    resources


    Now, you should have this directory structure
      src/main/java/ 
      src/main/resources/               # Holds logback.xml used by java main program     
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code
   


           
 4. Add dependencies for your project
    Your pom.xml should already have one dependency:
      <dependencies>
      
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.12</version>
          <scope>test</scope>
        </dependency>
        
      </dependencies>
    
        
        
    Copy and paste these dependencies into your pom.xml
    NOTE:  Add all of these dependencies should be between these tags:
       <dependencies>
       . . .
       </dependencies>
       
       
         <dependency>
             <groupId>org.apache.commons</groupId> 
             <artifactId>commons-lang3</artifactId> 
             <version>3.3.2</version> 
         </dependency>
    
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.5</version>
        </dependency>
        
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
        </dependency>




 5. Create this file:  logback.xml
    a. Browse to src/main/resources
    b. Right-click on classes -> New -> File
       filename:  logback.xml
    c. Copy this contents to your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
    
        <?xml version="1.0" encoding="windows-1252" ?>
        
        <configuration debug="false">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                </encoder>
            </appender>
            
            
            <logger name="numbers" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>   
            
            <root level="INFO">
                <appender-ref ref="CONSOLE"/>
            </root>
            
        </configuration>
        


 6. Create your class:  AddStuff
    a. Right-click on src/main/java -> New Package 
       Name:  numbers      
       Press Finish
       
    b. Right-click on numbers -> New Class
       Name:  AddStuff
       Check the checkbox that says "public static void main(String[] args)
       Press Finish
       
       You should see something like this:
       
        package numbers;

        public class AddStuff {
        
            public static void main(String[] args) {
                // TODO Auto-generated method stub
        
            }
        
        }
    
     
    c. Change your class to this:
 
        package numbers;
        
        import org.apache.commons.lang3.StringUtils;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        
        public class AddStuff 
        {
            private static final Logger logger = LoggerFactory.getLogger(AddStuff.class);
            
            /**********************************************************
             * main()
             * 
             * Main program to access this class from the command-line
            ********************************************************** */
            public static void main(String[] args) 
            {
                logger.debug("main() started");
        
                // Verify the command line arguments
                verifyCommandLineArgs(args);
                
            
                String arg1 = args[0];
                String arg2 = args[1];
            
                AddStuff a = new AddStuff(arg1, arg2);
                
                int iResult = a.addValues();
                
                logger.debug("iResult = {}", iResult);
                System.out.println(arg1 +  "+" + arg2 + "=" + iResult);
        
                
                logger.debug("main() finished.");
            }
            
            
            /**********************************************************
             * verifyCommandLineArgs()
             * 
             * Verify that the args are valid
             * Verify that only 2 args were provided
            ********************************************************** */
            private static void verifyCommandLineArgs(String[] args)
            {
                if (args.length != 2)
                {
                    // The user did not provide the two arguments
                    throw new RuntimeException("You did not provide exactly 2 arguments");
                }
                
                String arg1 = args[0];
                String arg2 = args[1];
                
                if (StringUtils.isNumeric(arg1) == false)
                {
                    throw new RuntimeException("Your 1st argument of " + arg1 + " is not numeric.  It must be a number.");
                }
                else if (StringUtils.isNumeric(arg2) == false)
                {
                    throw new RuntimeException("Your 2nd argument of " + arg2 + " is not numeric.  It must be a number.");
                }
            }
        
            
            // ------------------------------------------------------------------------
            
            private int iArg1;
            private int iArg2;
            
            /**********************************************************
             * AddStuff()   **CONSTRUCTOR**
             * 
             * Pass-in String args
             * Assumes that the strings are numeric
            ********************************************************** */
            public AddStuff(String asArg1, String asArg2)
            {
                this.iArg1 = java.lang.Integer.parseInt(asArg1);
                this.iArg2 = java.lang.Integer.parseInt(asArg2);
            }
            
            
            
            /**********************************************************
             * addValues() 
             * 
             * Add=up the numeric values and return the result
            ********************************************************** */
            public int addValues()
            {
                return(this.iArg1 + this.iArg2);
            }
        
        }
 
 
      
 7. Setup your debugger
    a. Set a breakpoint or or near line 18 in your main by clicking in the margin
    b. Browse to src/main/java -> numbers -> AddStuff -> Right-Click -> Debug 'AddStuff.main()'
     
       Press F8 to continue the program and you should see this in your Console:
            07/14/2015 20:26:21 numbers.AddStuff main() started
            Exception in thread "main" java.lang.RuntimeException: You did not provide exactly 2 arguments
            at numbers.AddStuff.verifyCommandLineArgs(AddStuff.java:50)
            at numbers.AddStuff.main(AddStuff.java:21)
    
    
    c. Let's tell your debugger to add some arguments
       1) Right-click on "AddStuff.java" -> Debug As -> Debug Configurations
          a) Click on the "Arguments" tab
          b) In the big "Program Arguments" box, type-in this:
               1  20
          c) Press Apply
          d) Press Close
           
          Now, your debugger will pass-in 2 arguments to your main
           
           
    d. Start up your debugger
       1) Browse to src/main/java -> numbers -> AddStuff -> Right-Click -> Debug As -> Java Application
       2) Press F9 to continue past any breakpoints.  
           
          You should see this:
          07/16/2015 21:46:43 numbers.AddStuff main() started
          Exception in thread "main" java.lang.RuntimeException: You did not provide exactly 2 arguments
                at numbers.AddStuff.verifyCommandLineArgs(AddStuff.java:51)
                at numbers.AddStuff.main(AddStuff.java:22)
          Disconnected from the target VM, address: '127.0.0.1:50056', transport: 'socket'            
                

                   
       3) Add command-line arguments for the debugger
          a) Pull Run / Edit Configurations
          b) Single click on AddStuff [on the left]
          c) Next to Program Arguments:  10 25
          d) Press Apply
          e) Press OK
           
       4) Pull Run / Debug 'AddStuff'
          You should see this:
           
          07/16/2015 21:49:35 numbers.AddStuff iResult = 35
          10+25=35
          07/16/2015 21:49:35 numbers.AddStuff main() finished.
           
                
               
 8. Create a Java JAR
    a. Update your pom.xml to tell Maven to rename your java JAR filename
       Edit your pom.xml
        
       Add the following text so that appears before the <dependencies>...</dependencies> section
        
           <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.1</version>
                        <configuration>
                            <source>1.7</source>
                            <target>1.7</target>
                        </configuration>
                    </plugin>
        
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <version>2.3.2</version>
                        <configuration>
                            <!-- Set the name of the generated Java JAR filename *without* dependencies -->
                            <finalName>addNumbers</finalName>
                        </configuration>
                    </plugin>
        
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
        
                        <configuration>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
        
                            <archive>
                                <manifest>
                                    <addClasspath>true</addClasspath>
                                </manifest>
                            </archive>
                        </configuration>
        
                        <executions>
                            <execution>
                                <id>make-assembly</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <!-- Set the name of the generated Java JAR filename *with* dependencies -->
                                    <appendAssemblyId>false</appendAssemblyId>
                                    <finalName>addNumbers2</finalName>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
        
                </plugins>
            </build>
    
    
    b. Save your pom.xml by pressing control-s
     
    c. Build your Java JAR by running mvn package
       1) Open a DOS window by pressing <Start><Run>CMD
       2) In the DOS window, type-in this:
          DOS> cd /d c:\tools\intellij\workspace\addNumbers
          DOS> mvn clean package
           
          Now, you should have a target directory with addNumbers.jar in it:
               c:\tools\intellij\workspace\addNumbers\target\addNumbers.jar
               c:\tools\intellij\workspace\addNumbers\target\addNumbers2.jar   # larger file
           
       
          NOTE:  The addNumbers2.jar has its dependencies so we can run it
           
              
               
               
 9. Run your Java JAR from the command-line
    a. Open a DOS window by pressing <Start><Run>CMD
    b. In the DOS window, type-in this:
       DOS> cd /d c:\tools\intellij\workspace\addNumbers
       DOS> java -cp .\target\addNumbers2.jar numbers.AddStuff 15  25
        
       You should see this:
       07/14/2015 21:01:43 numbers.AddStuff main() started
       07/14/2015 21:01:43 numbers.AddStuff iResult = 40
       15+25=40 
       07/14/2015 21:01:43 numbers.AddStuff main() finished.
 
 
 
 
10. Turn off logging and re-run
    a. Browse your src/main/resources/logback.xml
       You should see this:
     
            <logger name="numbers" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>   
            
    b. Change it to this  [to set the debugging level to WARN for your ]
            <logger name="numbers" level="WARN" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>       
     
    c. Press control-s
     
    d. Rebuild your java JAR
       1) Open a DOS window by pressing <Start><Run>CMD
       2) In the DOS window, type-in this:
          DOS> cd /d c:\tools\eclipse\workspace\addNumbers
          DOS> mvn clean package
           
    e. Run your java JAR
       DOS> java -cp .\target\addNumbers2.jar numbers.AddStuff 15  25
        
       You should see this:
       15+25=40
        
        