Intro to Java Collections
-------------------------


Collections
-----------
A Collection is just that: a collection of items. You can add stuff, remove stuff, iterate over stuff, and query how much stuff is in there.
  • A List defines a type of collection that maintains the order in which elements were added
  • A Set defines a type of collection in which no duplicate elements are allowed
  • ArrayList is a List that can be easily expanded to accommodate new elements.
    + It is very efficient for accessing individual elements in random sequence
    - It can be inefficient   inserting elements into the middle of the list can be inefficient.
  • LinkedList is similar to an ArrayList but with more features.  
    + It is more efficient when inserting items into the middle of the list.
    - It is less efficient than an array list for accessing elements randomly
    
  
Maps
----
A Map is an object that maps keys to values. A map cannot contain duplicate keys.
  •  HashMap is a Map that uses a hash table for its implementation
  •  Hashtable is a synchronized version of HashMap
  •  TreeMap is a Map that uses a tree for its implementation
  •  ConcurrentHashMap allows for multiple threads to access it at the same time safely
  •  LinkedHashMap preserves the iteration order that things were inserted in (others don’t provide a fixed iteration order)  
    




How to loop through ArrayList
-----------------------------
    ArrayList<String> userList = new ArrayList<String>();
    userList.add("Adam");
    userList.add("Ben");
    userList.add("Peter");  
    userList.add("Justin");  
    
    // Approach #1:  Loop through this array list
    // NOTE:  a null userList will throw a runtime exception
    for (String sUser:  userList)
     {
       logger.debug("User's name is {}", sUser);
     }
    
    // Approach #:2  Loop through this array list
    for (int i = 0; i < userList.size(); i++)
     {
        String sUser = userList.get(i);
        logger.debug("User's name is {}", sUser);
     }

    WARNING:  ArrayLists can hold *NULL* objects inside them 




How to loop through Collection
------------------------------    
    // Create a collection of strings
    Collection<String> productTypes = new ArrayList<String>();
    
    // Add values to the collection of strings
    productTypes.add("residential");
    productTypes.add("commercial"); 
    
    for (String sProductType: productTypes)
     {
         System.out.println("Product Type=" + sProductType);
     }
    
    // NOTE:  Because productTypes is a *collection*, there is no get(index)
    //        Instead, use the Iterator objct to loop through the collection
    for (Iterator<String> iterator = productTypes.iterator(); iterator.hasNext(); )
    {
        String sProductType =  iterator.next();
        System.out.println("Product Type=" + sProductType);     
    }





How to loop through a HashMap
-----------------------------
      // Create a hashmap of key=number  value=day-of-week
      HashMap<Integer, String> hshDays = new HashMap<Integer, String>();  
      hshDays.put(1, "Sunday");  
      hshDays.put(2, "Monday");  
      hshDays.put(3, "Tuesday");  
      hshDays.put(4, "Wednesday");  
      hshDays.put(5, "Thursday");  
      hshDays.put(6, "Friday");  
      hshDays.put(7, "Sataurday");  
      
      for (Entry<Integer, String> entry : hshDays.entrySet())
      {  
          System.out.println("Key=" + entry.getKey() + "  Value=" + entry.getValue());  
      }  




How to create a Set holding all unique words in a string
--------------------------------------------------------
The following method will create a set of all unique words from the passed-in string

    public Set<String> getWordsInString(String aText) 
    {
        // Create a fixed array of all words
        String[] wordArray = aText.split(" ");
        
        // Create a new HashSet object
        Set<String> set = new HashSet<String>();
        
        // Loop through the fixed array of words, adding it to the set
        for (String currentWord : wordArray) {
          set.add(currentWord);
        }
        
        // The set has the *unique* words in it
        return set;
    }





How to convert flexible java arraylist into a fixed array
---------------------------------------------------------
    ArrayList<String> myJavaList = new ArrayList<String>();
    myJavaList.add("stuff");
    myJavaList.add("whatever");
      
    // Convert flexible java list into fixed array
    String[] stringArray = new String[ myJavaList.size() ];
    stringArray = myJavaList.toArray(stringArray);
  
  
  
  
How to convert fixed array into flexible Java arraylist
-------------------------------------------------------
    String stuff="abc,def,ghi";
    String[] myArray = stuff.split(",");
    ArrayList<String> myJavaList = new ArrayList<String>();
    myJavaList.addAll(Arrays.asList(myArray));
       
    *or*
       
    String stuff="abc,def,ghi";
    String[] myArray = stuff.split(",");
    ArrayList<String> myJavaList = new ArrayList<String>(Arrays.asList(myArray) );
   
   
