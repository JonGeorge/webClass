How to Execute a Callable Class in the Background using Executor Class
----------------------------------------------------------------------
This is handy for the situation in which:
 -- You want to run an ajax call but don't want to wait for the response
 -- If the response fails, you do not want to interrupt the user
 
 

ArrayBlockingQueue is backed by an array that size will never change after creation. Setting the capacity to Integer.MAX_VALUE would create a big array with high costs in space. ArrayBlockingQueue is always bounded.

LinkedBlockingQueue creates nodes dynamically until the capacity is reached. This is by default Integer.MAX_VALUE. Using such a big capacity has no extra costs in space. LinkedBlockingQueue is optionally bounded.


Assumptions
 A) You setup the AddNumbers java package using Intellij
    [see howToCreateJavaCommandLineProgramUsingIntellijMaven.txt]
    


Procedures
----------
 1. Create this class:  BackgroundRunner
 
        package numbers;
        
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        
        import java.text.DateFormat;
        import java.text.SimpleDateFormat;
        import java.util.Date;
        import java.util.concurrent.*;
        
        /**
         * Created by adam on 9/10/2015.
         */
        public class BackgroundRunner
        {
            private static final Logger logger = LoggerFactory.getLogger(BackgroundRunner.class);
        
            private ExecutorService executorService;
            private ExecutorCompletionService<String> completionService;
        
        
            /***************************************************************************
             * getExecutorService()
             ****************************************************************************/
            public void closeExecutorService()
            {
                if (this.executorService != null)
                {
                    // Close the executor service gracefully (but wait for any tasks to finish)
                    this.executorService.shutdown();
                }
            }
        
           /***************************************************************************
            * getCompletionService()
            ****************************************************************************/
            private ExecutorCompletionService getCompletionService()
            {
                if (this.executorService == null)
                {
                    // Setup a thread pool
                    final int THREAD_COUNT = 5;
        
                    // Create a threadpool with a fixed number of threads operating off a shared unbounded queue.
                    this.executorService = Executors.newFixedThreadPool(THREAD_COUNT);
                    this.completionService = new ExecutorCompletionService<String>(executorService);
                }
        
                return this.completionService;
            }
        
            /**************************************************************
             * getCurrentDateTime()
             **************************************************************/
            public static String getCurrentDateTime(String aFormat)
            {
                DateFormat df = new SimpleDateFormat(aFormat);
                return(df.format(new Date()));
            }
        
            /***************************************************************************
             * doSomethingInBackground()
             ****************************************************************************/
            public void doSomething(Boolean aRunInBackground, int aiThreadNumber) throws Exception {
                int iSleepTime = 5;
        
                if (aRunInBackground)
                {
                    ExecutorCompletionService completionService = getCompletionService();
        
                    CallableWorker worker = new CallableWorker(iSleepTime, aiThreadNumber);
        
                    // Submit this into the unbound queue
                    // NOTE:  if the number of worker threads is full, then this request is submitted (but it will wait for an opening)
                    logger.debug("Submitting a request for thread {}", aiThreadNumber);
                    completionService.submit(worker);
                    logger.debug("Finished submitting a request for thread {}", aiThreadNumber);
                }
                else
                {
                    // Run in foreground
                    CallableWorker worker = new CallableWorker(iSleepTime, aiThreadNumber);
                    String sMessage = worker.call();
                }
            }
        
        
        
        
            public class CallableWorker implements Callable<String>
            {
                private int sleepTime;
                private int threadNumber;
        
                public CallableWorker(int aiSleepTime, int aiThreadNumber)
                {
                    this.sleepTime = aiSleepTime;
                    this.threadNumber = aiThreadNumber;
                }
        
        
                @Override
                public String call() throws Exception
                {
                    logger.debug("Thread #" + this.threadNumber + " started sleeping for " + this.sleepTime + " secs and started as of " + getCurrentDateTime("MM/dd/yyyy HH:mm:ss"));
        
                    Thread.sleep(this.sleepTime * 1000);
        
                    logger.debug("Thread #" + this.threadNumber + " finished task as of " + getCurrentDateTime("MM/dd/yyyy HH:mm:ss"));
        
                    String sMessage = "Everything Worked";
                    return sMessage;
                }
            }
        }


 2. Create this class:  AddNumbers

        package numbers;
        
        import org.apache.commons.lang3.StringUtils;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        
        public class AddStuff
        {
            private static final Logger logger = LoggerFactory.getLogger(AddStuff.class);
        
            /**********************************************************
             * main()
             *
             * Main program to access this class from the command-line
             ********************************************************** */
            public static void main(String[] args) throws Exception
            {
                logger.debug("main() started");
        
        
                // Verify the command line arguments
                verifyCommandLineArgs(args);
        
                BackgroundRunner bg = new BackgroundRunner();
                boolean bRunInBackground=true;
        
                for (int iThreadNumber=1; iThreadNumber <= 10; iThreadNumber++)
                {
                    bg.doSomething(bRunInBackground, iThreadNumber);
                }
        
                String arg1 = args[0];
                String arg2 = args[1];
        
                AddStuff a = new AddStuff(arg1, arg2);
        
                int iResult = a.addValues();
        
                logger.debug("iResult = {}", iResult);
                System.out.println(arg1 +  "+" + arg2 + "=" + iResult);
        
                bg.closeExecutorService();
                logger.debug("main() finished.");
            }
        
        
            /**********************************************************
             * verifyCommandLineArgs()
             *
             * Verify that the args are valid
             * Verify that only 2 args were provided
             ********************************************************** */
            private static void verifyCommandLineArgs(String[] args)
            {
                if (args.length != 2)
                {
                    // The user did not provide the two arguments
                    throw new RuntimeException("You did not provide exactly 2 arguments");
                }
        
                String arg1 = args[0];
                String arg2 = args[1];
        
                if (StringUtils.isNumeric(arg1) == false)
                {
                    throw new RuntimeException("Your 1st argument of " + arg1 + " is not numeric.  It must be a number.");
                }
                else if (StringUtils.isNumeric(arg2) == false)
                {
                    throw new RuntimeException("Your 2nd argument of " + arg2 + " is not numeric.  It must be a number.");
                }
            }
        
        
        
            private int iArg1;
            private int iArg2;
        
            /**********************************************************
             * AddStuff()   **CONSTRUCTOR**
             *
             * Pass-in String args
             * Assumes that the strings are numeric
             ********************************************************** */
            public AddStuff(String asArg1, String asArg2)
            {
                this.iArg1 = java.lang.Integer.parseInt(asArg1);
                this.iArg2 = java.lang.Integer.parseInt(asArg2);
            }
        
        
        
            /**********************************************************
             * addValues()
             *
             * Add=up the numeric values and return the result
             ********************************************************** */
            public int addValues()
            {
                return(this.iArg1 + this.iArg2);
            }
        
        }
                  
         
 3. Create this file:  logback.xml
    -- Add this file to src/main/resources/

    
    <?xml version="1.0" encoding="windows-1252" ?>
    <!DOCTYPE project>
    
    <configuration debug="false">
        <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{MM/dd/yyyy HH:mm:ss} %c %m%n</pattern>
            </encoder>
        </appender>
    
    
        <logger name="numbers" level="DEBUG" additivity="false">
            <appender-ref ref="CONSOLE"/>
        </logger>
    
        <root level="WARN">
            <appender-ref ref="CONSOLE"/>
        </root>
    
    </configuration>
     
 
 
