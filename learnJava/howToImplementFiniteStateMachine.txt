How to Implement a Finite State Machine
---------------------------------------

Assumptions
 A) You are using Java
 B) You have some business rules that follow a workflow
 C) You want to implement that workflow using a FSM
 
References
----------
https://www.javacodegeeks.com/2012/03/automaton-implementation-in-java.html

public interface State {
	    public State next();
}

public class Input
{
    private String input;
    private int current;
    public Input(String input) {this.input = input;}
    char read() { return input.charAt(current++); }
}
 
 
public enum States implements State 
{
    Init {
        @Override
        public State next(Input word) {
            switch(word.read()) {
                case 'a': return A;
                default: return Fail;
            }
        }
    },
    A {
        @Override
        public State next(Input word) {
            switch(word.read()) {
                case 'a': return A;
                case 'b': return B;
                case 'c': return C;
                case '': return null;
                default: return Fail;
            }
        }
    },
    B {
        @Override
        public State next(Input word) {
            switch(word.read()) {
                case 'b': return B;
                case 'c': return C;
                case '': return null;
                default: return Fail;
            }
        }
    },
    C {
        @Override
        public State next(Input word) {
            switch(word.read()) {
                case 'c': return C;
                case '': return null;
                default: return Fail;
            }
        }
    },
    Fail {
        @Override
        public State next(Input word) {
               return Fail;
        }
    };
 
    public abstract State next(Input word);
}


How to use it
-------------
State s;
Input in = new Input("aabbbc");
for(s = States.Init; s != null || s != States.Fail; s = s.next(in)) 
{}
 
if (s == null) 
{
    System.out.printlin("Valid!");
}
else 
{
   System.out.println("Failed");
}
