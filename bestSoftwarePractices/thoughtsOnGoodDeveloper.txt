Thoughts on What Makes for a Good Developer
-------------------------------------------
More "yes" answers, the better the developer


Questions
---------
 1. Does the individual's code work?
    -- If the code performs well on 1000 records but is slow on 1000,000 records [and we expect 1,000,000 records], then the asnwer is No.

 2. Is the individual's code finished on time?

 3. Does the individual know how to step through the code with a debugger?

 4. Does the individual say, "I screwed up."?

 5. Does the individual hustle -- e.g., reach out people to get info instead of waiting for info to be delivered to the individual?

 6. Does the individual keep the team informed?
    -- Especially if the individual is in trouble of being late
    -- Especially if there are surprises mid-sprint -- e.g., implementation is too slow, browser is locked down at client site preventing code from working

 7. Does the individual follow coding standards?
    -- Are javadocs filled-in for methods?
    -- Are code files created in the appropriate place?

 8. Does the individual follow team processes?
    -- Enter ticket # with commit requests?
    -- Submit timesheets on time?
    -- Does the individual merge code directly into the feature branch?  Or, submits a merge request into the feature branch?

 9. Does the individual ask for help from others?   (No one knows it all)

10. Does the individual keep learning?

11. Does the individual listen to others (even the junior developers and non-developers)?

12. Does the individual mentor/help others?

13. Does the individual take advice to heart (especially during code reviews)

14. Does the individual verify the code works (by running it) before submitting for a merge request?

15. Does the invididual know how to deploy code to the test environment without assistance?

16. Does the individual know how to make the build without assistance?


Final THoughts
--------------
It is not the language that makes for a good programmer.
It is the attitude and practices.
-- Practices can be taught     (how to use a debugger or how to deploy a build)
-- Attitude cannot be taught:  (keeping the team informed, asking for help, offering help)


