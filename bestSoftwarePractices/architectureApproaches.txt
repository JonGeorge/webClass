Architecture Approaches
-----------------------

Summary
-------
I have seen 3 approaches to web development architecture:
 1) Share no code, Webapps contain front-end and back-end.
    Each webapp has only one property file
    + Each webapp stands alone
    + If you change one webapp, you only affect one webapp (no side effects)
    - If someone changes the database, your webapp could be affected
    + Easy to debug single webapp in IDEs 

      Overall:  This approach *can* work because of its simplicity


 2) Share maven modules, Webapps contain front-end and back-end.
    Each webapp has only one property file
    + Each webapp stand alone
    + If you change one webapp, you only affect one webapp (no side effects)
    + Easy to debug single webapp in IDEs 
    + Easy to share Maven modules as JARs with other projects
      NOTE:  The more maven modules you have, the more delicate the approach becomes
      SUGGESTION:  Only create maven modules for *complicated* code
      
      Overall:  This approach *can* work if there are not too many Maven modules
      
      
      
 3) Share massive back-end webapp / Create many front-end only webapps
    Each webapp depends on the massive back-end webapp
    - Makes debugging locally difficult because 2 webapps need to be deployed (the back-end and front-end)
    - Makes looking at log files difficult as there are multiple log files to examine
    - Makes switching the back-end webapp difficult as it will have multiple property files
    
    Overall: This approach is a *DISASTER* to work with
    
    
    
 
      

    
    
 
