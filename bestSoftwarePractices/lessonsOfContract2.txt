Lessons of Contract 2
---------------------


Look & Feel Lessons
-------------------
1) Make validation case-specific  [not based on css classes]
       Developers like to make validation generic -- e.g., make a class to indicate that something is a required field
       Generic validation can cause problems
         -- For example:   Suppose you need to add a dropdown.  But, the generic validation requires it to have a certain CSS class
                           But, adding this class causes it to look weeird
                           So, you have to spend a lot of time configuring CSS to get it to look good.
       
         -- Angular's advantage is that it encourages separation of model from look & feel
                
2) Use an existing library for custom dropdowns -- e.g., select2
   The team lead made his own version and it wasn't as flexible -- it didn't have a searchbox, it wasn't as easy to configure
       
   
3) It was much easier to maintain the Angular webapps than the jquery webapps

4) DataTables.net will fail silently -- watch out when working with that one

5) Don't reuse entire componenets between different web apps.  It makes it harder to maintain [not easier]

       


Architectural Lessons
---------------------
1) Keep the architecture simple:
   a) Don't create parent/child pom.xml files and create tons of sub-projects
      Problem:  Suppose you want one webapp to upgrade from spring 3 to spring 4, 
                Then, you change the parent pom.xml
                 - Changing the parent pom.xml creates a change in *all* projects (which is high risk)
                   lesson:  Don't reuse dependency management
                
              
      Instead:  Let each webapp have their own dependencies (not as a heirarchy)
                + You get more flexibility  (you can upgrade one webapp from spring 3 to spring 4 and leave the rest alone)

2) Don't create lots of web services to share data among the same project
   There were lots of web services that were created (that were for the most part just querying database tables)
   - Each web services requires its own project, pom.xml, testing, ....
   - Each of the sister projects had access to the database anyway -- but often used web service calls
   - It would have been faster and simpler to let the sister projects query the database directly
   
3) When authenticating, use a data transfer object (DTO) between you and the authentication service
   When we upgraded the authentication jars, we got a surprise:  Some of the userinfo objects had been changed
   Worse, we did not have a DTO separating us from the authentication
   So, the upgrade caused lots of headaches
   Lesson:  Keep a DTO between you and the authentication jar/service [to protect you from upgrades]
   
4) When you want to strip something out of the HTML, there are a few choices:
   a) Create a filter
   b) Use a JSP with <c:if> statements
   c) Dynamically insert different javascript at build time
   Of all of these approaches, using a JSP is the simplest approach

5) Joining a project without the technical knowledge and without the subject-matter knowledge makes for a very tough first year

6) Log files should have a user-designator so that we can track a user's action to a certain line in a log file
   When trying to track down a specific user's problem, we could not find it -- because the log file did not have user-designators on each line
   

   
Management Lessons
------------------
1) I witnessed a round of layoffs (actually it was the 4th one over 5 years; I arrived a few months after the last round of layoffs)
   - It really reduced my productivity
   - The message I received was simple:  I am dispensable
   Lesson: Any project that has frequent layoffs is not well managed

2) In the spring and summer, I was asked to perform technical evaluations of candidates.
   Then, in the fall, the prime was just injecting new people into the team (without vetting them).
   The results were not good:
     - Team leads resented having losers forced on their teams
     - The new people were not that good (and asked lots of questions)
     - The new people would probably not be staying long (so you feel less inclined to help them)
     - It was clear that the new people were brought on to bill more money
     Lesson:  Skipping the vetting process is dangerous
     

