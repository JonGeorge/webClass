Thoughts on Code Reuse
----------------------
It is universally assumed that reusing code is an absolute good.  Reusing external libraries is great. 
But, reusing internal libraries leads to code that is more fragile, less robust, and less stable.



Updated in November 2020
------------------------
Yes, create reusable maven modules.  That's fine.
+ Reuse java code within the same project -- I'm fine with that
+ Keep the sub maven modules small by making sure they do one thing:
  -- e.g., create a maven module called hadoop-utils
           create a maven module called ssl-utils
		   create a maven module called elasticsearch-utils






Advantages of code reuse
------------------------
+ Time Savings:  If you have some really complex piece of logic, you simply call it



Disadvantages of code reuse
---------------------------
- Increases Dependency:  Making a change to the resuable code can cause havoc on multiple applications
  On one project, they insisted on resusing front-end javascript code for the openlayer mapping
  The problem was that a change in that javascript introduced bugs in other web applications.  
  This happened because, the person making the change was only testing on web app #1 and not all of the web apps that were using this code
  
- Hidden costs of setting-up a separate project
  In order to make code reusable, you will need to setup a separate Maven (or Gradle) build script
  This code will have its own test cases
  This code might require documentation
  This code needs a code repository that can be shared
  This code is its own project -- and thus, contains all of the costs of a project.
  
- Debugging someone else's JAR file requires that source code to be provided
  If the maker of this JAR does not provide the source code, then you cannot step into it.
  
- The code might generate the result you want but it might take substantially longer to do so.
  In one project, the developer was using some reusable code to get some records from an Oracle database.
  The problem was that this reusable code was not making one query.  Instead, if was looping through records
  resulting in hundreds of queries.  Running one join would have been easier and faster.
  
- Reusing code makes it harder to maintain
  For example, in an older project, the web developer was developing 2 web pages.
  Both web pages were very similar, so he created a reusable template.  Then, the client
  insisted that page #1 had asterisks next to required fields, but not on page #2.
  What does the developer do?
    Option #1:  Remove the reusable code and put-in 2 hard-coded pages.  One has asterisks, the other does not.
                [this is the Author's preferred approach for its simplicity]
    Option #2:  Start adding if statements into the reusable code so that it's "smart" and knows whether
                or not to add asterisks.  This increases the complexity.
                
  The developer was starting to go with option #2 but I told him to go with option #1 because it's easier to maintain.
  
  

My Preferences:  Hybrid Approach
--------------------------------
I am not against reusable code.  I love using *other people's* reusable code.  I love using the Spring framework,
Logback, MySql Connector drivers.  I would not re-implement these.  They work well.  I recommend using these JAR files and frameworks.
But, when a team decides to create an "internal" JAR file, then I say "Stop!" and consider the costs.
 

Final Thoughts
--------------
1. No system ever went down because it has some *duplicate* code.
   But, systems have gone down when a change in one reusable JAR file screws-up multiple web applications.

2. When we create your own internal JAR files, the JAR files often do some of what we want -- but it's not exactly what we want.

3. When you create reusable code, you make your applications *less* robust.  (because you have more dependencies).
   The most reliable applications have fewer dependencies.

4. So, when you start thinking of creating a reusable project, stop and just copy that Java class
   to another project.  Yes, it's a little duplicative.  But, unless the logic is *really* complex,
   you will be happier for doing so.
   
