Lessons of SCS
--------------
Between Dec 2009 and July 2014, I worked for a team known as SCS

This team has been the most successful team I have ever worked with.  And, yet the team did 
*not* employ many leading-edge practices.

The development environment consisted of many low-tech practices:
 a) ANT builds for all web apps
 b) Eclipse and NetBeans were the popular java IDEs
 c) Firefox w/firebug plugin
 d) Tomcat 7
 e) Stripes MVC or Spring MVC was used on 11 of the 12 webapps
 f) All webapps used a simple Tomcat JDBC connection pool
 g) Lots of small perl applications to do automated back-end processes
 h) One workflow controller java program to handle workflows
 i) Over 200 database tables were created over the years
 j) All database calls used Spring-JDBC and embedded SQL
 k) A subversion repository was employed
 l) A central Oracle database was employed
 m) The team used an issue tracking system
 
 
Why were we successful?  I would guess it's because of a number of little techniques added up
---------------------------------------------------------------------------------------------
 1) The team lead ensured that every developer was able to debug the java code using their IDE

 2) Each of the 12 web apps had an ANT build script with fairly consistent targets
    -- The build script would write metadata inside the WAR or JAR
    -- The build script would write version info in the web.xml file so that 
       it was obvious what version of each webapp was running in the Tomcat manager
    -- The build script would replace an empty HTML ag with "Developer Environment", "Test Environment", or "Demo Environment" to the top of the webapp using a CSS div
       
 3) There was not many shared or common jar files
    -- The author considers this a major advantage
    -- Most of the webapps stand alone 
    -- There were not many dependencies
    
 4) Each web app had a single property file that was employed
    -- The property file was copied-in during the ANT build process
    
 5) The team had 2 dedicated testers
    -- This is a huge advantage as testers are often not used
    -- They would find the bugs before we went to production
    
 6) The team had a dedicated Oracle DBA
    -- Dedicated DBAs are a rare breed
    -- This guy was good
    
 7) The team lead would look at production Tomcat log files for exceptions and email them out
 
 8) The team lead wrote over 15 automated perl applications to do automated quality assurance
    -- One automated program would run once-per-week to verify the integrity of all zip files
       to ensure they were good
    -- One automated program would verify that links were good.  
    -- Automated programs would inform the development team if a server went down
    
 9) The system administrators were exceptionally good and the servers reliable
    -- The servers were unix virtual machines that never went down
    -- The bbtx team really knew there stuff:  We always needed more disk space each year and they would be happy to work with us
    
 
 10) The team lead ensured that all developers were able to "run" through a release
    -- Deploying new apps involves a number of tasks, including:
        1) Knowing which WAR files to deploy
        2) Knowing which JAR files to deploy
        3) Knowing where the update-in-progress redirector WAR files are 
        4) Knowing where the SQL script is located
        5) Knowing how to build subversion tags
        6) Knowing how to adjust the load balancer settings (if needed)
    -- The team lead would write-up step-by-step procedures
    -- Each developer would go through these steps so that they knew how to do a release
    
 11) The team lead setup a culture that encouraged developers to *actively* help each other
    -- If you asked someone for some time, developers were expected to say Yes
    -- The team lead would happily give up 4 hours of his time to track down a bug (if needed)
    
 12) The team lead setup a mod_jk load balancer and load-balanced the 2 main webapps
    -- If one of the Tomcats crashed, our users would not notice any problems
    -- Many projects setup load balancers but only use *one* Tomcat
    
 13) The team lead wrote build-from-scratch documentation so that if the entire system had to be
     restored on different unix (or windows) servers, it could be done
    
 14) The team lead gave the test team "veto authority" on releases
    -- If the test team through the code was not ready, then released would be be deployed
       
 15) When interviewing, prospective employees were interviewed using a java technical test
    -- If interviewing junior developers, the team expected less depth in answeres
    -- If interviewing more senior developers, the team expected more depth in the answers
    -- If the applicant did poorly on the technical test, then most of the time, that applicant was not brought on board.  As a result, new developers were already pre-sreeneded and determined to have some basic skills
  
 16) When getting ready for a release, the dev, demo, test, and production builds the needed WAR files were created. It was the same java code but with different property files.  This results in two benefits: (a) The test team tests the same code for both test and production and (b) When it's time to push to production, we know where the production WAR files are located.
 
