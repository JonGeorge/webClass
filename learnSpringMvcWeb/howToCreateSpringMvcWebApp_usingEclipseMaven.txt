How to Debug a Spring MVC web application using Eclipse and Maven
-----------------------------------------------------------------


Assumptions:  
 A) You have Eclipse installed
 B) You have Maven installed
 C) Your Maven configuration can download files from a maven repository
 
 
 
Procedures
----------
 1. Create your "mywebapp1" Maven project in Eclipse
    a. Startup Eclipse
       If you see the "Welcome" page, press the "X" next to it -- to remove the Welcome page
       If prompted for your workspace, use c:\tools\eclipse\workspace
       
    b. Pull File / New / Project...
        -- Choose Web -> Dynamic Web Project
        -- Press Next
        
    c. In the next screen
       Project Name:  mywebapp1
       Check "Use the default workspace"
       Press "New Runtime..."
       
        1) On New Server Runtime Environment
             -- Select Apache Tomcat v7.0
             -- Press "Next"
             
        2) On Tomcat Server
             -- Under Tomcat installation directory:  c:\tools\apache-tomcat-7.0.59   
                *OR* press "Browse" and browse to Computer -> Local Diskc (C:) -> tools -> apache-tomcat-7.0.59   
             -- Press "Finish"
             
    d. Back on Dynamic Web Project screen
       Press "Next"
       
    e. On the Java screen
       Press "Next"
       
    f. For the Web Module screen
       Context root:         mywebapp1
       Content directory:    src/main/webapp
       Check the checkbox to "Generate web.xml deployment desciptor"
       Press "Finish"
 
        
        
 2. Convert your web project into a Maven project        
    a. Right-click on mywebapp1 -> Configure -> Convert to Maven Project
               
    b. In the next screen
       Group Id:     com.resnick
       Artifact Id:  mywebapp1
       Version:      0.0.1-SNAPSHOT
       Packing:      war
       Press Finish
          
       NOTE:  This will generate a pom.xml file



 3. Setup the standard Maven directories for your Eclipse project
    Eclipse projects put java source code here:
      src/
              
    But, Maven uses this directory sturcture
       src/main/java/                         # Holds the java code used by the web app
       src/main/resources/                    # Holds the logback.xml used by java code
       src/main/webapp/    
       src/main/webapp/resources/             # Holds the javascript and css files used by webapp
       src/main/webapp/META-INF/
       src/main/webapp/WEB-INF/  
       src/test/               
       src/test/java                          # Holds unit test java code
       src/test/resources/                    # Holds the logback.xml used by unit test code
      
    So, we need to create these directories and tell Eclipse to use them
    
    a. Remove this line from your pom.xml
          <sourceDirectory>src</sourceDirectory>
   
    b. Right-click on the src -> Build Path -> Remove from Build Path
      
    c. Right-click on src/main        -> New -> Folder:    java
    d. Right-click on src/main        -> New -> Folder:    resources
    e. Right-click on src/main/webapp -> New -> Folder:    resources
   
    f. Right-click on src             -> New -> Folder:    test
    g. Right-click on src/test        -> New -> Folder:    java
    h. Right-click on src/test        -> New -> Folder:    resources

    Now, you should have this directory structure
       src/main/java/ 
       src/main/resources/               # Holds logback.xml used by java code     
       src/main/webapp/                  
       src/main/webapp/resources/        # Holds any images, javascript, or css
       src/main/webapp/META-INF/
       src/main/webapp/WEB-INF/  
       src/test/
       src/test/java
       src/test/resources/               # Holds logback.xml used by unit test code
   
    i. Right-click on src/main/java      -> Build Path -> Use as Source Folder
    j. Right-click on src/main/resources -> Build Path -> Use as Source Folder
    k. Right-click on src/test/java      -> Build Path -> Use as Source Folder
    l. Right-click on src/test/resources -> Build Path -> Use as Source Folder


    m. Right-click on mywebapp1 -> Maven -> Update Project...
       In the "Update Maven Project" screen, press <OK>       
 
    n. Right-click on the src -> Build Path -> Remove from Build Path
 

 5. Tell Eclipse to include Tomcat libraries [so that jsp page validation works properly]
    a. Right-click on "mywebapp1" -> Build Path -> Configure Build Path...
    b. Click on the "Libraries" tab
       If you do not see "Apache Tomcat v7.0" then follow these steps
         1) Press "Add Library"
         2) Select "Server Runtime"
         3) Select Apache Tomcat v7.0
            Press <Finish>
            Press <OK>
            
       
           
 6. Add dependencies for Spring, Web development, and Logback
    NOTE:  You can copy the <dependency> tags to your pom.xml *OR* 
           Enter each dependecy one at a time by right-clicking on mywebapp1 -> Maven -> Add Dependency

    a. Click on mywebapp1 -> Java Resources -> Libraries -> Maven Dependencies
       NOTE:  You should see nothing
        
    b. Add the dependency for the Spring MVC framework
       Right-click on mywebapp1 -> Maven -> Add Dependency
        
       NOTE:  If no scope is listed here, then use the default scope of "compile"

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>4.1.1.RELEASE</version>
        </dependency>
 
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>4.1.1.RELEASE</version>
        </dependency>
   
 
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>4.1.1.RELEASE</version>
        </dependency>

    
        <!-- Spring Core -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>4.1.1.RELEASE</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
                

        
    
    c. Add the dependency for Java Server Template Library (jstl)  
       Right-click on mywebapp1 -> Maven -> Add Dependency
         <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
         </dependency>
    
            
    d. Add the dependencies for sending log4j logging to logback (part 1)
       Right-click on mywebapp1 -> Maven -> Add Dependency         
         <dependency>
            <!-- Bridge Logging from Java Common Logging to SLF4J -->
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.5</version>
         </dependency>
        

    e. Add the dependencies for logging (part 2)
       Right-click on mywebapp1 -> Maven -> Add Dependency         
         <dependency>
            <!-- Send Logging from SLF4j to Logback -->
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
         </dependency>

            
    f. Add the dependencies for Tomcat
       Right-click on mywebapp1 -> Maven -> Add Dependency         
       NOTE:  Scope is *provided*
        
         <dependency> 
            <!-- Tomcat provides the servlet classes -->
            <groupId>javax.servlet</groupId> 
            <artifactId>javax.servlet-api</artifactId> 
            <version>3.0.1</version> 
            <scope>provided</scope> 
         </dependency>


       
 7. Create your src / main / webapp / WEB-INF / jsp directory
    a. Browse to src/main/webapp/WEB-INF 
    b. Right-click on WEB-INF -> New -> Folder
       Folder name:  jsp
       Press "Finish"



 8. Create your src / main / webapp / WEB-INF / spring directory
    a. Browse to src/main/webapp/WEB-INF 
    b. Right-click on WEB-INF -> New -> Folder
       Folder name:  spring
       Press "Finish"
       
       
       
 9. Update your web.xml to load Spring
    WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

    a. Browse to src / main / webapp / WEB-INF / web.xml
    
       The original web.xml probably looks like this:
       
        <?xml version="1.0" encoding="UTF-8"?>
        <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
          <display-name>mywebapp1</display-name>
          <welcome-file-list>
            <welcome-file>index.html</welcome-file>
            <welcome-file>index.htm</welcome-file>
            <welcome-file>index.jsp</welcome-file>
            <welcome-file>default.html</welcome-file>
            <welcome-file>default.htm</welcome-file>
            <welcome-file>default.jsp</welcome-file>
          </welcome-file-list>
        </web-app>
    
    
    b. Change it to this:
       NOTE:   The file must *start* with <?xml...... There can be no loading spaces
        
        <?xml version="1.0" encoding="UTF-8"?>
        <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">

            <display-name>mywebapp1</display-name>
            
            <welcome-file-list>
                <welcome-file>default.jsp</welcome-file>
            </welcome-file-list>

            <!-- Configure ContextLoaderListener to use XML files as configuration. -->
            <context-param>
            <description>Type of context to load - spring</description>
            <param-name>contextClass</param-name>
            <param-value>org.springframework.web.context.support.XmlWebApplicationContext</param-value>
            </context-param>


            <!-- Configure the application context XML file locations.  -->
            <context-param>
            <description>Location of context config file(s)</description>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/spring/applicationContext.xml</param-value>
            </context-param>


            <servlet>
                <servlet-name>dispatcher</servlet-name>
                <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                <init-param>
                    <param-name>contextConfigLocation</param-name>
                    <param-value>/WEB-INF/spring/dispatch-servlet.xml</param-value>
                </init-param>
                <load-on-startup>1</load-on-startup>
            </servlet>

            <servlet-mapping>
                <servlet-name>dispatcher</servlet-name>
                <url-pattern>/</url-pattern>
            </servlet-mapping>
              
        </web-app>

    
10. Create this file:  applicationContext.xml
    a. Browse to src / main / webapp / WEB-INF / spring -> new -> file
       File name:  applicationContext.xml
       Press "Finish"
    
    b.  Copy this into your new file
        WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
        
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:aop="http://www.springframework.org/schema/aop" 
            xmlns:context="http://www.springframework.org/schema/context"
            xmlns:jee="http://www.springframework.org/schema/jee" 
            xmlns:mvc="http://www.springframework.org/schema/mvc"
            xmlns:tx="http://www.springframework.org/schema/tx"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/aop
                                http://www.springframework.org/schema/aop/spring-aop.xsd
                                http://www.springframework.org/schema/beans
                                http://www.springframework.org/schema/beans/spring-beans.xsd
                                http://www.springframework.org/schema/context
                                http://www.springframework.org/schema/context/spring-context.xsd
                                http://www.springframework.org/schema/jee
                                http://www.springframework.org/schema/jee/spring-jee.xsd 
                                http://www.springframework.org/schema/mvc
                                http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                                http://www.springframework.org/schema/tx
                                http://www.springframework.org/schema/tx/spring-tx-xsd">
    
           
           <!-- Autodetect classes and register the corresponding beans -->
           <context:component-scan  
                base-package="app1"
                use-default-filters="true">
            
                <context:exclude-filter 
                    type="annotation"
                    expression="org.springframework.stereotype.Controller"/>
            </context:component-scan>
           
           
           
            <!-- Allow the use of @Autowire and @Required -->
            <context:annotation-config />
            
                     
           
            <!--
                    This will automatically locate any and all property files you have
                    within your classpath, provided they fall under the META-INF
                    directory. The located property files are parsed and their values can
                    then be used within application context files in the form of
                    ${propertyKey}.
            -->
            <context:property-placeholder location="classpath*:*.properties" />
            
            
            <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                <property name="order" value="2" />
                <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
                <property name="prefix" value="/WEB-INF/jsp/" />
                <property name="suffix" value=".jsp" />
            </bean>
             
    </beans>
    
    
    
11. Create this file:  dispatch-servlet.xml
    a. Browse to src / main / webapp / WEB-INF / spring -> new -> file
       File name:  dispatch-servlet.xml
       Press "Finish"
    
    b. Copy this into your new file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
        
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:aop="http://www.springframework.org/schema/aop" 
            xmlns:context="http://www.springframework.org/schema/context"
            xmlns:jee="http://www.springframework.org/schema/jee" 
            xmlns:mvc="http://www.springframework.org/schema/mvc"
            xmlns:tx="http://www.springframework.org/schema/tx"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/aop
                                http://www.springframework.org/schema/aop/spring-aop.xsd
                                http://www.springframework.org/schema/beans
                                http://www.springframework.org/schema/beans/spring-beans.xsd
                                http://www.springframework.org/schema/context
                                http://www.springframework.org/schema/context/spring-context.xsd
                                http://www.springframework.org/schema/jee
                                http://www.springframework.org/schema/jee/spring-jee.xsd 
                                http://www.springframework.org/schema/mvc
                                http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                                http://www.springframework.org/schema/tx
                                http://www.springframework.org/schema/tx/spring-tx-xsd">
    
            <!-- Autodetect classes and register the beans -->
            <!-- This context:component-scan should built upon the one 
                 that was already don in the applicationContext.  The goal is to add in the @Controller
                 annotations to the context since Spring MVC requires that those beans are
                 registered at this level.
                 
                 If context:component-scans a file, then it will overwrite anything
                 that wdone for that file in the applicationContext's component-scan.
                 So, you should use point to the package that was previously ignored,
                 or use the resource-pattern property to only scan the corret Java files
                 
                 Be careful if you use the filter tags within the component-scan
                 because that doesn't prevent the file from being scanned, and 
                 will likely cause you to overwrite something that you didn't mean to.
             -->
             <context:component-scan
                    base-package="app1"
                    use-default-filters="false">
                    
                    <!-- Make sure that the use-default filters property is set to false.
                         When a file is scanned with the @Controller annotation,
                         it should be included in the context at this point. -->
                    <context:include-filter
                        type="annotation"
                        expression="org.springframework.stereotype.Controller" />
                        
                    <context:include-filter
                        type="annotation"
                        expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
             </context:component-scan>


            <!-- Map the relative address for certain locations -->
            <mvc:resources  mapping="/resources/**"  location="/resources/" />
                                                  
                                      
            <!-- Registers the DefaultAnnotationhandlerMapping and AnnotationMethodHandlerAdapter beans
                (that are required for Spring MVC to dispatch requests to @Controllers -->
            <mvc:annotation-driven />
    
    
            <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                <property name="order"     value="2" />
                <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
                <property name="prefix"    value="/WEB-INF/jsp/" />
                <property name="suffix"    value="" />
            </bean>                       
                            
    </beans>            
    


12. Create this file:  logback.xml
    a. Browse to mywebapp1 -> src/main/resources
    b. Right-click on classes -> New -> File
       filename:  logback.xml
       
    c. Right-click on logback.xml -> Open With -> Text Editor
       Copy this contents to your file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
    
    
        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>
        
        <configuration debug="true">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                </encoder>
            </appender>
            
            
            <logger name="org.springframework" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
            
            <logger name="app1" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>   
            
            <root level="DEBUG">
                <appender-ref ref="CONSOLE"/>
            </root>
            
        </configuration>





13. Create this file:  UserInfo.java
    a. Right-click on mywebapp1 -> src/main/java -> New -> Package
       Name:  app1.model
       
    b. Right-click on app1.model -> New -> Class
       Name:  UserInfo
       Press "Finish"   
               
    c. Copy this java code to UserInfo.java
           
        package app1.model;
        
        public class UserInfo
        {
            private boolean isAdministrator = false;
            private String username;
            
            
            public UserInfo()
            {
                
            }
            
            public boolean getIsAdministrator()
            {
                return this.isAdministrator;
            }
            
            public void setIsAdministrator(boolean aValue)
            {
                this.isAdministrator = aValue;
            }
            
            public String getUserName()
            {
                return this.username;
            }
            
            public void setUserName(String aUserName)
            {
                this.username = aUserName;
            }
        }
        
            

    
    
14. Create this file:  WelcomeController.java
    a. Right-click on mywebapp1 -> src/main/java -> New -> Package
       Name:  app1.controllers
       
    b. Right-click on app1.controllers -> New -> Class
       Name:  WelcomeController
       Press "Finish"   
               
    c. Copy this java code to WelcomeController.java
    
        package app1.controllers;
        
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.stereotype.Controller;
        import org.springframework.ui.Model;
        import org.springframework.web.bind.annotation.RequestMapping;
        import org.springframework.web.servlet.ModelAndView;
        import app1.model.UserInfo;
        
        
        @Controller
        public class WelcomeController 
        {
            private final static Logger logger = LoggerFactory.getLogger(WelcomeController.class);
             
            /**********************************************************************
             * mainPage()
             * 
             * The user browsed to the /welcome page
             *  1) Get a userinfo object setup
             *  2) Forward the user to the welcome.jsp page
             ***********************************************************************/
            @RequestMapping("/welcome")
            public ModelAndView mainPage( Model aModel )
            {
                logger.debug("mainPage() started");
                        
                // Create a modelAndView object
                ModelAndView mav = new ModelAndView();
                
                // Show the welcome.jsp page
                mav.setViewName("welcome.jsp");
                
                // Create a userInfo object
                UserInfo userInfo = new UserInfo();
                userInfo.setUserName("Adam");
                userInfo.setIsAdministrator(true);
                
                // Add the userInfo information to the view
                mav.addObject("userInfo", userInfo);
                
                logger.debug("mainPage() finished");
                return mav;
            }
        }




15. Create this file:  stdJspIncludes.jsp
    a. Browse to  src / main / webapp / WEB-INF / jsp  -> Right-Click -> New -> File
       File name:  stdJspIncludes.jsp

    b. Copy this java code to stdJspIncludes.jsp

        <%@ page session="false" language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" %>
        
        <%-- Allow all JSPs to use the tag libraries --%>
        <%@ taglib prefix='c'      uri='http://java.sun.com/jsp/jstl/core' %>
        <%@ taglib prefix='spring' uri='http://www.springframework.org/tags' %>
        <%@ taglib prefix='form'   uri='http://www.springframework.org/tags/form' %>
        
        <%-- Allow all JSPs to have the contextPath variable --%>
       <c:set var="contextPath" value="${pageContext.request.contextPath}" />
        
        
    
        
    
16. Create this file:  stdHeader.jsp
    a. Browse to  src / main / webapp / WEB-INF / jsp -> Right-Click -> New -> File
       File name:  stdHeader.jsp

    b. Copy this java code to stdHeader.jsp

        <table style="width: 100%; border: 1px solid black">
            <tr>
                <td align="center">Standard Header is here</td>
            </tr>
        </table>
        
    
    
    
17. Create this file:  stdFooter.jsp
    a. Browse to  src / main / webapp / WEB-INF / jsp -> Right-Click -> New -> File
       File name:  stdFooter.jsp

    b. Copy this java code to stdFooter.jsp

        <table style="width: 100%; border: 1px solid black">
            <tr>
                <td align="center">Standard Footer is here</td>
            </tr>
        </table>


    
    
18. Create this file:  welcome.jsp
    a. Browse to  src / main / webapp / WEB-INF / jsp -> Right-Click -> New -> File
       File name:  welcome.jsp
    
    b. Copy this java code to welcome.jsp
    
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <!DOCTYPE HTML>
        
        <html xmlns="http://www.w3.org/1999/xhtml">
        
        <head>
            <title>Welcome Page</title>
        </head>
        
        <body>
            
            <%-- S T A N D A R D       H E A D E R  --%>
            <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
            
            <h2>welcome.jsp</h2>
            
            <br/>
            
            Hello ${userInfo.userName} <br/>
            Are you an administrator: ${userInfo.isAdministrator }
               
            <br/>
            <br/>    
        
            <%-- S T A N D A R D       F O O T E R  --%>
            <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
            
        </body>
        </html>
        
        
        

        
19. Create this file:  default.jsp
    a. Browse to  src / main / webapp /    -> New -> File
       File name:  default.jsp
    
     b. Copy this java code to default.jsp
    
        <%@ page session="false" %>
        <%@ page language="java" contentType="text/html;charset=UTF-8" %>
        <!DOCTYPE html>
        
        <%-- If a user visits http://localhost:8080/webapp1/, then forward them to http://localhost:8080/webapp1/welcome  --%>
        <jsp:forward page="/welcome" />
            
        
        
        
        
20. Pull File / Save All
        
        
21. Startup the webapp in debug mode
    a. Browse to src/main/java -> app1.controllers -> WelcomeController.java
       Click in the left margin around line 30 to set a breakpoint
       
    b. Right-click on mywebapp1 -> Debug As -> Debug on Server
       -- In the "Debug on Server", 
          Single-click on Tomcat v.7.0 Server
          Check "Always use this server when running this projecdt"
          Press "Next"
          Press "Finish"
           
    
    
    
  
    
What happens when you start the debugger
----------------------------------------
 1) Your browser opens to here:  http://localhost:8080/webapp1
    
 2) Your tomcat will see if a default.jsp page exists
    It does, so Tomcat forwards you to http://localhost:8080/webapp1/default.jsp 
 
 3) Your default.jsp page forwards you to here: 
    http://localhost:8080/webapp1/welcome
       
 4) Your WelcomeController has this line in it:
    @RequestMapping("/welcome")
    public ModelAndView mainPage( Model aModel )
    {
    
    }
    
    So your mainPage() method is executed
    
    
 5) The WelcomeController.mainPage() method then does the following
    a) Creates a UserInfo object
    b) Binds that UserInfo object to your welcome.jsp
    c) Forward the user to the welcome.jsp page  [with the UserInfo object bound to it].
     
     -- As a result, the user sees the welcome.jsp page  [with the information attached to it]
     
