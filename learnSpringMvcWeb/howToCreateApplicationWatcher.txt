How to add an Application Watcher class to a Spring Web App
-----------------------------------------------------------

The Application Watcher class is handy because it's the first thing that gets called when your web starts-up.
 


Procedures
----------
 1. Add this to your web.xml

    <!-- Declare the application context which is loaded on startup and shared by all web context (Spring DispatcherServlet) -->
    <listener>
        <description>Tell Spring where my application watcher is</description>
        <listener-class>
            <!-- NOTE:  This extends Spring's ContextLoaderListener -->
            app1.utilities.MyApplicationWatcher
        </listener-class>
    </listener>

    
    
 2. Create a new class:  MyApplicationWatcher.java
    a. Right-click on mywebapp1 -> new -> Class
   
    b. Package: app1.utilities
       Name:    MyApplicationWatcher
       Press "Finish"
     
             
		package app1.utilities;
		
		
		import javax.servlet.ServletContextEvent;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.web.context.ContextLoaderListener;
		
		public class MyApplicationWatcher extends ContextLoaderListener
		{
		    private static final Logger logger = LoggerFactory.getLogger( MyApplicationWatcher.class );
		
		
		    /***********************************************************************************
		     * contextInitialized()
		     *  1) Read the property file for this webapp
		     *  2) Initialize the Spring Context
		     *
		     * NOTE:  If a runtime exception is thrown, then the webapp will *not* startup
		     ************************************************************************************/
		    @Override
		    public void contextInitialized( ServletContextEvent aContextEvent )
		    {
		        // Get the name of the web application
		        final String sWebAppName = aContextEvent.getServletContext().getContextPath().substring(1);
		
		        logger.debug("{} contextInitialized() started", sWebAppName);
		
		        try
		        {
		            // I N I T I A T E      S P R I N G       C O N T E X T
		            super.contextInitialized( aContextEvent );
		
		            // Do additional tests -- e.g., verify that the database can be reached
		
		        }
		        catch (Exception e)
		        {
		            logger.error("{} WILL NOT STARTUP", sWebAppName);
		
		            // Throw a runtime exception so that this webapp will *not* startup
		            RuntimeException runtimeException = new RuntimeException(e);
		            runtimeException.setStackTrace(e.getStackTrace());
		            throw runtimeException;
		        }
		
		        logger.debug("{} contextInitialized() finished", sWebAppName);
		    }
		
		
		    /***********************************************************************************
		     * contextDestroyed()
		     * The webapp is about to be shutdown
		     *   1) Shutdown any database connection pools manually
		     *   2) Shutdown the spring context
		     ************************************************************************************/
		    @Override
		    public void contextDestroyed( ServletContextEvent aContextEvent )
		    {
		        // Get the name of the web application
		        final String sWebAppName = aContextEvent.getServletContext().getContextPath().substring(1);
		
		        logger.debug("{} contextDestroyed() started", sWebAppName);
		
		        super.contextDestroyed(aContextEvent);
		      
		        logger.debug("{} contextDestroyed() finished", sWebAppName);
		    }
		
		
		}

    
