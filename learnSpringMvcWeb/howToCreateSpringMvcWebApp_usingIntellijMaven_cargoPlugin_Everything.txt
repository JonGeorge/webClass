How to Debug a Spring MVC web application using Intellij, Maven, and the Cargo Plugin
-------------------------------------------------------------------------------------


Assumptions:  
 A) You have Intellij 14 Community Edition installed
 B) You have Maven installed
 C) Your Maven configuration can download files from a maven repository
 D) You want to use the Cargo maven plugin to run your local Tomcat
 E) You have Tomcat setup here:  C:\tools\apache-tomcat-7.0.55

 
 
Procedures
----------
 1. Create a Spring MVC Web App                 
    [see howToCreateSpringMvcWebApp_usingIntellijMaven_cargoPlugin.txt]

    DOS>  mvn clean install cargo:run
            will have your webapp deployed to your tomcat and startup Tomcat in debug mode
 

 2. Add jquery
    [see howToAddJQueryToSpringMvcAppUsingIntellij.txt] 
    


 3. Add Bootstrap
    [see howToAddBootstrapToSpringMvcUsingIntellij.txt]
    
    
  
 4. Add Angular 
    [see howToAddAngularToSpringMvcWebApp.txt]

    
 
 5. Add DataTables.net
    [see learnDataTablesNet/howToAddDataTablesNetToSpringMvcWebApp.txt]
    
    
 
 6. Add SiteMesh (to act as a layout mechanism for the web app)
    [see howToAddSiteMeshToSpringMvcWebApp.txt]
    
    
    
 7. Place your stdHeader.jsp, stdFooter.jsp, and stdJspIncludes.jsp into the layout.jsp
    a. Edit your WEB-INF/jsp/layout.jsp so it looks like this:
 
        <%@ page session="false" language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" %>
        <%@ taglib prefix='c'      uri='http://java.sun.com/jsp/jstl/core' %>
        <%@ taglib prefix='spring' uri='http://www.springframework.org/tags' %>
        <%@ taglib prefix='form'   uri='http://www.springframework.org/tags/form' %>
        
        <%-- Allow all JSPs to have the contextPath variable --%>
        <c:set var="contextPath" value="${pageContext.request.contextPath}" />
        
        <!DOCTYPE HTML>
        <html>
            <head>
                <title><sitemesh:write property='title'/></title>
            
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
            
                <%-- Load Bootstrap CSS --%>
                <link href="${contextPath}/resources/bootstrap-3.3.4/css/bootstrap.min.css" rel="stylesheet" media="screen">
            
                <%-- Load Bootstrap CSS Themes --%>
                <link href="${contextPath}/resources/bootstrap-3.3.4/css/bootstrap-theme.min.css" rel="stylesheet" media="screen">
            
                <%-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries --%>
                <!--[if lt IE 9]>
                  <script src="${contextPath}/resources/bootstrap-3.3.4/assets/html5shiv.js"></script>
                  <script src="${contextPath}/resources/bootstrap-3.3.4/assets/respond.min.js"></script>
                <![endif]-->
            
                <link rel="stylesheet" href="${contextPath}/resources/DataTables-1.10.9/media/css/jquery.dataTables.min.css?compile=false"  />
                
                <%-- P A G E      H E A D    S E C T I O N  --%>
                <sitemesh:write property='head'/>
            </head>
            <body>
                <%-- Standard Header is here  --%>
                <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
        
                <%-- P A G E     B O D Y     --%>
                <sitemesh:write property='body'/>
        
                <%-- Standard Footer is here --%>
                <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
        
                <%-- Load jQuery --%>
                <script src="${contextPath}/resources/jquery-1.11.3/jquery-1.11.3.min.js" type="text/javascript"></script>
        
                <%-- Load bootstrap copmiled plugins --%>
                <script src="${contextPath}/resources/bootstrap-3.3.4/js/bootstrap.min.js" type="text/javascript"></script>
        
                <%-- Load Angular --%>
                <script src="${contextPath}/resources/angular-1.3.16/angular.min.js" type="text/javascript"></script>
        
                <%-- Load DataTables.net --%>
                <script src="${contextPath}/resources/DataTables-1.10.9/media/js/jquery.dataTables.min.js?compile=false" type="text/javascript" ></script>
        
                <%-- I N S E R T        P A G E        J A V A S C R I P T    using <content tag="bottom_js">  --%>
                <sitemesh:write property="page.bottom_js"/>
            </body>
        </html>
            
    
    b. Edit your WEB-INF/jsp/welcome.jsp so it looks like this:
       NOTE:  Local javascript must be stored in <content tag="bottom_js">...</content>
       
        <html>
        
        <head>
            <title>Welcome Page</title>
        </head>
        
        <body>
            <h2>welcome.jsp</h2>
        
            <br/>
        
            Hello ${userInfo.userName} <br/>
            Are you an administrator: ${userInfo.isAdministrator }
        
            Table is here
            <table id="position" class="display"></table>
        
            <br/>
            <br/>
        
            <content tag="bottom_js">
                <script type="text/javascript">
        
                        var myDataSet =
                        [
                                [ "Person 1", "Person 1's position"],
                                [ "Person 2", "Person 2's position"],
                                [ "Person 3", "Person 3's position"],
                                [ "Person 4", "Person 4's position"],
                                [ "Person 5", "Person 5's position"],
                                [ "Person 6", "Person 6's position"],
                                [ "Person 7", "Person 7's position"],
                                [ "Person 8", "Person 8's position"],
                                [ "Adam", "System Architect"],
                                [ "Ben", "Mgmt Consultant"],
                                [ "Peter", "Doctor"],
                                [ "Justin", "Psychologist"],
                                [ "Joel", "Policy Analyst"]
                        ];
        
        
                        $(document).ready( function ()
                        {
        
                            $('#position').DataTable(
                            {
                                data:   myDataSet,
                                columns: [
                                    { title: "Name" },
                                    { title: "Position" }
                                ]
                             } );
        
                        } );
        
                 </script>
            </content>
        
        </body>
        </html> 
            
    
    c. Delete this file:  /WEB-INF/jsp/stdJspIncludes.jsp 
    
       
 
 8. Add a Bootstrap menubar to the main layout template  (so it appears on every page)
    a. Edit the stdHeader.jsp so that it looks like this:
         
            <%-- B O O T S T R A P     M E N U     B A R --%>
            <nav role="navigation" class="navbar navbar-inverse navbar-fixed-top">
                <!-- Grouping Brand with Toggle for better mobile display -->
                <div class="navbar-header">
                    <button type="button" data-target="#navbarCollapse" data-toggle="collapse" class="navbar-toggle">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a href="#" class="navbar-brand">Brand</a>
                </div>

                <!-- Next nav links in the Navbar -->
                <div id="navbarCollapse" class="collapse navbar-collapse">
                    <ul class="nav navbar-nav">
                        <li class="active"><a href="#"><span class="glyphicon glyphicon-home"></span> Home</a></li>
                        <li class="dropdown">
                            <a data-toggle="dropdown" class="dropdown-toggle" href="#"><span class="glyphicon glyphicon-certificate"></span> DotNetFunda <b class="caret"></b></a>
                            <ul role="menu" class="dropdown-menu">
                                <li><a href="#">Articles</a></li>
                                <li><a href="#">Interviews</a></li>
                                <li><a href="#">Forums</a></li>
                                <li class="divider"></li>
                                <li><a href="#">About Us</a></li>
                                <li><a href="#">Contact Us</a></li>
                            </ul>
                        </li>
                        <li class="dropdown">
                            <a data-toggle="dropdown" class="dropdown-toggle" href="#"><span class="glyphicon glyphicon-book"></span> ITFunda <b class="caret"></b></a>
                            <ul role="menu" class="dropdown-menu">
                                <li><a href="#">Training</a></li>
                                <li><a href="#">Placement</a></li>
                                <li class="divider"></li>
                                <li><a href="#">FAQ's</a></li>
                                <li><a href="#">Write Us</a></li>
                            </ul>
                        </li>
                        <li><a href="#"><span class="glyphicon glyphicon-gift"></span> KidsFunda</a></li>
                        <li><a href="#"><span class="glyphicon glyphicon-film"></span> FundooVideo</a></li>
                    </ul>
                    <form role="search" class="navbar-form navbar-left">
                        <div class="form-group">
                            <%-- S E A R C H     B O X  --%>
                            <input type="text" placeholder="Search" class="form-control">
                        </div>
                    </form>
                    <ul class="nav navbar-nav navbar-right">
                        <li><a href="#">Contact</a></li>
                        <li class="dropdown">
                            <a data-toggle="dropdown" class="dropdown-toggle" href="#"><span class="glyphicon glyphicon-user"></span> Krishna <b class="caret"></b></a>
                            <ul role="menu" class="dropdown-menu">
                                <li><a href="#"><span class="glyphicon glyphicon-phone"></span> Friends</a></li>
                                <li><a href="#"><span class="glyphicon glyphicon-envelope"></span> Messages</a></li>
                                <li><a href="#"><span class="glyphicon glyphicon-globe"></span> Notifications</a></li>
                                <li class="divider"></li>
                                <li><a href="#"><span class="glyphicon glyphicon-cog"></span> Settings</a></li>
                                <li><a href="#"><span class="glyphicon glyphicon-off"></span> Logout</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </nav>
    
    
    
    b.  Add this to the layout.jsp right *ABOVE* the closing </head>
       
            <style text="type/css">
               body {
                   /* Add some padding to the top because the navbar is fixed to the top */
                   padding-top: 50px;
               }
            </style>
 
 
 
 9. Setup JAWR to bundle and minify JS and CSS files 
    [see howToBundleJsAndCssUsingJawr.txt]


    
10. Add a MyApplicationWatcher class (that gets called when web app starts up)
    [see howToCreateApplicationWatcher.txt]


    
11. Setup a Mysql Database
    a. Install MySql somewhere
    b. Turn it on
    c. Make sure your Tomcat can reach the MySql database


    
12. Add a JDBC Connection Pool to a MySql Database  (mysqlDataSource spring bean) 
    [see learnJdbcConnectionPools / mysql / howToSetupSpringBeanConnectPoolWithTomcat7.txt]
   
    When having Tomcat manage your connection pool, the connector jar must be in the <Tomcat-Home>/lib directory
    CRITICAL:  Copy the mysql-connector-java-5.1.32.jar to your <Tomcat-Home>/lib
    
    You will find this jar file here in your local maven repo:
           C:\tools\local_maven_repo\mysql\mysql-connector-java\5.1.32\mysql-connector-java-5.1.32.jar


    
13. Verify that the connection pool releases connection on web shutdown
    [see learnJdbcConnectionPools / mysql / howToVerifyConnectionsAreReleasedOnShutdown.txt]


    
14. Move the plain-text JDBC settings (in applicationContext.xml) to a property file
    a. Create a springMvcWebAppE.properties file here:
       /src/main/resources/springMvcWebAppE.properties
    
    
    b. Copy this to the new property file:
        ##################################################################
        # springMvcWebAppE.properties
        #
        ##################################################################
        
        # JDBC Driver Settings
        jdbc.driverClassName=com.mysql.jdbc.Driver
        jdbc.url=jdbc:mysql://127.0.0.1:3306/world
        jdbc.username=root
        jdbc.password=secret
        jdbc.initialSize=1
        jdbc.maxActive=15
        jdbc.removeAbandoned=true
        jdbc.removeAbandonedTimeout=60000
        jdbc.validationQuery=select now()
        jdbc.validationQueryTimeout=30000
        jdbc.validationInterval=30000    
        
        
    c. Add this spring bean to your applicationContext.xml
        <!-- Setup a spring bean to hold all of the properties in springMvcWebAppE.properties  -->
        <bean id="myProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="locations" value="classpath:springMvcWebAppE.properties" />
        </bean>

    
    d. Verify that this is found in applicationContext.xml
          <context:property-placeholder location="classpath*:*.properties" />
       NOTE:  This lets us use ${jdbc.url} variables by pulling those values from all files that end with .properties in the classpath
              
    
    e. Replace the "mysqlDataSource" spring bean with this (in your applicationContext.xml):
        <!-- Setup a spring bean that acts as a Connection pool                               -->
        <!-- NOTE:  Set destroy-method="close" so that Spring will close the connection pool  -->
        <bean id="mysqlDataSource" class="org.apache.tomcat.jdbc.pool.DataSource"  destroy-method="close">
          <property name="driverClassName"         value="${jdbc.driverClassName}"        />
          <property name="url"                     value="${jdbc.url}"                    />
          <property name="username"                value="${jdbc.username}"               />
          <property name="password"                value="${jdbc.password}"               />
          <property name="initialSize"             value="${jdbc.initialSize}"            />
          <property name="maxActive"               value="${jdbc.maxActive}"              />
          <property name="removeAbandoned"         value="${jdbc.removeAbandoned}"        />
          <property name="removeAbandonedTimeout"  value="${jdbc.removeAbandonedTimeout}" />
          <property name="validationQuery"         value="${jdbc.validationQuery}"        />
          <property name="validationQueryTimeout"  value="${jdbc.validationQueryTimeout}" />
          <property name="validationInterval"      value="${jdbc.validationInterval}"     />
        </bean>  
       
       
    f. Verify that you can pull property values out using code:
       1) Add this to your MyApplicationWatcher class
       
        /*******************************************************************************
         * verifyPropertyValues()
         *******************************************************************************/
        private void verifyPropertyValues() throws Exception
        {
            // Get a reference to the "myProps" spring bean
            Properties myProps = (Properties) SpringAppContextUtils.getBean("myProps");
    
            String sJdbcUrl = (String) myProps.getProperty("jdbc.url");
            logger.debug("sJdbcUrl={}", sJdbcUrl);
    
            if (sJdbcUrl == null)
            {
                throw new RuntimeException("Error in verifyPropertyValues:  This value was not found:  jdbc.url");
            }
        }
        
       
       2) Change the contextInitialized to this
         
       public void contextInitialized( ServletContextEvent aContextEvent )
        {
            // Get the name of the web application
            final String sWebAppName = aContextEvent.getServletContext().getContextPath().substring(1);
    
            logger.debug("{} contextInitialized() started", sWebAppName);
    
    
            try
            {
                // I N I T I A T E      S P R I N G       C O N T E X T
                super.contextInitialized(aContextEvent);
    
                // Verify that I can get property values
                verifyPropertyValues();
    
                // Do additional tests
                verifyConnectionPool();
            }
            catch (Exception e)
            {
                logger.error("{} WILL NOT STARTUP", sWebAppName);
    
                // Throw a runtime exception so that this webapp will *not* startup
                RuntimeException runtimeException = new RuntimeException(e);
                runtimeException.setStackTrace(e.getStackTrace());
                throw runtimeException;
            }
    
            logger.debug("{} contextInitialized() finished", sWebAppName);
        }
    



    
15. Encode the JDBC settings within the springMvcWebAppE.properties file
    [see howToEncryptPropertyValues.txt]     


    
16. Setup a rolling log appender when running in production mode
    [see sampleLogbackXmlRollingFileAppender.txt]
    
    Copy the file contents from sampleLogbackXmlRollingFileAppender.txt to here:
      /src/main/resources/logback.xml
      
    Now, your webapp (when deployed) will only log to the log file   
  


17. Setup an error controller and error page  
    INCOMPLETE  
  
   

18. Setup security with a login page, logout page, and a Security Filter
    INCOMPLETE


   
19. Externalize the web app's property file
    a. Create a src/main/config/ directory
    b. Copy /src/main/resources/springMvcWebAppE.properties to /src/main/config/
    c. 
    INCOMPLETE


    
20. Add a new page with an openLayers map on it
    INCOMPLETE



21. Use Angular to make an AJAX call to get data and display it using dataTables.net
    INCOMPLETE


  
22. Use Angular to display a new view 
    INCOMPLETE
    

    
23. Have back-end run a Solr search and return results to a view
    INCOMPLETE
    
    
    
