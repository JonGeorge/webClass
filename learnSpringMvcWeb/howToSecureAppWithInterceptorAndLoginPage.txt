How to Secure Spring Web App with a HandlerInterceptor and Login Page
---------------------------------------------------------------------


Assumption
 A) You have a Spring MVC web app
 B) You want to setup a Login page 
 C) You want to setup a Logout page
 D) You want all pages to make sure that the user is logged-in (except the login page and error page)
 

Procedure
---------
 1. If you do not already have, then create a UserInfo object
    NOTE:  This class will hold information in the session about the user
     
        package app1.model;
        
        public class UserInfo
        {
            private boolean isAdministrator = false;
            private String username;
            private boolean isUserAuthenticated = false;
        
            public UserInfo()
            {
        
            }
        
            public boolean getIsAuthenticated() { return this.isUserAuthenticated; }
            public void setIsAuthenticated(boolean aValue)
            {
                this.isUserAuthenticated = aValue;
            }
        
            public boolean getIsAdministrator()
            {
                return this.isAdministrator;
            }
        
            public void setIsAdministrator(boolean aValue)
            {
                this.isAdministrator = aValue;
            }
        
            public String getUserName()
            {
                return this.username;
            }
        
            public void setUserName(String aUserName)
            {
                this.username = aUserName;
            }
        }
        
        
        
  2. Create a MySessionUtilities class 
     a. Right-click on /src/main/java/app1/utilities -> new -> Java Class
        Name:  MySessionUtilities
     
     b. Copy this to your MySessionUtilities class
     
        package app1.utilities;
        
        import app1.model.UserInfo;
        import org.springframework.web.context.request.RequestContextHolder;
        import org.springframework.web.context.request.ServletRequestAttributes;
        
        import javax.servlet.http.HttpServletRequest;
        
        /**
         * Created by adam on 11/7/2015.
         */
        public class MySessionUtilities
        {
            private static final String USER_INFO = "u";   // NOTE:  The actual value of this constant does not matter
        
            public static UserInfo getUserInfo()
            {
                // Get the UserInfo object stored from the session or null
                return getDataFromSession( USER_INFO, null);
            }
        
        
            public static void setUserInfo(UserInfo aUserInfo)
            {
                // Store this UserInfo object in the session (associated with the USER_INFO key)
                storeDataInSession(USER_INFO, aUserInfo);
            }
        
        
            /****************************************************************************************
             * storeDataInSession()
             *
             * Store the passed-in aValue into the session with the related aKey
             *****************************************************************************************/
            private static void storeDataInSession(String aKey, Object aValue)
            {
                // Get a reference to the request object
                ServletRequestAttributes servletRequestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
                HttpServletRequest request = servletRequestAttributes.getRequest();
        
                // Store this key and object in the session
                request.getSession().setAttribute(aKey, aValue);
            }
        
        
            /****************************************************************************************
             * getDataFromSession()
             *
             * Get any object from the session
             * NOTE:  If the object is not found in the session, then return the default value object
             *****************************************************************************************/
            private static<T> T getDataFromSession(String aKey, T aDefaultValue)
            {
                // Get a reference to the request object
                ServletRequestAttributes servletRequestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
                HttpServletRequest request = servletRequestAttributes.getRequest();
        
                T sessionValue = (T) request.getSession().getAttribute(aKey);
                if (sessionValue == null)
                {
                    // I did not find this item in the session -- so store the default value
                    sessionValue = aDefaultValue;
                }
        
                return(sessionValue);
            }
        
        
            /****************************************************************************************
             * clearSession()
             *****************************************************************************************/
            public static void clearSession()
            {
                // Get a reference to the request object
                ServletRequestAttributes servletRequestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
                HttpServletRequest request = servletRequestAttributes.getRequest();
        
                // Kill the session
                request.getSession().invalidate();
            }
        }

 
 3. Create a MySecurityInterceptor class 
    a. Right-click on /src/main/java/app1/utilities -> new -> Java Class
       Name:  MySecurityInterceptor
     
    b. Copy this to your MySecurityInterceptor class
    
        package app1.utilities;
        
        import app1.model.UserInfo;
        import org.springframework.web.servlet.HandlerMapping;
        import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        
        
        /**
         * Created by adam on 11/7/2015.
         */
        public class MySecurityInterceptor extends HandlerInterceptorAdapter
        {
        
            /*******************************************************************************
             * preHandle()
             ********************************************************************************/
            @Override
            public boolean preHandle(HttpServletRequest aRequest, HttpServletResponse aResponse, Object aHhandler) throws Exception
            {
                // If this is the error page or login page, then continue
                String sRequestUrl = (String) aRequest.getAttribute( HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);
        
                if ((! sRequestUrl.equalsIgnoreCase("/error")) &&
                    (! sRequestUrl.equalsIgnoreCase("/")) &&
                    (! sRequestUrl.equalsIgnoreCase("/login")) &&
                    (! sRequestUrl.equalsIgnoreCase("/authenticate")))
                {
                    // The user is visiting a page that does involve login, authenticate, or error
                    // Attempt to get the userInfo information from the session
                    UserInfo userInfo = MySessionUtilities.getUserInfo();
        
                    if (userInfo == null)
                    {
                        // User is going to a non-protected page and is not logged.  Redirect the user to the /login page
                        String sRedirectUrl = aRequest.getContextPath() + "/login";
                        aResponse.sendRedirect(sRedirectUrl);
                        return false;
                    }
                }
        
               return true;
            }
        
        
        }





 4. Make sure your MySecurityInterceptor class is called for all requests
    a. Edit your /src/main/webapp/WEB-INF/spring/dispatch-servlet.xml
    
    b. Make sure this is in there:
    
        <mvc:interceptors>
            <mvc:interceptor>
                <!-- Make sure that the MySecurityInterceptor class is called for all URLs -->
                <mvc:mapping path="/**"   />
    
                <!-- The MySecurityInterceptor class allows resource to JS, CSS to proceed -->
                <mvc:exclude-mapping path="/resources/**" />
    
                <bean class="app1.utilities.MySecurityInterceptor" />
            </mvc:interceptor>
        </mvc:interceptors>
 
 
 
 5. Adjust the WelcomeController by adding these methods:

   /**********************************************************************
     * handleDefaultPage()
     *
     * The user browsed to the   http://www.myserver.com/webapp
     * So, forward the user to   http://www.myserver.com/webapp/welcome
     ***********************************************************************/
    @RequestMapping("/")
    public ModelAndView handleDefaultPage( Model aModel )
    {
        logger.debug("handleDefaultPage()");

        // By default, forward users to the /welcome page
        return new ModelAndView("forward:/welcome");
    }



    /**********************************************************************
     * mainPage()
     *
     * The user browsed to the /welcome page
     *  1) Get a userinfo object setup
     *  2) Forward the user to the welcome.jsp page
     ***********************************************************************/
    @RequestMapping(value="/welcome")
    public ModelAndView mainPage( Model aModel )
    {
        logger.debug("mainPage() started");

        // Create a modelAndView object
        ModelAndView mav = new ModelAndView();

        // Show the welcome.jsp page
        mav.setViewName("welcome.jsp");

        // Create a userInfo object
        UserInfo userInfo = new UserInfo();
        userInfo.setUserName("Adam");
        userInfo.setIsAdministrator(true);

        // Add the userInfo information to the view
        mav.addObject("userInfo", userInfo);

        logger.debug("mainPage() finished");
        return mav;
    }

    /**********************************************************************
     * loginPage()
     * -- Show the login page
     ***********************************************************************/
    @RequestMapping(value="/login")
    public ModelAndView loginPage( Model aModel )
    {
        logger.debug("loginPage() started");

        // Create a modelAndView object
        ModelAndView mav = new ModelAndView();

        // Show the welcome.jsp page
        mav.setViewName("login.jsp");

        logger.debug("loginPage() finished");
        return mav;
    }


    /**********************************************************************
     * authenticate()
     * -- The user pressed the "Login" button
     ***********************************************************************/
    @RequestMapping(value="/authenticate", method=RequestMethod.POST)
    public ModelAndView authenticate( @ModelAttribute("loginForm") LoginForm aLoginForm, Model aModel )
    {
        logger.debug("authenticate() started");

        // Attempt to authenticate the user

        // Get a userinfo object from the user's name
        UserInfo userInfo = authenticateUserWithUsername(aLoginForm.getUsername());

        // This user *is* authenticated.  So, store the userInfo object in the session
        MySessionUtilities.setUserInfo(userInfo);

        // Redirect the user to the welcome page (so the url changes from /authenticate to /welcome )
        return new ModelAndView("redirect:/welcome");
    }


    /*******************************************************************************
     * authenticateUserWithUsername()
     ********************************************************************************/
    private UserInfo authenticateUserWithUsername(String aUsername)
    {
        UserInfo userInfo = new UserInfo();

        userInfo.setUserName(aUsername);

        // The real authenticator would be here
        userInfo.setIsAuthenticated(true);
        return(userInfo);
    }

 
 
  6. Create a login.jsp page
     Clicking "Login" will call the /authenticate method passing in the username and password
     NOTE:  the WelcomeController.authenticate() method will 

        <%-- Include Core taglib and set contextPath --%>
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <html>
        
        <head>
            <title>Login Page</title>
        </head>
        
        <body>
            <h2>login.jsp</h2>
        
                <form:form action="authenticate" method="post" commandName="loginForm">
                    Username: <input type="text" name="username" placeholder="-username-" value=""><br/>
                    Password: <input type="password" name="password" placeholder="-password-" value=""><br/>
                    <input type="submit" value="Login" />
                </form:form>
        
                <c:if test="${message}">
                    <br/>
                    <br/>
                    ${message}
                </c:if>
            <br/>
            <br/>
        
        </body>
        </html>
 
 
  
 7. Create a logout.jsp page
    Add a "Logout" page that is displayed when a user clicks to Logout
 
        <%-- Include Core taglib and set contextPath --%>
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <html>
        
        <head>
            <title>Logout Page</title>
        </head>
        
        <body>
             <h2>Thank you for using the app</h2>
        
                <form:form action="authenticate" method="post" commandName="loginForm">
                    Username: <input type="text" name="username" placeholder="-username-" value=""><br/>
                    Password: <input type="password" name="password" placeholder="-password-" value=""><br/>
                    <input type="submit" value="Login" />
                </form:form>

            <br/>
            <br/>
        
        </body>
        </html>
 
 
 
 
 8. Add a "Logout" capability (which calls WelcomeController.logout()
    
    a. Add a "Logout" button to your welcome.jsp
          <h2><a href="${contextPath/logout">Logout</a></h2>
 
    
    b. Add a WelcomeController.logout() method
        
        /**********************************************************************
         * logout()
         ***********************************************************************/
        @RequestMapping(value="/logout")
        public ModelAndView logoutPage( Model aModel )
        {
            logger.debug("logoutPage() started");
    
            // Clear the session
            MySessionUtilities.clearSession();
    
            // Create a modelAndView object
            ModelAndView mav = new ModelAndView();
    
            // Show the welcome.jsp page
            mav.setViewName("logout.jsp");
    
            logger.debug("logoutPage() finished");
            return mav;
        }
        
 
        
        
 9. Adjust the main layout file  (/src/main/webapp/WEB-INF/jsp/layout.jsp) to stop caching
    -- This is needed to protect us from the situation in which
        a. A user logs-in
        b. A user logs-out
        c. A user sees the logout page
        d. A user presses the back button to view pages
           [instead, the user will be redirected to the login page]
           
    Change your MySecurityInterceptor.java to this:
    
        /*******************************************************************************
         * preHandle()
         ********************************************************************************/
        @Override
        public boolean preHandle(HttpServletRequest aRequest, HttpServletResponse aResponse, Object aHhandler) throws Exception
        {
            // If this is the error page or login page, then continue
            String sRequestUrl = (String) aRequest.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);
    
            if ((! sRequestUrl.equalsIgnoreCase("/error")) &&
                (! sRequestUrl.equalsIgnoreCase("/")) &&
                (! sRequestUrl.equalsIgnoreCase("/login")) &&
                (! sRequestUrl.equalsIgnoreCase("/authenticate")))
            {
                // The user is visiting a page that does involve login, authenticate, or error
                // Attempt to get the userInfo information from the session
                UserInfo userInfo = MySessionUtilities.getUserInfo();
    
                if (userInfo == null)
                {
                    // User is going to a non-protected page and is not logged.  Redirect the user to the /login page
                    String sRedirectUrl = aRequest.getContextPath() + "/login";
                    aResponse.sendRedirect(sRedirectUrl);
                    return false;
                }
            }
    
            // Prevent the case in which a user logs-out and then hits the back button to back to secure pages
            aResponse.setHeader("Cache-Control","no-cache");
            aResponse.setHeader("Cache-Control","no-store");
            aResponse.setDateHeader("Expires", 0);
            aResponse.setHeader("Pragma","no-cache");
    
           return true;
        }
    
        
             