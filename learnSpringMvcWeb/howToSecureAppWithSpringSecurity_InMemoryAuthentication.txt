How to Secure Spring Web App with Spring Security and a Login Page (in memory authentication)
---------------------------------------------------------------------------------------------


Assumption
 A) You have a Spring MVC web app
 B) You want to setup a Login page 
 C) You want to setup a Logout page
 D) You want all pages to make sure that the user is logged-in (except the login page and error page)
 E) You want to use the sample in-memory authentication
 

Procedure
---------
 1. Add the dependencies to your web app's pom.xml file
 
       <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>4.0.3.RELEASE</version>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>4.0.3.RELEASE</version>
        </dependency>

 
 2. Create this package:  app1.security
 
 
 
 3. Create this class:  LoginSecurityConfig

        package app1.security;
        
        
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
        import org.springframework.security.config.annotation.web.builders.HttpSecurity;
        import org.springframework.security.config.annotation.web.builders.WebSecurity;
        import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
        import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
        
        
        /**
         * Created by adam on 11/12/2015.
         *
         * NOTE: @EnableWebSecurity = @EnableWebMVCSecurity + Extra features.
         */
        @Configuration
        @EnableWebSecurity
        public class LoginSecurityConfig extends WebSecurityConfigurerAdapter
        {
            private static final Logger logger = LoggerFactory.getLogger(LoginSecurityConfig.class);
        
            /**************************************************************************************
             * configureGlobal()
             * -- This method is used to store and manage user credentials
             ***************************************************************************************/
            @Autowired
            public void configureGlobal(AuthenticationManagerBuilder authenticationMgr) throws Exception
            {
                logger.debug("configureGlobal() started");
        
                authenticationMgr.inMemoryAuthentication()
                        .withUser("adam")
                        .password("a")
                        .authorities("ROLE_USER");
            }
        
        
            /**************************************************************************************
             * configure()
             ***************************************************************************************/
            @Override
            public void configure(WebSecurity web) throws Exception
            {
                // Allow requests to resources to get through
                web.ignoring()
                    .antMatchers("/resources/**");
            }
        
        
            /**************************************************************************************
             * configure()
             ***************************************************************************************/
            @Override
            protected void configure(HttpSecurity http) throws Exception {
                logger.debug("configure() started");
        
                http.authorizeRequests()
                        .antMatchers("/").permitAll()
                        .antMatchers("/loginPage").permitAll()
                        .antMatchers("/**").access("hasRole('ROLE_USER')")
                        .and()
                            .formLogin().loginPage("/loginPage")
                            .defaultSuccessUrl("/welcome")
                        .failureUrl("/loginPage?error")
                            .usernameParameter("username").passwordParameter("password")
                         .and()
                             .logout().logoutSuccessUrl("/logout");
        
            }
        }




 4. Create this class:  SpringSecurityInitializer
        
        package app1.security;
        
        import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;
        
        /**
         * Created by adam on 11/12/2015.
         *
         * SpringSecurityInitializer class:  This is used to initialize Spring Security
         */
        public class SpringSecurityInitializer extends AbstractSecurityWebApplicationInitializer
        {
        
        }




 5. Create a LoginController class
                         
        package app1.controllers;
        
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.security.core.Authentication;
        import org.springframework.security.core.context.SecurityContextHolder;
        import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
        import org.springframework.stereotype.Controller;
        import org.springframework.ui.Model;
        import org.springframework.web.bind.annotation.RequestMapping;
        import org.springframework.web.bind.annotation.RequestMethod;
        import org.springframework.web.bind.annotation.RequestParam;
        import org.springframework.web.servlet.ModelAndView;
        
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        /**
         * Created by adam on 11/12/2015.
         */
        @Controller
        public class LoginController
        {
            private static final Logger logger = LoggerFactory.getLogger(LoginController.class);
        
            /**********************************************************************
             * handleDefaultPage()
             *
             * The user browsed to the   http://www.myserver.com/webapp
             * So, forward the user to   http://www.myserver.com/webapp/welcome
             ***********************************************************************/
            @RequestMapping("/")
            public ModelAndView handleDefaultPage( Model aModel )
            {
                logger.debug("handleDefaultPage()");
        
                // By default, forward users to the /loginPage page
                return new ModelAndView("forward:/loginPage");
            }
        
        
        
            /***********************************************************************************
             * loginPage()
             *
             * If login fails, then the error param will be passed-in
              ************************************************************************************/
            @RequestMapping(value = "/loginPage", method = RequestMethod.GET)
            public ModelAndView loginPage(@RequestParam(value = "error",required = false) String aError)
            {
        
                ModelAndView mav = new ModelAndView();
                if (aError != null)
                {
                    mav.addObject("error", "Invalid username or password.");
                }
        
                mav.setViewName("loginPage.jsp");
                return mav;
            }
        
        
        
            /***********************************************************************************
             * logoutPage()
             *  1) Invalidate the HTTP Session.
             *  2) Remove the Authentication from the SecurityContext to prevent issues with concurrent requests.
             *  3) Explicitly clears the context value from the current thread.
             ************************************************************************************/
            @RequestMapping(value="/logout", method = RequestMethod.GET)
            public ModelAndView logoutPage (HttpServletRequest request, HttpServletResponse response)
            {
                Authentication auth = SecurityContextHolder.getContext().getAuthentication();
                if (auth != null)
                {
                    SecurityContextLogoutHandler ctxLogOut = new SecurityContextLogoutHandler();
                    ctxLogOut.setInvalidateHttpSession(true);
                    ctxLogOut.setClearAuthentication(true);
                    ctxLogOut.logout(request, response, auth);
                }
        
                ModelAndView mav = new ModelAndView();
                mav.setViewName("logoutPage.jsp");
                return mav;
            }
        
        }
        


 6. Create this jsp:  loginPage.jsp
 
        <%@ page session="false" %>
        
        <%-- Include Core taglib and set contextPath --%>
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <html>
        
        
        <head>
            <title>Login Page</title>
        </head>
        
        <body>
            <h2>loginPage.jsp</h2>
        
               <c:if test="${not empty error}"><div>${error}</div></c:if>
               <c:if test="${not empty message}"><div>${message}</div></c:if>
        
                <form name='login' action="${contextPath}/loginPage" method="post">
                    <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}" />
        
                    Username: <input type="text" name="username" placeholder="-username-" value=""><br/>
                    Password: <input type="password" name="password" placeholder="-password-" value=""><br/>
                    <input type="submit" value="Login" />
                </form>
        
            <br/>
            <br/>
        
        </body>
        </html>
         
 
 
 7. Create this page:  logoutPage.jsp
    NOTE:  This page cannot have any csrf tokens [because that will cause a session to be created]
       
        <%@ page session="false" %>
        
        <%-- Include Core taglib and set contextPath --%>
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <html>
        
        
        <head>
            <title>Logout Page</title>
        </head>
        
        <body>
            <h2>logoutPage.jsp</h2>
        
            Thank you for using the application
        
            Click here to <a href="${contextPath}/loginPage" title="Go back to the Login Page">login again</a>
        
            <br/>
            <br/>
        
        </body>
        </html>
 
 
 
 
  8. Tell Spring-Security to let the bundled JS and CSS files through
     ASSUMPTION:  Your jawrServlets are mapped to /bundleCSS and /bundleJS 
     [see howToBundleJsAndCssUsingJawr.txt]
     
    a. Modify the LoginSecurityConfig class so that requests with /bundles/ in it get through
       
       Change this method so it looks like this:
       
        /**************************************************************************************
         * configure()
         ***************************************************************************************/
        @Override
        public void configure(WebSecurity web) throws Exception
        {
            // Allow requests to resources, bundleJS, and bundleCSS to get through
            web.ignoring()
                .antMatchers("/resources/**")
                .antMatchers("/bundleJS/**")
                .antMatchers("/bundleCSS/**");
        }


    
    
 9.  Add this line to the top of *every* JSP page  (even those that are included)
       <%@ page session="false" %>
       
   
   
 

        
             