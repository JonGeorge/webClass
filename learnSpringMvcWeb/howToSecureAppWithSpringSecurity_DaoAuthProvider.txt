How to Secure Spring Web App with Spring Security and a Login Page (Custom DAO Authentication Provider)
-------------------------------------------------------------------------------------------------------


Assumption
 A) You have a Spring MVC web app
 B) You want to setup a Login page 
 C) You want to setup a Logout page
 D) You want all pages to make sure that the user is logged-in (except the login page and error page)
 E) You want to use a database table lookup to determine user and roles
 
References
----------
http://docs.spring.io/spring-security/site/faq/faq.html#faq-what-is-userdetailservice
http://projects.spring.io/spring-security/


Procedure
---------
 1. Setup your mysql user and roles tables
    Run this sql:
    
       create table users
       (
          id int auto_increment not null,
          username varchar(25) not null,
          password varchar(50) not null,
          isEnabled boolean    not null, 
          primary  key(id)
       );
       
  
     create table roles
       (
          userid  int not null,
          name    varchar(25) not null
       );
       



 2. Add some users:
    
    insert into users(id, username, password, isEnabled) values(3, 'adam', 'a', true);
    insert into users(id, username, password, isEnabled) values(4, 'ben', 'b', false);
    insert into roles(userid, name) values(3, 'ROLE_USER');
    insert into roles(userid, name) values(4, 'ROLE_USER');
    commit;
   

 3. Add the dependencies to your web app's pom.xml file
 
       <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>4.0.3.RELEASE</version>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>4.0.3.RELEASE</version>
        </dependency>

 
 4. Create this package:  app1.security
    NOTE:  The remaining classes will be created inside app1.security
    
    

 5. Create this class:  SpringSecurityInitializer
        
        package app1.security;
        
        import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;
        
        /**
         * Created by adam on 11/12/2015.
         *
         * SpringSecurityInitializer class:  This is used to initialize Spring Security
         */
        public class SpringSecurityInitializer extends AbstractSecurityWebApplicationInitializer
        {
        
        }
 
    NOTE:  The above code is the *SAME* as defining this in the web.xml
      <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
     </filter>

    <filter-mapping>
       <filter-name>springSecurityFilterChain</filter-name>
       <url-pattern>/*</url-pattern>
       <dispatcher>ERROR</dispatcher>
       <dispatcher>REQUEST</dispatcher>
    </filter-mapping>




 6. Create this class:  BadCredentialsException
 
        package app1.security;
        
        import org.springframework.security.core.AuthenticationException;
        
        /**
         * Created by adam on 11/15/2015.
         */
        public class BadCredentialsException extends AuthenticationException
        {
            public BadCredentialsException(String aMessage)
            {
                super(aMessage);
            }
        }
          


 7. Create this class:  MyAuthentication
    NOTES:
      1) This class holds the UserInfo details that will be set on authentication
         and these details are retrievable using this bit of code:
                  MyAuthentication myAuth = (MyAuthentication) SecurityContextHolder.getContext().getAuthentication();
                  UserInfo userInfo = myAuth.getUserInfo();
             
     2) This class is really a wrapper around the UserInfo object
        
            package app1.security;
            
            import app1.model.UserInfo;
            import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
            import org.springframework.security.core.Authentication;
            import org.springframework.security.core.GrantedAuthority;
            
            import java.util.Collection;
            
            /**
             * Created by adam on 11/15/2015.
             */
            public class MyAuthentication extends UsernamePasswordAuthenticationToken implements Authentication
            {
                private UserInfo userInfo;
            
                public UserInfo getUserInfo() { return this.userInfo; }
            
                public MyAuthentication(Object principal,
                                        Object credentials,
                                        Collection<? extends GrantedAuthority> authorities,
                                        UserInfo aUserInfo)
                {
                    super(principal, credentials, authorities);
            
                    this.userInfo = aUserInfo;
                }
            }
            

 
 8. Create this class:  MyDaoAuthenticationProvider
         
        package app1.security;
        
        import app1.model.UserInfo;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.jdbc.core.JdbcTemplate;
        import org.springframework.jdbc.support.rowset.SqlRowSet;
        import org.springframework.security.authentication.AuthenticationProvider;
        import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
        import org.springframework.security.core.Authentication;
        import org.springframework.security.core.AuthenticationException;
        import org.springframework.security.core.GrantedAuthority;
        import org.springframework.security.core.authority.SimpleGrantedAuthority;
        
        import javax.annotation.PostConstruct;
        import javax.annotation.Resource;
        import javax.sql.DataSource;
        import java.util.ArrayList;
        import java.util.List;
        
        /**
         * Created by adam on 11/15/2015.
         */
        public class MyDaoAuthenticationProvider implements AuthenticationProvider
        {
            private static final Logger logger = LoggerFactory.getLogger(MyDaoAuthenticationProvider.class);
        
            @Resource
            private DataSource mysqlDataSource;
        
            /**************************************************************************************
             * MyDaoAuthenticationProvider()  Constructor #1
             ***************************************************************************************/
            public MyDaoAuthenticationProvider()
            {
                logger.debug("MyDaoAuthenticationProvider() constructor #1");
            }
        
        
            /**************************************************************************************
             * MyDaoAuthenticationProvider()  Constructor #2
             ***************************************************************************************/
            public MyDaoAuthenticationProvider(DataSource aDataSource)
            {
                logger.debug("MyDaoAuthenticationProvider() constructor #2 with passed-in data source");
                this.mysqlDataSource = aDataSource;
            }
        
        
        
            /**************************************************************************************
             * postConstruct()
             *
             * Verify that all required resources are passed-in
             ***************************************************************************************/
            @PostConstruct
            public void postConstruct() throws Exception
            {
                if (this.mysqlDataSource == null)
                {
                    throw new RuntimeException("Critical Error in MyDaoAuthenticationProvider.postConstruct():  The mysqlDataSource is null.");
                }
            }
        
        
            /**************************************************************************************
             * authenticate()
             *
             * Actually perform authentication against the username and password
             *
             * Returns BadCredentialsException if authentication fails
             * Returns UsernamePasswordAuthenticationToken if authentication succeeds
             ***************************************************************************************/
            public Authentication authenticate(Authentication aAuthentication) throws AuthenticationException
            {
                String sUsername = aAuthentication.getName();
                String sPassword = aAuthentication.getCredentials().toString();
        
                // Use the credentials to try to authenticate the user against a source
                if (isUserAuthenticated(sUsername, sPassword))
                {
                    List<GrantedAuthority> grantedAuths = getListOfAuthoritiesForUsername(sUsername);
        
                    // Create a userInfo object and add to the returned Authenticaiton object
                    UserInfo userInfo = new UserInfo();
                    userInfo.setUserName(sUsername);
                    userInfo.setIsAdministrator(false);
        
                    // Create an authentication object
                    // We can get this info out using this code:
                    //   SecurityContextHolder.getContext().getAuthentication()
                    MyAuthentication myAuthentication = new MyAuthentication(sUsername, sPassword, grantedAuths, userInfo);
                    return myAuthentication;
                }
                else
                {
                    throw new BadCredentialsException("Unable to authenticate this user");
                }
            }
        
        
            /**************************************************************************************
             * isUserAuthenticated()
             *
             * Use the passed-in username and password to query against the database
             * If the user is found in the database *and*
             * If the user's account is not locked *and*
             * If the user's password matches
             *   Then return true
             ***************************************************************************************/
            private boolean isUserAuthenticated(String aUsername, String aPassword)
            {
                try
                {
                    boolean bUserIsAuthenticated = false;
                    final String sSql = "select count(id) from users where isEnabled=true and username=? and password=?";
        
                    JdbcTemplate jt = new JdbcTemplate(this.mysqlDataSource);
        
                    int iUserCount = jt.queryForObject(sSql, Integer.class, aUsername, aPassword);
        
                     if (iUserCount == 1)
                     {
                         bUserIsAuthenticated = true;
                     }
        
                    return bUserIsAuthenticated;
                }
                catch (Exception e)
                {
                    logger.error("Error in MyDaoAuthenticationProvider.isUserAuthenticated()", e);
                    return false;
                }
            }
        
        
        
            /**************************************************************************************
             * getListOfAuthoritiesForUsername()
             *
             * Returns a list of granted authorities for the passed-in username
             ***************************************************************************************/
            private List<GrantedAuthority> getListOfAuthoritiesForUsername(String aUsername)
            {
                try {
                    final String sSql = "select r.name " +
                                        "from roles r " +
                                        "left join users u on (r.userid=u.id) " +
                                        "where u.username=?";
        
                    JdbcTemplate jt = new JdbcTemplate(this.mysqlDataSource);
                    SqlRowSet rs = jt.queryForRowSet(sSql, aUsername);
                    ArrayList<GrantedAuthority> grantedAuthorities = new ArrayList<GrantedAuthority>();
        
                    while (rs.next()) {
                        grantedAuthorities.add(new SimpleGrantedAuthority(rs.getString(1)));
                    }
        
                    return grantedAuthorities;
                }
                catch (Exception e)
                {
                    logger.error("Error in MyDaoAuthenticationProvider.getListOfAuthoritiesForUsername()", e);
        
                    ArrayList<GrantedAuthority>  emptyAuthoritiesList = new ArrayList<GrantedAuthority>();
                    return emptyAuthoritiesList;
                }
            }
        
        
            /**************************************************************************************
             * supports()
             ***************************************************************************************/
            public boolean supports(Class<?> aAuthentication)
            {
                return aAuthentication.equals(UsernamePasswordAuthenticationToken.class);
            }
        }

 
 9. Create this class:  LoginSecurityConfig
    WARNING:  This class *MUST* be in the component-scan or it will not work
    
    
        package app1.security;
       
        import app1.utilities.SpringAppContextUtils;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.security.authentication.AuthenticationProvider;
        import org.springframework.security.config.annotation.web.builders.HttpSecurity;
        import org.springframework.security.config.annotation.web.builders.WebSecurity;
        import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
        import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
        
        import javax.annotation.PostConstruct;
        import javax.annotation.Resource;
        import javax.sql.DataSource;
        
        
        /**
         * Created by adam on 11/12/2015.
         *
         * NOTE: @EnableWebSecurity = @EnableWebMVCSecurity + Extra features.
         * 
         * ASSUMPTION:  This class is assumed to be in the component-scan or it does not work
         */
        @Configuration
        @EnableWebSecurity
        public class LoginSecurityConfig extends WebSecurityConfigurerAdapter
        {
            private static final Logger logger = LoggerFactory.getLogger(LoginSecurityConfig.class);
        
        
            @Resource
            private MyDaoAuthenticationProvider myDaoAuthenticationProvider;
        
            /**************************************************************************************
             * postConstruct()
             *
             * Verify that all required resources are passed-in
             ***************************************************************************************/
            @PostConstruct
            public void postConstruct() throws Exception
            {
                if (this.myDaoAuthenticationProvider == null)
                {
                    throw new RuntimeException("Critical Error in LoginSecurityConfig.postConstruct():  The myDaoAuthenticationProvider is null.");
                }
            }
        
        
            /**************************************************************************************
             * configure()
             ***************************************************************************************/
            @Override
            public void configure(WebSecurity web) throws Exception
            {
                // Allow requests to resources to get through
                web.ignoring()
                    .antMatchers("/resources/**");
            }
        
        
            /**************************************************************************************
             * configure()
             ***************************************************************************************/
            @Override
            protected void configure(HttpSecurity http) throws Exception
            {
                logger.debug("configure() started");
        
        
                // Configure authentication provider(s)
                http.authenticationProvider(this.myDaoAuthenticationProvider);
        
        
                // Setup Security
                http.authorizeRequests()
                                .antMatchers("/").permitAll()
                                .antMatchers("/loginPage").permitAll()
                                .antMatchers("/**").access("hasRole('ROLE_USER')")
                                .and()
                                .formLogin().loginPage("/loginPage")
                                .defaultSuccessUrl("/welcome")
                                .failureUrl("/loginPage?error")
                                .usernameParameter("username").passwordParameter("password")
                        .and()
                        .logout().logoutSuccessUrl("/logout");
        
            }
        }

                
                

10. Pass-in the mysqlDataSource into your myDaoAuthenticationProvider class
     
     Approach #1:  Setup myDaoAuthenticationProvider as a spring bean and 
                   use Spring to call myDaoAuthenticationProvider's constructor with the datasource passed-in
          
          a. Create a bean in your applicationContext.xml
      
               <bean id="myDaoAuthenticationProvider" class="app1.security.MyDaoAuthenticationProvider">
                   <constructor-arg ref="mysqlDataSource"/>
                </bean> 
    
              
             When completed, LoginSecurityConfig has these 2 parts:
             
             @Resource
             private MyDaoAuthenticationProvider myDaoAuthenticationProvider;
             
             . . .
             
             
            /**************************************************************************************
             * configure()
             ***************************************************************************************/
            @Override
            protected void configure(HttpSecurity http) throws Exception
            {
                logger.debug("configure() started");
        
        
                // Configure authentication provider(s)
                http.authenticationProvider(this.myDaoAuthenticationProvider);
        
        
                // Setup Security
                http.authorizeRequests()
                                .antMatchers("/").permitAll()
                                .antMatchers("/loginPage").permitAll()
                                .antMatchers("/**").access("hasRole('ROLE_USER')")
                                .and()
                                .formLogin().loginPage("/loginPage")
                                .defaultSuccessUrl("/welcome")
                                .failureUrl("/loginPage?error")
                                .usernameParameter("username").passwordParameter("password")
                        .and()
                        .logout().logoutSuccessUrl("/logout");
        
            }
             
 
 
 
     Approach #2:  Manually get a reference to the data source and
                   create a myDaoAuthProvider object in the LoginSecurityConfig.configure()

          a. Remove this code from LoginSecurityConfig.configure()
          
             @Resource
             private MyDaoAuthenticationProvider myDaoAuthenticationProvider;
             
             // Configure authentication provider(s)
             http.authenticationProvider(this.myDaoAuthenticationProvider);
     
                   
          b. Insert this code at the beginning of LoginSecurityConfig.configure()
          
                
              When completed, configure() looks like this:
              
                /**************************************************************************************
                 * configure()
                 ***************************************************************************************/
                @Override
                protected void configure(HttpSecurity http) throws Exception
                {
                    logger.debug("configure() started");
            
                    // Configure authentication provider(s)
                    DataSource mysqlDataSource = (DataSource) SpringAppContextUtils.getBean("mysqlDataSource");
                    MyDaoAuthenticationProvider myDaoAuthProvider = new MyDaoAuthenticationProvider(mysqlDataSource);
                    http.authenticationProvider(myDaoAuthProvider);
            
                    // Setup Security
                    http.authorizeRequests()
                                    .antMatchers("/").permitAll()
                                    .antMatchers("/loginPage").permitAll()
                                    .antMatchers("/**").access("hasRole('ROLE_USER')")
                                    .and()
                                    .formLogin().loginPage("/loginPage")
                                    .defaultSuccessUrl("/welcome")
                                    .failureUrl("/loginPage?error")
                                    .usernameParameter("username").passwordParameter("password")
                            .and()
                            .logout().logoutSuccessUrl("/logout");
            
                }
              
          
 
 
11. Create this class:  LoginController 
        
        package app1.controllers;
        
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.security.core.Authentication;
        import org.springframework.security.core.context.SecurityContextHolder;
        import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
        import org.springframework.stereotype.Controller;
        import org.springframework.ui.Model;
        import org.springframework.web.bind.annotation.RequestMapping;
        import org.springframework.web.bind.annotation.RequestMethod;
        import org.springframework.web.bind.annotation.RequestParam;
        import org.springframework.web.servlet.ModelAndView;
        
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        
        /**
         * Created by adam on 11/12/2015.
         */
        @Controller
        public class LoginController
        {
            private static final Logger logger = LoggerFactory.getLogger(LoginController.class);
        
            /**********************************************************************
             * handleDefaultPage()
             *
             * The user browsed to the   http://www.myserver.com/webapp
             * So, forward the user to   http://www.myserver.com/webapp/welcome
             ***********************************************************************/
            @RequestMapping("/")
            public ModelAndView handleDefaultPage( Model aModel )
            {
                logger.debug("handleDefaultPage()");
        
                // If the user is logged-in, then take the user to the welcome page
                if (! SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString().equalsIgnoreCase("anonymousUser"))
                {
                    // the user is authenticated
        
                    // Take the user in to the welcome page
                    return new ModelAndView("redirect:/welcome");
                }
        
                // By default, forward users to the /loginPage page
                return new ModelAndView("forward:/loginPage");
            }
        
        
        
            /***********************************************************************************
             * loginPage()
             *
             * If login fails, then the error param will be passed-in
              ************************************************************************************/
            @RequestMapping(value = "/loginPage", method = RequestMethod.GET)
            public ModelAndView loginPage(@RequestParam(value = "error",required = false) String aError)
            {
        
                ModelAndView mav = new ModelAndView();
                if (aError != null)
                {
                    mav.addObject("error", "Invalid username or password.");
                }
        
                mav.setViewName("loginPage.jsp");
                return mav;
            }
        
        
        
            /***********************************************************************************
             * logoutPage()
             *  1) Invalidate the HTTP Session.
             *  2) Remove the Authentication from the SecurityContext to prevent issues with concurrent requests.
             *  3) Explicitly clears the context value from the current thread.
             ************************************************************************************/
            @RequestMapping(value="/logout", method = RequestMethod.GET)
            public ModelAndView logoutPage (HttpServletRequest request, HttpServletResponse response)
            {
                Authentication auth = SecurityContextHolder.getContext().getAuthentication();
                if (auth != null)
                {
                    SecurityContextLogoutHandler ctxLogOut = new SecurityContextLogoutHandler();
                    ctxLogOut.setInvalidateHttpSession(true);
                    ctxLogOut.setClearAuthentication(true);
                    ctxLogOut.logout(request, response, auth);
                }
        
                ModelAndView mav = new ModelAndView();
                mav.setViewName("logoutPage.jsp");
                return mav;
            }
        
        }


 
 
12. Create this jsp:  loginPage.jsp
    Right-click on /src/main/webapp/WEB-INF/jsp -> new -> file
    Filename:  loginPage.jsp
        
        <%@ page session="false" %>
        
        <%-- Include Core taglib and set contextPath --%>
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <html>
        
        
        <head>
            <title>Login Page</title>
        </head>
        
        <body>
            <h2>loginPage.jsp</h2>
        
               <c:if test="${not empty error}"><div>${error}</div></c:if>
               <c:if test="${not empty message}"><div>${message}</div></c:if>
        
                <form name='login' action="${contextPath}/loginPage" method="post">
                    <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}" />
        
                    Username: <input type="text" name="username" placeholder="-username-" value=""><br/>
                    Password: <input type="password" name="password" placeholder="-password-" value=""><br/>
                    <input type="submit" value="Login" />
                </form>
        
            <br/>
            <br/>
        
        </body>
        </html>
 

13. Create this jsp:  logoutPage.jsp
    Right-click on /src/main/webapp/WEB-INF/jsp -> new -> file
    Filename:  logoutPage.jsp

    NOTE:  This page does not have a form (so it clears the session completely)
    
        <%@ page session="false" %>
        
        <%-- Include Core taglib and set contextPath --%>
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <html>
        
        
        <head>
            <title>Logout Page</title>
        </head>
        
        <body>
            <h2>logoutPage.jsp</h2>
        
            Thank you for using the application
        
            Click here to <a href="${contextPath}/loginPage" title="Go back to the Login Page">login again</a>
        
            <br/>
            <br/>
        
        </body>
        </html> 
 
 
 
 
14. Tell Spring-Security to let the bundled JS and CSS files through
    ASSUMPTION:  Your jawrServlets are mapped to /bundleCSS and /bundleJS 
    [see howToBundleJsAndCssUsingJawr.txt]
         
    a. Modify the LoginSecurityConfig class so that requests with /bundles/ in it get through
       
       Change this method so it looks like this:
       
        /**************************************************************************************
         * configure()
         ***************************************************************************************/
        @Override
        public void configure(WebSecurity web) throws Exception
        {
            // Allow requests to resources, bundleJS, and bundleCSS to get through
            web.ignoring()
                .antMatchers("/resources/**")
                .antMatchers("/bundleJS/**")
                .antMatchers("/bundleCSS/**");
        }
    
    

15.  Make sure your UserInfo class implements Serializable
     Your UserInfo class should look something like this:

        package app1.model;

        import java.io.Serializable;
        
        public class UserInfo implements Serializable
        {
            private boolean isAdministrator = false;
            private String username;
        
        
            public UserInfo()
            {
        
            }
        
            public boolean getIsAdministrator()
            {
                return this.isAdministrator;
            }
        
            public void setIsAdministrator(boolean aValue)
            {
                this.isAdministrator = aValue;
            }
        
            public String getUserName()
            {
                return this.username;
            }
        
            public void setUserName(String aUserName)
            {
                this.username = aUserName;
            }
        }
         
    
    
16.  Add this line to the top of *every* JSP page  (even those that are included)
       <%@ page session="false" %>
       
   
   
 
17.  Adjust your WelcomeController.mainPage() method so that it pulls UserInfo
     from the SpringContextHolder:
     
        /**********************************************************************
         * mainPage()
         *
         * The user browsed to the /welcome page
         *  1) Get a userinfo object setup
         *  2) Forward the user to the welcome.jsp page
         ***********************************************************************/
        @RequestMapping(value="/welcome")
        public ModelAndView mainPage( Model aModel )
        {
            logger.debug("mainPage() started");
    
            // Create a modelAndView object
            ModelAndView mav = new ModelAndView();
    
            // Show the welcome.jsp page
            mav.setViewName("welcome.jsp");
    
            // Get the UserInfo object from Spring Security
            // NOTE:  UserInfo is created in MyDaoAuthenticationProvider.authenticate()
            MyAuthentication myAuth = (MyAuthentication) SecurityContextHolder.getContext().getAuthentication();
            UserInfo userInfo = myAuth.getUserInfo();
    
            // Add the userInfo information to the view
            mav.addObject("userInfo", userInfo);
    
            logger.debug("mainPage() finished");
            return mav;
        }
    
            
 
Now, if you login with username=adam and password of a, you should be able to get to the welcome page
          
