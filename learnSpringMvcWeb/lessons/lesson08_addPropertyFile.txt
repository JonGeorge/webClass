Lesson:  Tell Spring to Read a Property File
--------------------------------------------


Procedure
---------
 1. Create this file:  webapp1.properties
    a. Right-click on src/main/resources -> New -> File
       Filename:  webapp1.properties
       
        
    b. Copy + Paste this to your property file
   
        #####################################################
        # Filename:  webapp1.properties for *DEVELOPMENT*
        #  
        #####################################################
        jdbc.driverClass=org.postgresql.Driver
        jdbc.jdbcUrl=jdbc:postgresql://localhost:5432/postgres
        jdbc.user=postgres
        jdbc.password=secret
        jdbc.initialPoolSize=1
        jdbc.minPoolSize=1
        jdbc.maxPoolSize=15
        jdbc.maxIdleTime=240
        jdbc.maxConnectionAge=3600
        jdbc.preferredTestQuery=select now()
        jdbc.idleConnectionTestPeriod=30000

		
		app.mode=development
		app.cacheValues=false
				
		

   
     
 2. Configure Spring to get property values from within your application-context.xml file
    This step is only used so that we can replace the spring values with ${ }
 
    a. Modify src/main/webapp/WEB-INF/spring/applicationContext.xml
     
    b. Add this spring-bean to applicationContext.xml
       
        <!-- Load the webapp1.properties file if is found in the CLASSPATH 
             So, they can be read using ${ } within this XML file
        -->      
        <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
           <property name="locations" value="classpath:webapp1.properties" />
        </bean>
        
        **OR**
        
        <context:property-placeholder location="classpath:webapp1.properties" />
 
    c. Replace the hard-coded values (in applicationContext.xml) with variables
       Your postgresDataSource bean should look like this now:
   
	    <!-- Setup a spring bean that acts as a C3P0 Connection pool                          -->
	    <!-- NOTE:  Set destroy-method="close" so that Spring will close the connection pool  -->
	    <bean id="postgresDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"  destroy-method="close">
	        <property name="driverClass"              value="${jdbc.driverClass}"        />
	        <property name="jdbcUrl"                  value="${jdbc.jdbcUrl}"            />
	        <property name="user"                     value="${jdbc.user}"               />
	        <property name="password"                 value="${jdbc.password}"           />
	        <property name="initialPoolSize"          value="${jdbc.initialPoolSize}"    />
	        <property name="maxPoolSize"              value="${jdbc.maxPoolSize}"        />
	        <property name="minPoolSize"              value="${jdbc.minPoolSize}"        />
	        <property name="maxIdleTime"              value="${jdbc.maxIdleTime}"        />
	        <property name="maxConnectionAge"         value="${jdbc.maxConnectionAge}"   />
	        <property name="preferredTestQuery"       value="${jdbc.preferredTestQuery}" />
	        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
	    </bean>



 3. Add another spring bean to so Java code can pull out property values 
    a. Add this spring-bean to your applicationContext.xml
	        <bean id="myProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	        	<property name="locations" value="classpath:webapp1.properties" />
	        </bean>


    b. Inject the myProps bean into WelcomeController
       Edit the WelcomeController.java and add this to the top of the class:
       
 			@Resource(name = "myProps")
 			private Properties appProperties;
 		
 		
	c. Use the appProperties object to (within your WelcomeController)
	   to pull out a property value
	   
	   Add this call to one of the methods:
	        String sAppMode = appProperties.getProperty("app.mode");
	        logger.debug("app.mode={}", sAppMode);
	    
	    

 4. Activate your Intellij Debugger
    If you are using the jetty-plugin (see step 4c), then 
       Pull Run / Debug 'webapp1 [jetty:run]'
     

      
 5. Connect to your site
    a. Open a browser
    b. Go to http://localhost:8080/webapp1
    
        
    After the spring beans are loaded, you should see this:
    
    Jun 14, 2015 7:53:25 PM org.apache.catalina.core.AprLifecycleListener init
    INFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: C:\Program Files\Java\jre7\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Perl\site\bin;C:\Perl\bin;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\TortoiseSVN\bin;C:\Program Files (x86)\sbt\\bin;C:\Program Files (x86)\scala\bin;C:\tools\apache-maven-3.2.3\bin;C:\tools\apache-ant-1.9.4\bin;.
    Jun 14, 2015 7:53:25 PM org.apache.tomcat.util.digester.SetPropertiesRule begin
    WARNING: [SetPropertiesRule]{Server/Service/Engine/Host/Context} Setting property 'source' to 'org.eclipse.jst.jee.server:mywebapp4' did not find a matching property.
    Jun 14, 2015 7:53:25 PM org.apache.tomcat.util.digester.SetPropertiesRule begin
    WARNING: [SetPropertiesRule]{Server/Service/Engine/Host/Context} Setting property 'source' to 'org.eclipse.jst.jee.server:stripes1' did not find a matching property.
    Jun 14, 2015 7:53:25 PM org.apache.coyote.AbstractProtocol init
    INFO: Initializing ProtocolHandler ["http-bio-8080"]
    Jun 14, 2015 7:53:25 PM org.apache.coyote.AbstractProtocol init
    INFO: Initializing ProtocolHandler ["ajp-bio-8009"]
    Jun 14, 2015 7:53:25 PM org.apache.catalina.startup.Catalina load
    INFO: Initialization processed in 361 ms
    Jun 14, 2015 7:53:25 PM org.apache.catalina.core.StandardService startInternal
    INFO: Starting service Catalina
    Jun 14, 2015 7:53:25 PM org.apache.catalina.core.StandardEngine startInternal
    INFO: Starting Servlet Engine: Apache Tomcat/7.0.55
    Jun 14, 2015 7:53:27 PM org.apache.catalina.core.ApplicationContext log
    INFO: No Spring WebApplicationInitializer types detected on classpath
    06/14/2015 19:53:27 app1.utilities.MyApplicationWatcher mywebapp4 contextInitialized() started.
    Jun 14, 2015 7:53:29 PM org.apache.catalina.core.ApplicationContext log
    INFO: Initializing Spring root WebApplicationContext
    06/14/2015 19:53:29 org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization started
    06/14/2015 19:53:29 org.springframework.web.context.support.XmlWebApplicationContext Refreshing Root WebApplicationContext: startup date [Sun Jun 14 19:53:29 EDT 2015]; root of context hierarchy
    06/14/2015 19:53:29 org.springframework.beans.factory.xml.XmlBeanDefinitionReader Loading XML bean definitions from ServletContext resource [/WEB-INF/spring/applicationContext.xml]
    06/14/2015 19:53:31 org.springframework.context.support.PropertySourcesPlaceholderConfigurer Loading properties file from file [C:\tools\eclipse_kepler\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\mywebapp4\WEB-INF\classes\stuff.properties]
    06/14/2015 19:53:31 org.springframework.web.servlet.handler.SimpleUrlHandlerMapping Mapped URL path [/resources/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
    Jun 14, 2015 7:53:31 PM com.mchange.v2.log.MLog <clinit>
    INFO: MLog clients using java 1.4+ standard logging.
    Jun 14, 2015 7:53:31 PM com.mchange.v2.c3p0.C3P0Registry banner
    INFO: Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
    06/14/2015 19:53:32 app1.utilities.UnitedStatesCache UnitedStatesCache() constructor started.
    06/14/2015 19:53:32 app1.utilities.UnitedStatesCache UnitedStatesCache() constructor finished.
    06/14/2015 19:53:32 app1.utilities.UnitedStatesCache initializeCache() is started.
    Jun 14, 2015 7:53:32 PM com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource getPoolManager
    INFO: Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hge136991vu6050j82f44|444de7a, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hge136991vu6050j82f44|444de7a, idleConnectionTestPeriod -> 30000, initialPoolSize -> 1, jdbcUrl -> jdbc:mysql://127.0.0.1:3306/world, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 3600, maxIdleTime -> 240, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> select now(), properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
    
