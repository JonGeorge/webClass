Lesson:  Debug your Web Application using IntelliJ Ultimate Edition
-------------------------------------------------------------------
In this example, we will debug the webapp using the Maven Jetty Plugin

  
Assumptions:  
 A) You have created a Web Application
 B) You have purchased and installed IntelliJ Ultimate Edition
 

Procedure
---------
 1. **OPTIONAL** open-up port 8080 so that an outside browser can connect to your Jetty app-server
    unix> sudo -s
    unix> iptables -I INPUT -p tcp -m tcp --dport 8080 -j ACCEPT
    unix> service iptables save
    unix> service iptables restart
    unix> iptables -S                  # to list the current rule
    unix> exit

        

 2. Setup the Jetty maven plugin to startup a Jetty instance from the command-line in debug mode
    Right now, the end of your pom.xml should look like this:
    
            <build>
              <finalName>webapp1</finalName>
            </build>
         </project>
     
     
    a. Change the end of the of the pom.xml to this:
    
          <build>
            <finalName>webapp1</finalName>
    
		    <plugins>
		      <plugin>
		        <groupId>org.eclipse.jetty</groupId>
		        <artifactId>jetty-maven-plugin</artifactId>
		
		        <!-- NOTE:  The jetty 9.1.5.v2014050 version works with Java 1.7 -->
		        <version>9.1.5.v20140505</version>
		
		        <configuration>
		          <httpConnector>
		              <!-- Your local jetty listens on port 8080 -->
		              <port>8080</port>
		          </httpConnector>
		
		          <webApp>
		             <!-- If your project is called webapp1, then jetty listens on http://localhost:8080/webapp1  -->
		             <contextPath>/${project.artifactId}</contextPath>
		          </webApp>
		
		          <!-- Jetty will scan every 10 seconds to pickup front-end changes -->
		          <scanIntervalSeconds>10</scanIntervalSeconds>
		        </configuration>
		      </plugin>
		    </plugins>
         </build>
       </project>


        
 3. Use IntelliJ to set a breakpoint
    a. In Intellij, Pull File / Save All
    b. Set a breakpoint
       -- Browse to src/main/java -> app1.controllers -> WelcomeController.java
       -- Single-click in the left margin and add a breakpoint on this line
             logger.debug("mainPage() started");


        
 4. Tell Intellij to use Maven Jetty Plugin in debug mode
    a. Open the Maven Projects window
       Pull View -> Tool Window -> Maven Project
    
    b. Browse to Plugins -> jetty
    
    c. Right-click on jetty:run -> Debug....  
       -- Now, you should have this menu option:
          Run -> Debug '<your webapp's name>' [jetty:run]'
          
      
        
 5. Open a browser and connect to your web app
    a. Startup Firefox
    b. Connect to http://localhost:8080/springMvcWebAppE/
    
      
 6. Stop the debugger
    In Intellij, Pull Run / Stop 'my-tomcat'
   
 
       
    
 