How to Add an Accumulo Client to your Spring MVC Web App
--------------------------------------------------------

Assumptions:
 A) You want your Spring MVC Web App to talk to an Accumulo data store
 B) You have installed the Accumulo quick-install 
 C) Your Accumulo has a zookeeper listening on the unix server at 192.168.43.129:2181
 D) Your Accumulo instance has a username=root and password=secret
 
 
Procedure
---------
 1. Create a Java Spring MVC Web App
    [see learnSpringMvcWeb / lessons / lesson03_createSpringMvcWebApp_usingIntellijMaven.txt
    
 2. Setup the Jetty Plugin (to run the web app locally)
    [see learnSpringMvcWeb / lessons / lesson04c_debugWebAppUsingIntellijUsingJettyPlugin..txt
    
 3. Add the ApplicationWatcher
    [see learnSpringMvcWeb / lessons / lesson06_addApplicationWatcher.txt]
 
 4. Add the property file
    [see learnSpringMvcWeb / lessons / lesson08_addPropertyFile.txt]
    
    
 5. Add these dependencies to your pom.xml:

   <dependency>
      <!-- A C C U M U L O       C O R E      1.5.1        -->
      <groupId>org.apache.accumulo</groupId>
      <artifactId>accumulo-core</artifactId>
      <version>1.6.1</version>
      <exclusions>
        <!-- accumulo-core comes with log4j but we will use logback so strip it out -->
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-log4j12</artifactId>
        </exclusion>

        <exclusion>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <!-- Tell log4j to forward its logging to slf4j -->
      <groupId>org.slf4j</groupId>
      <artifactId>log4j-over-slf4j</artifactId>
      <version>1.7.12</version>
    </dependency>

    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>2.6.2</version>
    </dependency>
    
  

 6. Update your logback.xml file to look like this:
    a. Edit /src/main/resources/logback.xml
    b. Replace your logback.xml with this:
    
		<?xml version="1.0" encoding="windows-1252" ?>
		<!DOCTYPE project>
		
		<configuration debug="false">
		    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		        <encoder>
		            <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
		        </encoder>
			
		    </appender>
		    
		    <logger name="org.springframework" level="INFO" additivity="false">
		        <appender-ref ref="CONSOLE"/>
		    </logger>
		
		    <logger name="org.apache.accumulo" level="DEBUG" additivity="false">
		        <appender-ref ref="CONSOLE"/>
		    </logger>
		
		    <logger name="app1" level="DEBUG" additivity="false">
		        <appender-ref ref="CONSOLE"/>
		    </logger>
		
		    <root level="DEBUG">
		        <appender-ref ref="CONSOLE"/>
		    </root>
		</configuration>

		        
		       		        	              
 
 7. Create a package called "services"
    a. Right-click on /src/main/java/app1 -> New -> Package
       Name:  app1.services
       
 
				
 8. Create this class:  AccumuloDao
    a. Right-click on /src/main/java/app1/services -> New -> Java Class
       Name:  AccumuloDao
       Kind:  Class
       Press OK
       
    b. Copy this to to your java class

		package app1.services;
		
		import org.apache.accumulo.core.client.Connector;
		import org.apache.accumulo.core.client.Instance;
		import org.apache.accumulo.core.client.ZooKeeperInstance;
		import org.apache.accumulo.core.client.security.tokens.PasswordToken;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		
		/**
		 * Created by Adam on 1/24/2017.
		 */
		public class AccumuloDao
		{
		    private static final Logger logger = LoggerFactory.getLogger(AccumuloDao.class);
		
		    private Connector connector = null;
		
		    /*****************************************************************************************
		     * AccumuloDao() Constructor
		     *
		     * Attempt to connect to the Accumulo instance
		     * NOTE:  Throws an exception if it cannot connect to Accumulo
		     ******************************************************************************************/
		    public AccumuloDao(String aInstanceName, String aZookeepers, String aUsername, String aPassword) throws Exception
		    {
		        logger.debug("AccumuloDao() started.  aInstanceName={}   aZookeepers={}   aUsername={}", aInstanceName, aZookeepers, aUsername);
		        Instance inst = new ZooKeeperInstance(aInstanceName, aZookeepers);
		
		        this.connector = inst.getConnector(aUsername, new PasswordToken(aPassword));
		        logger.debug("AccumuloDao() finished.");
		    }


		
		    /*****************************************************************************************
		     * getConnector()
		     *
		     * Returns the connector
		     ******************************************************************************************/
		    public Connector getConnector()
		    {
		        return this.connector;
		    }
		}
    

		
		
 9. Edit this file:  applicationContext.xml
    NOTE:  This tells spring to create your ElasticSearchDao singleton
    a. Right-click on /src/main/resources/ -> Right-click -> New -> File:
       Filename:  applicationContexts.xml
    
    b. Add this to your file:
    
	    <!-- Read the property values and allows us to use them in this xml file as ${es.url} -->
	    <context:property-placeholder location="classpath:webapp1.properties" />
	
	    <!-- Create an AccumuloDao singleton and pass-in the properties  (found in webapp1.properties) -->
	    <bean id="accumuloDao" class="app1.services.AccumuloDao">
	       <constructor-arg  value="${acc.instancename}" />
	       <constructor-arg  value="${acc.zookeepers}" />
	       <constructor-arg  value="${acc.username}" />
	       <constructor-arg  value="${acc.password}" />
	    </bean>
        
        
        
10. Add the accumulo properties to your webapp1.properties file
    NOTE:  I assume that your Accumulo's zookeeper is listening on the computer called centosVM on port 2181
      
		acc.instancename=accumulo
		acc.zookeepers=centosvm:2181
		acc.username=root
		acc.password=secret
       
       
 
11. Inject the AccumuloDao spring-bean into your Welcome Controller
 	a. Edit your /src/main/java/app1/controllers/WelcomeController.java class
 	
 	b. Add this to the top:
	    @Resource
	    private AccumuloDao accumuloDao;
 		
 
 
12. Add a method called runAccQuery() to your WelcomeController
    
		 /***************************************************************************
		 * runAccQuery()
		 *
		 * Returns the JSON holding a list of users
		 ****************************************************************************/
		@RequestMapping(value="/accumulo/{rawQuery}", method = RequestMethod.GET, produces = "application/json")
		public ResponseEntity<?> runAccQuery(@PathVariable(value="rawQuery") String aRawQuery)
		{
		    logger.debug("runAccQuery() started.  aRawQuery={}", aRawQuery);

		    try
		    {
		        // Get the Accumulo Connector object (used to perform accumulo operations)
		        Connector conn = this.accumuloDao.getConnector();

		        final String ACC_TABLE_NAME = "docs";

		        // Get the authorizations for our user
		        Authorizations authorizations = conn.securityOperations().getUserAuthorizations("root");
		        logger.debug("authorizations={}", authorizations.toString());

		        logger.debug("Scanning {}", ACC_TABLE_NAME);
		        String row = null;
		        Scanner scanner = conn.createScanner(ACC_TABLE_NAME, authorizations);



		        // Run a SQL call to get the list of users
		        HashMap<String, String> hshMap = new HashMap<String, String>();

		        // Loop through all rows in this table and add them to the HashMap
		        for (Map.Entry<Key,Value> entry: scanner)
		        {
		            hshMap.put(entry.getKey().toString(), entry.getValue().toString());
		            logger.debug("  {}  {}", entry.getKey(), entry.getValue());
		        }

		        scanner.close();


		        // Convert the HashMap into a JSON string
		        Gson gson = new Gson();
		        String sJson = gson.toJson(hshMap);

		        // Return the JSON string a response code of 200
		        return new ResponseEntity<String>(sJson, HttpStatus.OK);
		    }
		    catch (Exception e)
		    {
		        // Tell the AJAX call that this call failed
		        logger.error("Error occurred making rest call to /accumulo", e);

		        // Get a formatted error message from the exception object
		        String sMessage = getFormattedMessageFromException(e);

		        // Tell the AJAX caller that this will be plain text being returned (and not JSON)
		        HttpHeaders headers = new HttpHeaders();
		        headers.setContentType(MediaType.TEXT_PLAIN);

		        // Return the error back to the caller
		        return new ResponseEntity<String>(sMessage, headers, HttpStatus.INTERNAL_SERVER_ERROR);
		    }
		}	
	    
	    /***************************************************************************
	     * getFormattedMessageFromException()
	     ****************************************************************************/
	    private String getFormattedMessageFromException(Exception aException)
	    {
	        StringBuilder sbMessage = new StringBuilder();
	
	        String sStackTrace = getStackTraceAsString(aException);
	
	        sbMessage.append("Message: ")
	                .append(aException.getMessage())
	                .append("\n\n")
	                .append("Cause: ")
	                .append(aException.getCause())
	                .append("\n\n")
	                .append("StackTrace:\n")
	                .append(sStackTrace);
	
	        return sbMessage.toString();
	    }
	
	
	
	    /***************************************************************************
	     * getStackTraceAsString()
	     ****************************************************************************/
	    public String getStackTraceAsString(Exception aException)
	    {
	        StringBuilder sb = new StringBuilder();
	        for (StackTraceElement element : aException.getStackTrace()) {
	            sb.append(element.toString());
	            sb.append("\n");
	        }
	        return sb.toString();
	    }
		    
	    
    NOTE:  When finished, your WelcomeController should look something like this:
    

	package app1.controllers;

	import app1.services.AccumuloDao;
	import com.google.gson.Gson;
	import org.apache.accumulo.core.client.Connector;
	import org.apache.accumulo.core.client.Scanner;
	import org.apache.accumulo.core.data.Key;
	import org.apache.accumulo.core.data.Value;
	import org.apache.accumulo.core.security.Authorizations;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
	import org.springframework.http.HttpHeaders;
	import org.springframework.http.HttpStatus;
	import org.springframework.http.MediaType;
	import org.springframework.http.ResponseEntity;
	import org.springframework.stereotype.Controller;
	import org.springframework.ui.Model;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestMethod;
	import org.springframework.web.servlet.ModelAndView;
	import app1.model.UserInfo;

	import javax.annotation.Resource;
	import java.util.ArrayList;
	import java.util.HashMap;
	import java.util.Map;


	@Controller
	public class WelcomeController
	{
	   private final static Logger logger = LoggerFactory.getLogger(WelcomeController.class);

	   @Resource
	   private AccumuloDao accumuloDao;

	   /**********************************************************************
	   * handleDefaultPage()
	   *
	   * The user browsed to the   http://www.myserver.com/webapp
	   * So, forward the user to   http://www.myserver.com/webapp/forward
	   ***********************************************************************/
	   @RequestMapping("/")
	   public ModelAndView handleDefaultPage( Model aModel )
	   {
		   // By default, forward users to the /welcome page
		   return new ModelAndView("forward:/welcome");
	   }



	   /**********************************************************************
	   * mainPage()
	   *
	   * The user browsed to the /welcome page
	   *  1) Get a userinfo object setup
	   *  2) Forward the user to the welcome.jsp page
	   ***********************************************************************/
	   @RequestMapping("/welcome")
	   public ModelAndView mainPage( Model aModel )
	   {
		   logger.debug("mainPage() started");

		   // Create a modelAndView object
		   ModelAndView mav = new ModelAndView();

		   // Show the welcome.jsp page
		   mav.setViewName("welcome.jsp");

		   // Create a userInfo object
		   UserInfo userInfo = new UserInfo();
		   userInfo.setUserName("Adam");
		   userInfo.setIsAdministrator(true);

		   // Add the userInfo information to the view
		   mav.addObject("userInfo", userInfo);

		   logger.debug("mainPage() finished");
		   return mav;
	   }


	   /***************************************************************************
	   * runAccQuery()
	   *
	   * Returns the JSON holding a list of users
	   ****************************************************************************/
	   @RequestMapping(value="/accumulo/{rawQuery}", method = RequestMethod.GET, produces = "application/json")
	   public ResponseEntity<?> runAccQuery(@PathVariable(value="rawQuery") String aRawQuery)
		{
		    logger.debug("runAccQuery() started.  aRawQuery={}", aRawQuery);

		    try
		    {
		        // Get the Accumulo Connector object (used to perform accumulo operations)
		        Connector conn = this.accumuloDao.getConnector();

		        final String ACC_TABLE_NAME = "docs";

		        // Get the authorizations for our user
		        Authorizations authorizations = conn.securityOperations().getUserAuthorizations("root");
		        logger.debug("authorizations={}", authorizations.toString());

		        logger.debug("Scanning {}", ACC_TABLE_NAME);
		        String row = null;
		        Scanner scanner = conn.createScanner(ACC_TABLE_NAME, authorizations);



		        // Run a SQL call to get the list of users
		        HashMap<String, String> hshMap = new HashMap<String, String>();

		        // Loop through all rows in this table and add them to the HashMap
		        for (Map.Entry<Key,Value> entry: scanner)
		        {
		            hshMap.put(entry.getKey().toString(), entry.getValue().toString());
		            logger.debug("  {}  {}", entry.getKey(), entry.getValue());
		        }

		        scanner.close();


		        // Convert the HashMap into a JSON string
		        Gson gson = new Gson();
		        String sJson = gson.toJson(hshMap);

		        // Return the JSON string a response code of 200
		        return new ResponseEntity<String>(sJson, HttpStatus.OK);
		    }
		    catch (Exception e)
		    {
		        // Tell the AJAX call that this call failed
		        logger.error("Error occurred making rest call to /accumulo", e);

		        // Get a formatted error message from the exception object
		        String sMessage = getFormattedMessageFromException(e);

		        // Tell the AJAX caller that this will be plain text being returned (and not JSON)
		        HttpHeaders headers = new HttpHeaders();
		        headers.setContentType(MediaType.TEXT_PLAIN);

		        // Return the error back to the caller
		        return new ResponseEntity<String>(sMessage, headers, HttpStatus.INTERNAL_SERVER_ERROR);
		    }
		}



		/***************************************************************************
		 * getFormattedMessageFromException()
		 ****************************************************************************/
		private String getFormattedMessageFromException(Exception aException)
		{
		    StringBuilder sbMessage = new StringBuilder();

		    String sStackTrace = getStackTraceAsString(aException);

		    sbMessage.append("Message: ")
		            .append(aException.getMessage())
		            .append("\n\n")
		            .append("Cause: ")
		            .append(aException.getCause())
		            .append("\n\n")
		            .append("StackTrace:\n")
		            .append(sStackTrace);

		    return sbMessage.toString();
		}



		/***************************************************************************
		 * getStackTraceAsString()
		 ****************************************************************************/
		public String getStackTraceAsString(Exception aException)
		{
		    StringBuilder sb = new StringBuilder();
		    for (StackTraceElement element : aException.getStackTrace()) {
		        sb.append(element.toString());
		        sb.append("\n");
		    }
		    return sb.toString();
		}


	}
   

        
13. Startup your Accumulo Quick Install
    unix> source ~/quickinstall-home/bin/quickinstall-env
    unix> qi-start



14. Create an Accumulo Table and add some data records
    unix> source ~/quickinstall-home/bin/quickinstall-env
    unix> accumulo shell -u root -p secret
    
    a. Create the table
       	root@accumulo> createtable docs
      
    b. Insert some data
	    root@accumulo docs> insert "bob jones" "contact" "address" "123 any street" -l billing
	    root@accumulo docs> insert "bob jones" "contact" "city" "anytown" -l "billing"
	    root@accumulo docs> insert "bob jones" "contact" "phone" "555-1212" -l "billing"
	    root@accumulo docs> insert "bob jones" "purchases" "sneakers" "$60" -l "billing&inventory"
	    
	    root@accumulo docs> insert "fred smith" "contact" "address" "444 main street" -l billing
	    root@accumulo docs> insert "fred smith" "contact" "city" "other town" -l billing
	    root@accumulo docs> insert "fred smith" "purchases" "glasses" "$30" -l "billing&inventory"
	    root@accumulo docs> insert "fred smith" "purchases" "hat" "$20" -l "billing&inventory"
         
    c. Give the root user authorization to see the data
       root@accumulo docs> setauths -u root -s inventory,billing
       
       root@accumulo docs> getauths
       -- You should see inventory,billing
       
    d. Look at the data
       root@accumulo docs> scan
       -- You should see all of the data
    
    e. Look at the data related to the "bob jones" row ID
       root@accumulo docs> scan -r "bob jones"
       -- You should only see the data related to "bob jones" 
    
    f. Look at the data that is under the billing authorization
       root@accumulo docs> scan -s billing
       root@accumulo docs> scan -s billing,inventory
       
    g. Quit out of the Accumulo Shell
       root@accumulo docs> quit    
 
 




15. Set a breakpoint in your runSearch() method in your WelcomeController

		   
16. Debug your Webapp
    a. Pull Run -> Debug webapp1 [jetty:run]
        
    NOTE:  If you do not see this option, then
      1) Open the Maven Projects window
         Pull View -> Tool Window -> Maven Project
    
      2) Single-click on Plugins -> jetty -> jetty:run
    
      3) Right-click on jetty:run -> Debug....  
          -- This will activate the jetty maven plugin in debug mode
             *AND*
          -- This will create a menu option :
             Run -> Debug '<your webapp's name>' [jetty:run]'
 
 
17. Attempt to connect to your webapp
    a. Startup a web browser
    b. Connect to http://localhost:8080/webapp1/accumulo/5

    You should see these results
    
    {"fred smith contact:city [billing] 1485468730242 false":"other town","fred smith contact:address [billing] 1485468726881 false":"444 main street","bob jones contact:phone [billing] 1485468719410 false":"555-1212","fred smith purchases:hat [billing\u0026inventory] 1485468737945 false":"$20","bob jones contact:address [billing] 1485468712664 false":"123 any street","bob jones contact:city [billing] 1485468716093 false":"anytown","bob jones purchases:sneakers [billing\u0026inventory] 1485468722826 false":"$60","fred smith purchases:glasses [billing\u0026inventory] 1485468733752 false":"$30"}
    
    
    

 
