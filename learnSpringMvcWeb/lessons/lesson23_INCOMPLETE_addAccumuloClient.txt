How to Add an Accumulo Client to your Spring MVC Web App
--------------------------------------------------------

Assumptions:
 A) You want your Spring MVC Web App to talk to an Accumulo data store
 B) You have installed the Accumulo quick-install 
 C) Your Accumulo has a zookeeper listening on the unix server at 192.168.43.129:2181
 D) Your Accumulo instance has a username=root and password=secret
 
 
Procedure
---------
 1. Startup your Accumulo Quick Install
    unix> source ~/quickinstall-home/bin/quickinstall-env
    unix> qi-start
    
 
 2. Create an Accumulo Table and add some data records
    unix> source ~/quickinstall-home/bin/quickinstall-env
    unix> accumulo shell -u root -p secret
    
    a. Create the table
       	root@accumulo> createtable docs
    
    
    b. Insert some data
	    root@accumulo docs> insert "bob jones" "contact" "address" "123 any street" -l billing
	    root@accumulo docs> insert "bob jones" "contact" "city" "anytown" -l "billing"
	    root@accumulo docs> insert "bob jones" "contact" "phone" "555-1212" -l "billing"
	    root@accumulo docs> insert "bob jones" "purchases" "sneakers" "$60" -l "billing&inventory"
	    
	    root@accumulo docs> insert "fred smith" "contact" "address" "444 main street" -l billing
	    root@accumulo docs> insert "fred smith" "contact" "city" "other town" -l billing
	    root@accumulo docs> insert "fred smith" "purchases" "glasses" "$30" -l "billing&inventory"
	    root@accumulo docs> insert "fred smith" "purchases" "hat" "$20" -l "billing&inventory"
         
    c. Give the root user authorization to see the data
       root@accumulo docs> setauths -u root -s inventory,billing
       
       root@accumulo docs> getauths
       -- You should see inventory,billing
       
    d. Look at the data
       root@accumulo docs> scan
       -- You should see all of the data
    
    e. Look at the data related to the "bob jones" row ID
       root@accumulo docs> scan -r "bob jones"
       -- You should only see the data related to "bob jones" 
    
    f. Look at the data that is under the billing authorization
       root@accumulo docs> scan -s billing
       root@accumulo docs> scan -s billing,inventory
       
    g. Quit out of the Accumulo Shell
       root@accumulo docs> quit
       
 
 3. Create a Java JAR program wih the name 'queryAcc'
    [see learnJava / howToCreateJavaCommandLineProgramUsingIntellijMaven.txt]
    
    
    
 4. Add these dependencies to your java project's pom.xml

	    <dependency>
	      <groupId>org.apache.accumulo</groupId>
	      <artifactId>accumulo-core</artifactId>
	      <version>1.6.1</version>
	      <exclusions>
	        <!-- accumulo-core comes with log4j but we will use logback so strip it out -->
	        <exclusion>
	          <groupId>org.slf4j</groupId>
	          <artifactId>slf4j-log4j12</artifactId>
	        </exclusion>
	
	        <exclusion>
	          <groupId>log4j</groupId>
	          <artifactId>log4j</artifactId>
	        </exclusion>
	      </exclusions>
	    </dependency>
	
	    <dependency>
	      <groupId>org.apache.commons</groupId>
	      <artifactId>commons-lang3</artifactId>
	      <version>3.3.2</version>
	    </dependency>
	
	    <dependency>
	      <!-- Tell log4j to forward its logging to slf4j -->
	      <groupId>org.slf4j</groupId>
	      <artifactId>log4j-over-slf4j</artifactId>
	      <version>1.7.12</version>
	    </dependency>
	
	    <dependency>
	      <!-- Logback is the logging implementation that slf4j will use -->
	      <groupId>ch.qos.logback</groupId>
	      <artifactId>logback-classic</artifactId>
	      <version>1.0.13</version>
	    </dependency>
	
	    <dependency>
	      <groupId>junit</groupId>
	      <artifactId>junit</artifactId>
	      <version>3.8.1</version>
	      <scope>test</scope>
	    </dependency>


 
 5. Change the logback.xml file to this:

		<?xml version="1.0" encoding="windows-1252" ?>
		<!DOCTYPE project>
		
		<configuration debug="false">
		    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		        <encoder>
		            <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
		        </encoder>
		    </appender>
		
		
		    <logger name="org.apache.accumulo" level="DEBUG" additivity="false">
		        <appender-ref ref="CONSOLE"/>
		    </logger>
		
		    <logger name="com.stuff" level="DEBUG" additivity="false">
		        <appender-ref ref="CONSOLE"/>
		    </logger>
		
		    <root level="DEBUG">
		        <appender-ref ref="CONSOLE"/>
		    </root>
		</configuration> 
 
    
 
 6. Add this class:  AccumuloDao

		package com.stuff;
		
		import org.apache.accumulo.core.client.Connector;
		import org.apache.accumulo.core.client.Instance;
		import org.apache.accumulo.core.client.ZooKeeperInstance;
		import org.apache.accumulo.core.client.security.tokens.PasswordToken;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		
		/**
		 * Created by Adam on 1/24/2017.
		 */
		public class AccumuloDao
		{
		    private static final Logger logger = LoggerFactory.getLogger(AccumuloDao.class);
		
		    private Connector connector = null;
		
		    public AccumuloDao(String aInstanceName, String aZookeepers, String aUsername, String aPassword) throws Exception
		    {
		        logger.debug("AccumuloDao() started.  aInstanceName={}   aZookeepers={}   aUsername={}", aInstanceName, aZookeepers, aUsername);
		        Instance inst = new ZooKeeperInstance(aInstanceName, aZookeepers);
		
		        this.connector = inst.getConnector(aUsername, new PasswordToken(aPassword));
		        logger.debug("AccumuloDao() finished.");
		    }
		
		
		
		    public Connector getConnector()
		    {
		        return this.connector;
		    }
		} 
		 
		 
 7. Update your App class to this:

		package com.stuff;
		
		import org.apache.accumulo.core.client.Connector;
		import org.apache.accumulo.core.client.Scanner;
		import org.apache.accumulo.core.data.Key;
		import org.apache.accumulo.core.data.Value;
		import org.apache.accumulo.core.security.Authorizations;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import java.util.Map;
		
		/**
		 * App class.
		 *
		 * This is a class that simply instantiates the AccumuloDao class and uses it list all records in a table
		 *
		 */
		public class App 
		{
		    private static final Logger logger = LoggerFactory.getLogger(App.class);
		
		    public static void main( String[] args ) throws Exception
		    {
		        logger.debug("main() started.");
		
		        final String ACC_INSTANCE_NAME = "accumulo";
		        final String ACC_ZOOKEEPERS    = "192.168.1.161";   // default port is 2181
		        final String ACC_USERNAME      = "root";
		        final String ACC_PASSWORD      = "secret";
		
		
		        AccumuloDao accumuloDao = new AccumuloDao(ACC_INSTANCE_NAME, ACC_ZOOKEEPERS, ACC_USERNAME, ACC_PASSWORD);
		
		        Connector conn = accumuloDao.getConnector();
		
		        final String ACC_TABLE_NAME = "docs";
		        logger.debug("Scanning {}", ACC_TABLE_NAME);
		
		        Authorizations authorizations = conn.securityOperations().getUserAuthorizations(ACC_USERNAME);
		        logger.debug("authorizations={}", authorizations.toString());
		
		        String row = null;
		        Scanner scanner = conn.createScanner(ACC_TABLE_NAME, authorizations);
		
		        // Loop through all rows in this table
		        for (Map.Entry<Key,Value> entry: scanner)
		        {
		            logger.debug("  {}  {}", entry.getKey(), entry.getValue());
		        }
		
		        scanner.close();
		
		        logger.debug("main() finished.");
		    }
		}

 
 
 
 8. Add these properties to your property file
 
 
 9. Add a JSP page to display some values
 
 
10. Add a Rest call to display the page
 
 
 
