Lesson:  Add an Angular UI-Grid to your Spring MVC Web App
----------------------------------------------------------
This lesson describes how to add an Agular UI-grid to your JSP page.

  
Assumptions:  
 A) You have a Spring MVC web app already setup
 B) Your spring dispatch-servlet.xml has this entry in it:   
      <!-- Map the relative address for certain locations -->
      <mvc:resources  mapping="/resources/**"  location="/resources/" />
  

References
----------
http://ui-grid.info/docs/#/tutorial
http://ui-grid.info/
https://github.com/angular-ui/ui-grid/issues/4116


Procedure
---------
 1. Download UI-Grid 4.0.2
    a. Browse to http://ui-grid.info/
       click "Download"
       click on verison "4.0.2"
       *OR*
       Go to https://github.com/angular-ui/ui-grid.info/tree/gh-pages/release/4.0.2
       
    
    b. Make a directory on your computer:  c:/vault/ui-grid-4.0.2/
    
    c. Download all of the files
       a) Get https://raw.githubusercontent.com/angular-ui/ui-grid.info/gh-pages/release/4.0.2/ui-grid.css
       b) Get https://raw.githubusercontent.com/angular-ui/ui-grid.info/gh-pages/release/4.0.2/ui-grid.eot
       c) Get https://raw.githubusercontent.com/angular-ui/ui-grid.info/gh-pages/release/4.0.2/ui-grid.js
       d) Get https://raw.githubusercontent.com/angular-ui/ui-grid.info/gh-pages/release/4.0.2/ui-grid.min.css
       e) Get https://raw.githubusercontent.com/angular-ui/ui-grid.info/gh-pages/release/4.0.2/ui-grid.min.js
       f) Get https://raw.githubusercontent.com/angular-ui/ui-grid.info/gh-pages/release/4.0.2/ui-grid.svg
       g) Get https://raw.githubusercontent.com/angular-ui/ui-grid.info/gh-pages/release/4.0.2/ui-grid.ttf
       h) Get https://raw.githubusercontent.com/angular-ui/ui-grid.info/gh-pages/release/4.0.2/ui-grid.woff

       *OR*
       
       Click on each file and save the *raw* file to your c:/vault/ui-grid-4.0.2/ directory
       
            
       
 2. Manually add these ui-grid files to your Spring MVC Web App  
    a. Startup Intellij
   
    b. Copy the directory
       1) Right-click on c:/vault/ui-grid-4.0.2/ -> Copy   
    
    c. In Intellij, Right-click on  /src/main/webapp/resources/ -> Right-Click -> Paste
       Intellij will prompt you to copy files, press OK
                 
          
       Now, you should have these directories
          /src/main/webapp/resources/ui-grid-4.0.2/ui-grid.css
          /src/main/webapp/resources/ui-grid-4.0.2/ui-grid.eot
          /src/main/webapp/resources/ui-grid-4.0.2/ui-grid.js
          /src/main/webapp/resources/ui-grid-4.0.2/ui-grid.min.css
          /src/main/webapp/resources/ui-grid-4.0.2/ui-grid.min.js
          /src/main/webapp/resources/ui-grid-4.0.2/ui-grid.svg
          /src/main/webapp/resources/ui-grid-4.0.2/ui-grid.ttf
          /src/main/webapp/resources/ui-grid-4.0.2/ui-grid.woff

            
        
    *OR*  (if you downloaded the file to your ~/Downloads directory)
    
     unix> cd /home/adam/intellijProjects/webapp1
     unix> cd src/main/webapp/resources/
     unix> mkdir ui-grid-4.0.2
     unix> cd ui-grid-4.0.2
     unix> cp ~/Downloads/ui-grid.css  .
     unix> cp ~/Downloads/ui-grid.eot  .
     unix> cp ~/Downloads/ui-grid.js  .
     unix> cp ~/Downloads/ui-grid.min.css  .
     unix> cp ~/Downloads/ui-grid.min.js  .
     unix> cp ~/Downloads/ui-grid.svg  .
     unix> cp ~/Downloads/ui-grid.ttf  .
     unix> cp ~/Downloads/ui-grid.woff  .


 
  3. Add a method to your WelcomeController  (that will load grid1.jsp page)
 	    
 	    private Gson gson = new Gson();
 
 		. . .
 		
 
	   /**********************************************************************
	     * showGrid1()
	     *
	     * The user browsed to the /grid1 page
	     *  1) Run a SQL query to get some data from the database
	     *  2) Add that data to the ModelAndView
	     *  3) Forward the user to the grid1.jsp page
	     ***********************************************************************/
	    @RequestMapping("/grid1")
	    public ModelAndView showGrid1( Model aModel ) throws Exception
	    {
	        logger.debug("showGrid1() started");
	
	        // Create a modelAndView object
	        ModelAndView mav = new ModelAndView();
	
	        // Show the grid1.jsp page
	        mav.setViewName("grid1.jsp");
	
	        // Part 1:  Get list of UserInfo objects from the the database
	        ArrayList<UserInfo> users = getUserListOrderedBy("name");
	
	        // Part 2:  Convert the list of UserInfo objects into a JSON string
	        String sListOfUsersAsJson = this.gson.toJson(users);
	
	        // Part 3:  Add the JSON string to the model-and-view  (so the page can access it)
	        mav.addObject("listOfUsersAsJson", sListOfUsersAsJson);
	
	        logger.debug("showGrid1() finished");
	        return mav;
	    }

	 
	 
	    /***************************************************************************
	     * getUserListOrderedBy()
	     *  1) Run a sql call to get all userinfo from the database
	     *
	     *  Returns a list of UserInfo objects
	     ****************************************************************************/
	    private ArrayList<UserInfo> getUserListOrderedBy(String aOrderBy) throws Exception
	    {
	        ArrayList<UserInfo> users = new ArrayList<UserInfo>();
	
	        // Construct the SQL call
	        final String sSql = "Select name from users order by " + aOrderBy;
	
	        JdbcTemplate jt = new JdbcTemplate(this.postgresDataSource);
	
	        // Get a connection from the JDBC pool, run the query, return the connection to the pool
	        SqlRowSet rs = jt.queryForRowSet(sSql);
	
	        while (rs.next())
	        {
	            // Get the name from the read-only recordset
	            String sUserName = rs.getString(1);
	
	            // Construct a new userInfo object and popuplate it with data from the database
	            UserInfo userInfo = new UserInfo();
	            userInfo.setUserName(sUserName);
	            userInfo.setIsAdministrator(false);
	
	            users.add(userInfo);
	        }
	
	        return users;
	    }
	 
	 
  
  4. Add this file:  grid1.jsp
     
     a. Right-click on /src/main/webapp/WEB-INF/jsp -> New -> File
        Filename:  grid1.jsp
        
     
     b. Copy this to your grid1.jsp file
     
			
		<%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
		
		<!DOCTYPE HTML>
		
		<html lang="en" data-ng-app="myApp">
		
		<head>
		    <title>Angular Grid #1</title>
		
		    <%-- I N S E R T       C S S     F I L ES  --%>
		    <link rel="styleSheet" href="${contextPath}/resources/ui-grid-4.0.2/ui-grid.min.css"/>
		
		    <style type="text/css">
		        .myGrid {
		            width: 500px;
		            height: 250px;
		        }
		    </style>
		</head>
		
		<body data-ng-controller="PageController as ctrl">
		
		<%-- S T A N D A R D       H E A D E R  --%>
		<%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
		
		<h2>grid1.jsp</h2>
		
		
		<%-- U I   G R I D     --%>
		<div ui-grid="{ data: scopedGridData }" class="myGrid"></div>
		
		<br/>
		<br/>
		
		<%-- S T A N D A R D       F O O T E R  --%>
		<%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
		
		
		<%-- L O A D    J A V A S C R I P T    F I L E S       --%>
		<script src="${contextPath}/resources/angular-1.5.11/angular.min.js"></script>
		<script src="${contextPath}/resources/ui-grid-4.0.2/ui-grid.min.js"></script>
		
		<script type="text/javascript">
		
		    // include the ui.grid module as a dependency to this app
		    var myApp = angular.module('myApp', ['ui.grid']);
		
		    // Get the returned JSON string from the JSP page
		    var gListOfUsersAsJson = ${listOfUsersAsJson};
		
		
		    myApp.controller('PageController', function ($scope, $log)
		    {
		        var self = this;
		
		        // the ng-grid does not allow 'controller as' syntax for options.data
		        // -- So, we must use the $scope variable
		        $scope.scopedGridData = gListOfUsersAsJson;
		    });
		
		</script>
		
		</body>
		</html>
  
  
 5. Activate your Intellij Debugger
    If you are using the jetty-plugin (see step 4c), then 
       Pull Run / Debug 'webapp1 [jetty:run]'
     

 6. Open a browser and go to your welcome page
    a. Go to http://localhost:8080/grid1
       -- You should see your grid
        

       	   