Lesson:  Download a File from your Spring Controller
----------------------------------------------------
This lesson describes how to have a user download a file from your Spring Controller

  
Assumptions:  
 A) You have a Spring MVC web app already setup


      
References
----------
http://stackoverflow.com/questions/5673260/downloading-a-file-from-spring-controllers


Procedure
---------
 1. Download a large file to your c:\vault\CentOS-6.6-x86_64-bin-DVD1.iso
    a. Go to http://mirror.symnds.com/distributions/CentOS-vault/6.6/isos/x86_64/CentOS-6.6-x86_64-bin-DVD1.iso
    b. Copy this file to your c:\vault\ directory
    
 
 2. Add this method to your WelcomeController
 	
		import org.springframework.core.io.InputStreamResource;
		import org.springframework.http.HttpHeaders;
		import org.springframework.http.HttpStatus;
		import org.springframework.http.MediaType;
		import org.springframework.http.ResponseEntity;		 	
		. . .
		
		@Controller
		public class WelcomeController
		{
		    private final static Logger logger = LoggerFactory.getLogger(WelcomeController.class);
		 	
		 	
		 	
		 
		
		    /**********************************************************************
		     * download1()
		     ***********************************************************************/
		    @RequestMapping(value = "/download/{fileId}", method = RequestMethod.GET)
		    public  ResponseEntity<?> download(@PathVariable("fileId") String aFileId, HttpServletResponse response) throws Exception
		    {
		        logger.debug("download() started.  aFileId={}", aFileId);
		
		        // Use the passed-in fileId to generate a full-path
		    //    String sFullPath = stuffService.figureOutFileNameFor(stuffId);
		        String sFullPath = "C:\\vault\\CentOS-6.6-x86_64-bin-DVD1.iso";
		
		        try
		        {
		            File file = new File(sFullPath);
		
		            HttpHeaders headers = new HttpHeaders();
		
		            // Set a header with the length of the file (so the browser will know what the total file size is)
		            headers.setContentLength(file.length() );
		
		            // Set a header with the default name to save this file as
		            headers.setContentDispositionFormData("attachment", file.getName());
		
		            FileInputStream fis = new FileInputStream(file);
		            InputStreamResource isr = new InputStreamResource(fis);
		            return new ResponseEntity<InputStreamResource>(isr, headers, HttpStatus.OK);
		        }
		        catch (Exception e)
		        {
		            logger.error("Error occurred making call to /download/{}", aFileId, e);
		
		            // Get a formatted error message from the exception object
		            String sMessage = getFormattedMessageFromException(e);
		
		            // Tell the AJAX caller that this will be plain text being returned (and not JSON)
		            HttpHeaders headers = new HttpHeaders();
		            headers.setContentType(MediaType.TEXT_PLAIN);
		
		            // Return the error back to the caller
		            return new ResponseEntity<String>(sMessage, headers, HttpStatus.INTERNAL_SERVER_ERROR);
		        }
		        finally
		        {
		           logger.debug("download() finished.");
		        }
		    }
		


