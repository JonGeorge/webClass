Lesson:  Setup a Generic Security Mechanism
-------------------------------------------
Problem:  You don't want to have a bunch of if statements in your REST calls and your front-end angular page
Solution: Setup a database table that holds a mapping of roles to permissions

Design
------
 A) Create a database table holds all permutations of roles-to-permissions
 B) Load the database table into a cache on webapp startup
 C) Secure the back-end REST calls 
    1) Create a generic metho by having all REST calls call a generic method to see if the user is allowed to call this rest call/action_type
    2) Have all REST calls make this call before doing anything else
       If the user fails to have this permission, then throw a 403 forbidden
       
 D) Secure the front-end views 
    1) Create a REST call that will return all of the roles-to-permissions
    2) Create an Angular Service that will check for permissions
    C) For each view, add 2 angular ng-if statements
        a) If the user does not have permission, then display 403 Forbidden
        b) If the user does have permission, then continue to display the view

Proedure
--------
 1. Create this database table:  roles-to-permissions
 
 INCOMPLETE
