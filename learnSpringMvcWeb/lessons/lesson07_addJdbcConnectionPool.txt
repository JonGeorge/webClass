Lesson 7:  Add a JDBC Connection Pool to the Web App
----------------------------------------------------

Assumptions:
 A) You have a postgres database
 B) You can use the following database credentials to connect:
      hostname:  localhost
      user:      postgres
      password:  secret
      schema:    postgres
 C) You want your webapp to talk with a postgreSQL database
 D) You want to use C3P0 to manage the pool of connections
 E) You want to store your jdbc properties in a simple property file
    (and not in context.xml)
  
      

Procedure
---------
 1. Add these dependencies to your pom.xml

        <!-- Add the dependency for your postgreSQL JDBC driver -->
		<dependency>
		    <groupId>postgresql</groupId>
		    <artifactId>postgresql</artifactId>
		    <version>9.1-901-1.jdbc4</version>
		</dependency>


        <!-- Add the dependency for the C3P0 connection pool -->
        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.1</version>
        </dependency>



  
 2. Add the postgresDataSource bean to your applicationContext.xml    

    <!-- Setup a spring bean that acts as a C3P0 Connection pool                          -->
    <!-- NOTE:  Set destroy-method="close" so that Spring will close the connection pool  -->
    <bean id="postgresDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"  destroy-method="close">
        <property name="driverClass"              value="org.postgresql.Driver"/>
        <property name="jdbcUrl"                  value="jdbc:postgresql://localhost:5432/postgres"  />
        <property name="user"                     value="postgres" />
        <property name="password"                 value="secret" />
        <property name="initialPoolSize"          value="1" />
        <property name="maxPoolSize"              value="15" />
        <property name="minPoolSize"              value="1" />
        <property name="maxIdleTime"              value="240" />
        <property name="maxConnectionAge"         value="3600" />
        <property name="preferredTestQuery"       value="select now() "/>
        <property name="idleConnectionTestPeriod" value="30000" />
    </bean>




 3. Adjust c3p0 logging level (by adjusting the com.mchange class)
    NOTE:  If you are using logback, then edit your logback.xml like this:
    
        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>
        
        <configuration debug="true">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                </encoder>
            </appender>
             
            <logger name="org.springframework" level="INFO" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
        
            <logger name="app1" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/> 
             </logger>
            
            <logger name="com.mchange" level="DEBUG" additivity="false">
				<!-- C3P0 Connection Pool Logging is here -->
                <appender-ref ref="CONSOLE"/>
            </logger>
        
            
            <root level="WARN" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </root>
        
        </configuration>
    
        
        
    

 4. Add this class:  SpringAppContextUtils 
    NOTE:  This will be used to get access to spring beans from anywhere within your web app
    a. Right-click on src/main/java/app1/utilities -> New -> Java Class
       Name:  SpringAppContextUtils
       
    b. Copy the following code to your SpringAppContextUtils class
       
       package app1.utilities;
        
        
      /**
        * To work, this line must be in the applicationContext.xml file
        *    <bean id="applicationContextProvider" class="app1.utilities.SpringAppContextUtils" />
        * 
        *  MySpringBean mySpringBean = (MySpringBean) SpringApplicationContext.getBean("mySpringBean");
        * 
        * This class implements ApplicationContextAware. 
        * The method, â€œsetApplicationContext(â€¦)â€� gets called during the creation of this bean
        * providing the reference to the context. 
        * 
        */
        import org.springframework.beans.BeansException;
        import org.springframework.context.ApplicationContext;
        import org.springframework.context.ApplicationContextAware;
        
        public class SpringAppContextUtils implements ApplicationContextAware
        {
             private static ApplicationContext applicationContext = null;
        
              public static ApplicationContext getApplicationContext()
              {
                  return applicationContext;
              }
              
              public void setApplicationContext(ApplicationContext aApplicationContext) throws BeansException
              {
                   // Assign the ApplicationContext into a static variable
                   applicationContext = aApplicationContext;
              }
              
              
              public static Object getBean(String aName)
              {
                  if (applicationContext == null)
                  {
                      throw new RuntimeException("Error in SpringAppContextUtils.getBean().  The applicationContext is null");
                  }
                  
                  return applicationContext.getBean(aName);
              }
              
        }


 5. Setup SpringAppContextUtils so that it has the applicationContext passed into it
    Add this line to your applicationContext.xml file 

      <bean id="applicationContextProvider" class="app1.utilities.SpringAppContextUtils" />
  
 
 
 

  At this point, you can get to your datasource bean in one of two ways:
    a) Use the SpringAppContextUtils.getBean("postgresDataSource")
       NOTE:  This will work anywhere in your web application
         
        // Get a reference to the postgresDataSource bean
        DataSource postgresDataSource = (DataSource) SpringAppContextUtils.getBean("postgresDataSource");
  
  
    b) Inject your spring bean into your class by using
        @Resource
        private DataSource postgresDataSource
  
 

  
 6. Verify the connection pool is initialized on web app startup
    a. Add the verifyConnectionPool() method to your MyApplicationWatcher class
    
            /*******************************************************************************
             * verifyConnectionPool()
             *******************************************************************************/
            private void verifyConnectionPool() throws Exception
            {
                logger.debug("verifyConnectionPool() started");
                 
                // Get a reference to the postgresDataSource bean
                DataSource postgresDataSource = (DataSource) SpringAppContextUtils.getBean("postgresDataSource");
                 
                JdbcTemplate jt = new JdbcTemplate( postgresDataSource );
                
                final String sSql = "Select now()";
                
                // Run a query -- which initialized the connection pool
                String sDatabaseTime = jt.queryForObject(sSql, String.class);
                
                logger.debug("verifyConnectionPool() finished successfully.  Database Time is {}", sDatabaseTime);
            }
    

    b. Adjust your MyApplicationWatcher.contextInitialized() so that it calls 
       verifyConnectionPool *after* Spring is initialized
       
    
        public class MyApplicationWatcher extends ContextLoaderListener
        {
            private static final Logger logger = LoggerFactory.getLogger(MyApplicationWatcher.class);
            
            
            /*******************************************************************************
             * contextInitialized()
             *   1) Verify the connection pool by attempting to run a query
             *******************************************************************************/
            @Override
            public void contextInitialized(ServletContextEvent aServletContextEvent)
            {
                // Get a pointer to the ServletContext
                ServletContext ctx = aServletContextEvent.getServletContext();
                
                final String sWebAppName = ctx.getContextPath().substring(1);
                logger.debug("{} contextInitialized() started.", sWebAppName);
        
                 try 
                 {
                     // Initialize Spring Context (which creates your spring beans)
                     super.contextInitialized( aServletContextEvent);
                         
                     // Verify your connection pool
                     verifyConnectionPool();
                 }
                 catch (Exception e)
                 {
                     throw new RuntimeException("Critical Error in contextInitialized().  WEB APP WILL NOT STARTUP.", e);
                 }
                 
                 
                 logger.debug("{} contextInitialized() finished.", sWebAppName);
            }
        
        
        
        
            /***********************************************************************************
             * contextDestroyed()
             * The webapp is about to be shutdown
             *   1) Shutdown any database connection pools manually
             *   2) Shutdown the spring context
             ************************************************************************************/
            @Override
            public void contextDestroyed( ServletContextEvent aServletContextEvent )
            {
                // Get the name of the web application
                final String sWebAppName = aServletContextEvent.getServletContext().getContextPath().substring(1);
        
                logger.debug("{} contextDestroyed() started", sWebAppName);
        
                // S H U T D O W N     S P R I N G     C O N T E X T
                // NOTE:  Because our JDBC connection pool is managed by spring, it should also close down
                super.contextDestroyed( aServletContextEvent);
        
                logger.debug("{} contextDestroyed() finished", sWebAppName);
            }        
                
         
        
            
            /*******************************************************************************
             * verifyConnectionPool()
             *******************************************************************************/
            private void verifyConnectionPool()
            {
                logger.debug("initializeConnectionPool() started");
                 
                // Get a reference to the postgresDataSource bean
                DataSource postgresDataSource = (DataSource) SpringAppContextUtils.getBean("postgresDataSource");
                 
                JdbcTemplate jt = new JdbcTemplate( postgresDataSource );
                
                final String sSql = "Select now()";
                
                // Run a query -- which initialized the connection pool
                String sDatabaseTime = jt.queryForObject(sSql, String.class);
                
                logger.debug("initializeConnectionPool() finished successfully.  Database Time is {}", sDatabaseTime);
            }
        
        }
        
 7. Set a breakpoint on your verifyConnectionPool() method 
    And, debug your web app
    
    
 8. Inject your postgresDataSource into a class and try to use it

    a. Add this to the top of your WelcomeController class
    
    	
		import javax.annotation.Resource;
		import javax.sql.DataSource
		
		...
		
     
        @Resource
        private DataSource postgresDataSource;
    
    
    
    b. Add this method to your WelcomeController class
    
            /*******************************************************************************
             * getDatabaseTime()
             *******************************************************************************/
            private String getDatabaseTime() throws Exception
            {                 
                JdbcTemplate jt = new JdbcTemplate( this.postgresDataSource );
                
                final String sSql = "Select now()";
                
                // Run a query -- which initialized the connection pool
                String sDatabaseTime = jt.queryForObject(sSql, String.class);
                
                return sDatabaseTime;
            }
 
 
     c. Add this line to your WelcomeController.mainPage()
	        String sDatabaseTime = getDatabaseTime();
	        logger.debug("Current database time is {}", sDatabaseTime);
	        mav.addObject("currentTime", sDatabaseTime);
	            
     d. Modify welcome.jsp to show it
        Add this to welcome.jsp
           Database time is ${currentTime}



 9. Activate your Intellij Debugger
    If you are using the jetty-plugin (see step 4c), then 
       Pull Run / Debug 'webapp1 [jetty:run]'
     

      
10. Connect to your site
    a. Open a browser
    b. Go to http://localhost:8080/webapp1
       -- You should see the database time in your welcome page
       

    
