Lesson:  How to handle the 404 Error (when a user visits a page that has no mapping)
------------------------------------------------------------------------------------
Sometimes, users visit a page that is not found.  

Instead of showing an ugly 404 not found message, we want to:
 a) Log the message to our log file
 b) Show a web page that has link to start over *and*
    a cut message -- e.g., "This is Embarrassing....But, I could not find your page."
 c) return a 404 status code

 
Assumptions:
 A) You have a Spring MVC Web App already
 B) When a user visits page that has no mapping, show a web page (and do not display the default 404 not found page)



References
----------
http://stackoverflow.com/questions/21061638/spring-mvc-how-to-return-custom-404-errorpages



Procedure
---------
 1. Add this init-param to the DispatcherServlet
    a. Edit the web.xml
    
    b. Add this to your DispatcherServlet
    
        <init-param>
          <param-name>throwExceptionIfNoHandlerFound</param-name>
          <param-value>true</param-value>
        </init-param>
 
    
       When finished, your DispatcherServlet should look like this:
 
         
          <servlet>
            <servlet-name>dispatcher</servlet-name>
            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
            <init-param>
              <param-name>contextConfigLocation</param-name>
              <param-value>/WEB-INF/spring/dispatch-servlet.xml</param-value>
            </init-param>
        
            <init-param>
              <param-name>throwExceptionIfNoHandlerFound</param-name>
              <param-value>true</param-value>
            </init-param>
        
            <load-on-startup>1</load-on-startup>
          </servlet>
  
 
 
 2. Create this Class:  MyExceptionHandler 
    a. Right-click on /src/main/java/app1/controllers/ -> New -> Java Class
       Filename:  MyExceptionHandler
    
    b. Copy this to your MyExceptionHandler class
        
        package app1.controllers;
        
        import app1.model.UserInfo;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.http.HttpStatus;
        import org.springframework.web.bind.annotation.ControllerAdvice;
        import org.springframework.web.bind.annotation.ExceptionHandler;
        import org.springframework.web.bind.annotation.ResponseStatus;
        import org.springframework.web.servlet.ModelAndView;
        import org.springframework.web.servlet.NoHandlerFoundException;
        
        /**
         * Created by adam on 1/16/2017.
         */
        @ControllerAdvice
        public class MyExceptionHandler
        {
            private static final Logger logger = LoggerFactory.getLogger(MyExceptionHandler.class);
        
            /***********************************************************************
             * handleNoHandlerFound()
             *
             * Spring MVC calls this method when the user attempts to go to a URL that has no mapping
             *
             * Instead of showing an ugly 404 not found message,
             * we will display a regular web page (404.jsp) and set the status code to Not found (404)
             ************************************************************************/
            @ExceptionHandler(NoHandlerFoundException.class)
            @ResponseStatus(HttpStatus.NOT_FOUND)
            public ModelAndView handleNoHandlerFound(Exception ex)
            {
                logger.debug("handleNoHandlerFound() finished");
        
                // Create a modelAndView object
                ModelAndView mav = new ModelAndView();
        
                // Show the 404.jsp page
                mav.setViewName("404.jsp");
        
                // Create a userInfo object
                UserInfo userInfo = new UserInfo();
                userInfo.setUserName("Adam");
                userInfo.setIsAdministrator(true);
        
                // Add the userInfo information to the view
                mav.addObject("userInfo", userInfo);
        
                logger.debug("handleNoHandlerFound() finished");
                return mav;
            }
        
        }
                
                
        
 3. Create this file:  404.jsp
     
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <!DOCTYPE HTML>
        
        <html xmlns="http://www.w3.org/1999/xhtml">
        
        <head>
            <title>Error</title>
        </head>
        
        <body>
        
        <%-- S T A N D A R D       H E A D E R  --%>
        <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
        
        <h1>This is Embarrassing.</h1>
        
        <br/>
        <br/>
        <h2>This is Embarrassing....But, I could not find your page.</h2>
        
        <br/>
        <a href="${contextPath}/">Start Over</a> <br/>
        <br/>
        
        <br/>
        <br/>
        
        <%-- S T A N D A R D       F O O T E R  --%>
        <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
        
        </body>
        </html>
        

       
 4. Activate your Intellij Debugger
    If you are using the jetty-plugin (see step 4c), then 
       Pull Run / Debug 'webapp1 [jetty:run]'
           
          
 5. Verify it works
    a. Open a browser
    b. Go to http://localhost:8080/webapp1/thisUrlisNotFound
       -- You should see your 404.jsp page
          
       
       