How to Implement a Form Wizard in Spring MVC
--------------------------------------------
Suppose you want to setup a series of web pages and have a user continue to hold form information from page 1 to page 2.


Assumptions:
 1) You have a Spring MVC Web App
 2) You have a series of web pages that you want the user to follow
 3) You have installed jquery       [See howToAddJQueryToSpringMvcAppUsingIntellij.txt]
 4) Your stdJspIncludes.jsp page looks like this:
 
        <%@ page session="false" language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" %>
        
        <%-- Allow all JSPs to use the tag libraries --%>
        <%@ taglib prefix='c'      uri='http://java.sun.com/jsp/jstl/core' %>
        <%@ taglib prefix='spring' uri='http://www.springframework.org/tags' %>
        <%@ taglib prefix='form'   uri='http://www.springframework.org/tags/form' %>
        
        <%-- Allow all JSPs to have the contextPath variable --%>
        <c:set var="contextPath" value="${pageContext.request.contextPath}" />

         
 
References
----------
http://www.intertech.com/Blog/understanding-spring-mvc-model-and-session-attributes/
http://stackoverflow.com/questions/17722641/spring-sessionattribute-how-to-retrieve-the-session-object-in-same-controller

 

Procedure
---------
 1. Create a SpringMvcWebApp [see howToCreateSpringMvcWebApp_usingIntellijMaven_jettyPlugin2.txt]
    NOTE:  Call the webapp springMvcWebAppWiz
    
 
 
 2. Create a FormBean
    Right-click on /src/main/java/app1/model -> New Java Class -> 
    Name:  FormBean
    
    Copy this to your new FormBean Class
    
        package app1.model;
        
        /**
         * Created by adam on 1/16/2016.
         */
        public class FormBean
        {
            private String message;
            private String name;
            private String age;
            private int id;
            private int occupationId;
            private String occupationName;
        
            public FormBean()
            {
            }
        
            public FormBean(String aMessage, int aId)
            {
                this.message = aMessage;
                this.id = aId;
            }
        
            public String getMessage() { return this.message; }
            public void setMessage(String aMessage) { this.message = aMessage; }
        
            public int getId() { return this.id; }
            public void setId(int aId) { this.id = aId; }
        
            public String getName() { return this.name; }
            public void setName(String aName) { this.name = aName; }
        
            public String getAge() { return this.age; }
            public void setAge(String aAge) { this.age = aAge; }
        
            public int getOccupationId() { return this.occupationId; }
            public void setOccupationId(int aOccupationId) { this.occupationId = aOccupationId; }
        
            public String getOccupationName() { return this.occupationName; }
            public void setOccupationName(String aName) { this.occupationName = aName; }
        
        }


 
 
 3. Create a Wizard Controller
    a. Right-click on app1 / controllers -> New Class
       Class Name:  WizardController
        
    b. Copy this to your WizardController
    
        package app1.controllers;
        
        import app1.model.FormBean;
        import org.apache.commons.lang3.StringUtils;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.http.HttpStatus;
        import org.springframework.stereotype.Controller;
        import org.springframework.validation.BindingResult;
        import org.springframework.validation.Errors;
        import org.springframework.web.HttpSessionRequiredException;
        import org.springframework.web.bind.annotation.*;
        import org.springframework.web.bind.support.SessionStatus;
        import org.springframework.web.servlet.FlashMap;
        import org.springframework.web.servlet.ModelAndView;
        import org.springframework.web.servlet.support.RequestContextUtils;
        import org.springframework.web.servlet.view.RedirectView;
        
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpSession;
        import java.util.HashMap;
        import java.util.Random;
        
        
        /**
         * Created by adam on 1/18/2016.
         */
        @SessionAttributes("formBean")    // Tell Spring the name of the model to be copied to the HttpSession before rendering a view
        @Controller
        public class WizardController
        {
            private final static Logger logger = LoggerFactory.getLogger(WizardController.class);
        
            private HashMap<Integer, String> occupations = getOccupations();
        
            /**********************************************************************
             * showPageOne()
             *  1) The user entered in /wizard on the URL -- redirect him to the starting page
             ***********************************************************************/
            @RequestMapping(value="/wizard")
            public String showPageOne( HttpSession aSession)
            {
                return "redirect:/wizard/page1";
            }
        
        
            /**********************************************************************
             * showPage1()
             *  1) State a new FormBean (if needed)
             *  2) Render page1.jsp
             *
             ***********************************************************************/
            @RequestMapping(value="/wizard/page1")
            public ModelAndView showPage1(HttpSession aSession)
            {
                logger.debug("handleRequestToPage1() started");
        
                // Create a modelAndView object
                ModelAndView mav = new ModelAndView();
                mav.setViewName("page1.jsp");
        
                if (aSession.getAttribute("formBean") == null)
                {
                    // This is the first time -- so create a new FormBean
                    FormBean formBean = new FormBean();
                    mav.addObject("formBean", formBean);
                }
        
                // Add the occupations information to the page
                mav.addObject("occupations", this.occupations);
        
                logger.debug("handleRequestToPage1() finished");
                return mav;
            }
        
        
        
        
            /**********************************************************************
             * onPage1_UserPressedContinue()
             *
             ***********************************************************************/
            @RequestMapping(value="/wizard/page1/continue")
            public ModelAndView onPage1_UserPressedContinue(@ModelAttribute("formBean") FormBean aFormBean, BindingResult aResult)
            {
                // Validate and cleanup form fields on page1
                validateAndCleanupPage1(aFormBean, aResult);
        
                if (aResult.hasErrors() )
                {
                    // There are errors -- so show the errors back on page 1
                    ModelAndView page1 = new ModelAndView("page1.jsp");
                    page1.addObject("formBean", aFormBean);
                    page1.addObject("occupations", this.occupations);
                    return page1;
                }
                else
                {
                    // There were no errors -- so continue to page2
        
                    // Set the occupation name value (that corresponds to the occuptationId)
                    String sOccuptationName = this.occupations.get(aFormBean.getOccupationId());
                    aFormBean.setOccupationName(sOccuptationName);
        
                    ModelAndView page2 = new ModelAndView("page2.jsp");
                    page2.addObject("formBean", aFormBean);
                    return page2;
                }
             }
        
        
            /**********************************************************************
             * showPage2()
             *  -- Render page2.jsp
             ***********************************************************************/
            @RequestMapping(value="/wizard/page2")
            public ModelAndView showPage2(@ModelAttribute FormBean aFormBean)
            {
                ModelAndView page2 = new ModelAndView("page2.jsp");
                return page2;
            }
        
        
            /**********************************************************************
             * onPage2_UserPressedContinue()
             *
             ***********************************************************************/
            @RequestMapping(value="/wizard/page2", params = "gotoPage3")
            public ModelAndView onPage2_UserPressedContinue(@ModelAttribute("formBean") FormBean aFormBean, BindingResult aResult)
            {
                logger.debug("showPage3() started");
        
                // Validate and cleanup form fields on page2
                validateAndCleanupPage2(aFormBean, aResult);
        
                if (aResult.hasErrors() )
                {
                    // There are errors -- so show the errors back on page 2
                    ModelAndView page2 = new ModelAndView("page2.jsp");
                    page2.addObject("formBean", aFormBean);
                    return page2;
                }
                else
                {
                    // There were no errors -- so continue to page3
                    ModelAndView page3 = new ModelAndView("page3.jsp");
                    page3.addObject("formBean", aFormBean);
                    return page3;
                }
            }
        
            /**********************************************************************
             * onPage2_UserPressedBack()
             *  -- So, take the user back to page1
             ***********************************************************************/
            @RequestMapping(value="/wizard/page2", params = "gotoPage1")
            public String onPage2_UserPressedBack(@ModelAttribute("formBean") FormBean aFormBean)
            {
                logger.debug("onPage2_UserPressedBack() started");
                return "forward:/wizard/page1";
            }
        
        
        
            /**********************************************************************
             * onPage3_UserPressedSubmitTransaction()
             * -- The user has entered clicked the form to *SUBMIT* the transaction
             *
             * 1) Run the transaction
             * 2) Get the generated ticket id
             * 3) If the transaction works, then *redirect* the user to the thank you page
             * 4) If the transaction fails, then forward the user back to the showFinalReview()
             ***********************************************************************/
            @RequestMapping(value="/wizard/page3", params = "submitTransaction", method=RequestMethod.POST)
            public ModelAndView onPage3_UserPressedSubmitTransaction( @ModelAttribute FormBean aFormBean, SessionStatus aStatus)
            {
                logger.debug("onPage3_UserPressedSubmitTransaction() started");
        
        
                try {
                    // Run some transaction to create the request
                    int iRandomNumber = getRandomIntegerBetween(1,4);
        
                    if (iRandomNumber == 2)
                    {
                        // Something went wrong
                        throw new RuntimeException("Error occurred running transaction");
                    }
        
                    // The transaction worked.
                    int iTicketid = iRandomNumber * 1000;
        
                    // Remove this bean from the session (without killing the entire HttpSession)
                    aStatus.setComplete();
        
                    // Redirect the user to the thank you page (showing the ticketid)
                    // NOTE:  We redirect on purpose:  If the user clicks "refresh" on the last page, then nothing happens and no errors appear
                    ModelAndView mav = new ModelAndView();
                    mav.addObject("ticketid", iTicketid);
                    mav.setViewName("redirect:/wizard/thankyou");
        
                    logger.debug("submitTransaction() finished successfully");
        
                    return mav;
                }
                catch(Exception e)
                {
                    // The transaction failed -- so take the user back to page3
                    logger.debug("Error in submitTransaction()", e);
        
                    ModelAndView page3 = new ModelAndView("page3.jsp");
                    page3.addObject("formBean", aFormBean);
                    page3.addObject("errorMessage", e.getMessage());
                    return page3;
                }
            }
        
        
            /**********************************************************************
             * onPage3_UserPressedBack()
             *  -- So, take the user back to page2
             ***********************************************************************/
            @RequestMapping(value="/wizard/page3", params = "gotoPage2")
            public String onPage3_UserPressedBack(@ModelAttribute("formBean") FormBean aFormBean)
            {
                logger.debug("onPage3_UserPressedBack() started");
                return "page2.jsp";
            }
        
        
            /**********************************************************************
             * showThankYou()
             * -- The transaction has finished
             * -- Show the thank you page (along with the generated ticketid)
             ***********************************************************************/
            @RequestMapping(value="/wizard/thankyou", method = RequestMethod.GET)
            public ModelAndView showThankYou( @RequestParam("ticketid") String aTicketid)
            {
                logger.debug("showThankYou() started.   aTicketid={}", aTicketid);
        
                // Create a modelAndView object with the ticketid
                ModelAndView mav = new ModelAndView();
                mav.getModelMap().addAttribute("ticketid", aTicketid);
                mav.setViewName("page4.jsp");
        
                logger.debug("showThankYou() finished");
                return mav;
            }
        
        
        
        
        
            /**********************************************************************
             * validateAndCleanupPage1()
             *  1) Trim the name field
             *  2) Validate fields on page 2 by adding errors to the Errors object
              *
             * NOTE:  This method changes the values of the objects that are passed-in
             ***********************************************************************/
            private void validateAndCleanupPage1(FormBean aFormBean, Errors aErrors)
            {
                // Trim the name of any extra leading, middle, or trailing spaces
                String sCleanedName = aFormBean.getName().trim().replaceAll(" +", " ");
                aFormBean.setName(sCleanedName);
        
                if (StringUtils.isBlank(aFormBean.getName()))
                {
                    // The user entered spaces or nothing for the name
                    aErrors.rejectValue("name", "unused", "You did not provide a name.");
        
                    // Clear this textbox
                    // WARNING:  If you use form:input path="name", then make sure you have value="${formbean.name}" in there to override it
                    aFormBean.setName("");
                }
        
                if (aFormBean.getOccupationId() < 1)
                {
                    aErrors.rejectValue("occupationId", "unused", "You did not provide an occupation.");
                }
        
            }
        
        
            /**********************************************************************
             * validateAndCleanupPage2()
             *  1) Trim the age field
             *  2) Validate fields on page 2 by adding errors to the Errors object
             *
             * NOTE:  This method changes the values of the objects that are passed-in
             ***********************************************************************/
            private void validateAndCleanupPage2(FormBean aFormBean, Errors aErrors)
            {
                // Trim the age of any extra leading, middle, or trailing spaces
                String sCleanedAge = aFormBean.getAge().trim().replaceAll(" +", " ");
                aFormBean.setAge(sCleanedAge);
        
                if (StringUtils.isBlank(aFormBean.getAge()))
                {
                    // The user entered spaces or nothing for the name
                    aErrors.rejectValue("age", "unused", "You did not provide an age.");
                }
                else if (! StringUtils.isNumeric(aFormBean.getAge()))
                {
                    // The user entered something in the age field -- but it is not numeric
                    aErrors.rejectValue("age", "unused", "Your entered age must be a positive integer.");
                }
                else
                {
                    try
                    {
                        // The user entered an integer
                        Long lAge = Long.valueOf(sCleanedAge);
        
                        if (lAge > 150)
                        {
                            // The age is over 150
                            aErrors.rejectValue("age", "unused", "Your entered age is too high:  It must be between 1 and 150.");
                        }
                        else if (lAge < 1)
                        {
                            aErrors.rejectValue("age", "unused",  "Your entered age is too low:  It must be between 1 and 150.");
                        }
                    }
                    catch (Exception e)
                    {
                        // I could not convert the string to a long
                        aErrors.rejectValue("age", "unused", "You entered an invalid age.  It must be between 1 and 150.");
                    }
                 }
            }
        
        
        
        
            /**************************************************************
             * getRandomIntegerBetween()
             **************************************************************/
            private static int getRandomIntegerBetween(int aMinNumber, int aMaxNumber)
            {
                Random random = new Random();
        
                int randomNumber = random.nextInt(aMaxNumber - aMinNumber) + aMinNumber;
        
                return(randomNumber);
            }
        
        
        
            /**********************************************************************
             * getOccupations()
             ***********************************************************************/
            private HashMap<Integer, String> getOccupations()
            {
                HashMap<Integer, String> map = new HashMap<Integer, String>();
        
                map.put(1, "Teacher");
                map.put(2, "Programmer");
                map.put(3, "Analyst");
                map.put(4, "Project Manager");
        
                return map;
            }
        
        
        
        }


              
      
        
 4.  Make sure your welcome.jsp page has a link to the 1st page of the form
     So, add this to your welcome.jsp
     
     ASSUMPTION:  You have the ${contextPath} varaible set already using this
         <c:set var="contextPath" value="${pageContext.request.contextPath}" />

     
     Add this to your welcome.jsp page
        <a href="${contextPath}/wizard/page1">Go to Page 1 of wizard</a>
 


 5.  Create this file:  page1.jsp
     
     ASSUMPTION:  You have jquery installed in your webapp
                  If not, then see howToAddJQueryToSpringMvcAppUsingIntellij.txt
                  
     Right-click on /src/main/webapp/WEB-INF/jsp -> New -> File
     Filename:  page1.jsp
     
     Copy this to your page1.jsp
     
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <!DOCTYPE HTML>
        
        <html xmlns="http://www.w3.org/1999/xhtml">
        
        <head>
            <title>Page 1</title>
        
            <style>
                .form-error-field { background-color: #FFC;}
                .form-error-message { font-weight: bold; color: #900; }
            </style>
        </head>
        
        <body>
        
        <%-- S T A N D A R D       H E A D E R  --%>
        <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
        
        <h2>page1.jsp</h2>
        
        <br/>
        
        <c:if test="${not empty errorMessage}">
            <p style="display: block; background-color: #FF3232; color: #FFFFFF">
                Error Occurred!!<br/>
                    ${errorMessage}<br/>
            </p>
        </c:if>
        
        
        <form:form action="${contextPath}/wizard/page1/continue" method="post" modelAttribute="formBean">
            <table>
                <tr>
                    <td>Enter Name:</td>
                    <td><form:input id="name" path="name" placeholder="-Enter Name-" cssErrorClass="form-error-field"/></td>
                    <td><div class="form-error-message"><form:errors path="name" cssClass="form-error-field"/></div></td>
                </tr>
                <tr>
                    <td>Occupation</td>
                    <td>
                        <form:select path="occupationId" cssErrorClass="form-error-field">
                            <form:option value="0">-Occuptation-</form:option>
                            <form:options items="${occupations}" />
                        </form:select>
                    </td>
                    <td><div class="form-error-message"><form:errors path="occupationId" cssClass="form-error-field"/></div></td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td><input type="submit" name="unused" value="Continue to Page 2"  /></td>
                </tr>
            </table>
        </form:form>
        
        <br/>
        <br/>
        
        <%-- S T A N D A R D       F O O T E R  --%>
        <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
        
        
        <%-- Load jquery --%>
        <script src="${contextPath}/resources/jquery-1.11.3/jquery-1.11.3.min.js"></script>
        
        <script type="text/javascript">
            $(document).ready(function()
            {
                // Put the cursor on the enter-name textbox
                $('#name').focus();
            });
        </script>
        
        
        </body>
        </html>



 6.  Create this file:  page2.jsp
     Right-click on /src/main/webapp/WEB-INF/jsp -> New -> File
     Filename:  page2.jsp
     
     Copy this to your page2.jsp  
     
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <!DOCTYPE HTML>
        
        <html xmlns="http://www.w3.org/1999/xhtml">
        
        <head>
            <title>Page 2</title>
        
            <style>
                .form-error-field { background-color: #FFC;}
                .form-error-message { font-weight: bold; color: #900; }
            </style>
        </head>
        
        <body>
        
        <%-- S T A N D A R D       H E A D E R  --%>
        <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
        
        <h2>page2.jsp</h2>
        
        <br/>
        
        <form:form action="${contextPath}/wizard/page2" method="post" modelAttribute="formBean">
            <table>
                <tr>
                    <td>Name</td>
                    <td>${formBean.name}</td>
                </tr>
                <tr>
                    <td>Occupation</td>
                    <td>${formBean.occupationName}</td>
                </tr>
                <tr>
                    <td>Age</td>
                    <td><form:input id="age" path="age" placeholder="-Enter Your Age-"
                                       cssErrorClass="form-error-field"
                                       onKeyPress="submitOnEnter(event)"/>
                    </td>
                    <td><div class="form-error-message"><form:errors path="age" cssClass="form-error-field"/></div></td>
                </tr>
                <tr>
                    <td colspan='2'>
                        <input type="submit" id="gotoPage1" name="gotoPage1" value="Back to Page 1" />&nbsp;&nbsp;
                        <input type="submit" id="gotoPage3" name="gotoPage3" value="Continue to Page 3" />
                    </td>
                </tr>
            </table>
        </form:form>
        
        <br/>
        <br/>
        
        <%-- S T A N D A R D       F O O T E R  --%>
        <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
        
        <%-- Load jQuery --%>
        <script src="${contextPath}/resources/jquery-1.11.3/jquery-1.11.3.min.js"></script>
        
        
        <script type="text/javascript">
        
            // --------------------------------------------------------------------------
            // submitOnEnter()
            //
            // If the user presses Enter anywhere on the HTML page
            //   Then submit form as if user pressed 'gotoPage3'
            // --------------------------------------------------------------------------
            function submitOnEnter(aEvent)
            {
                // Get the Ascii Keycode of the last keypress
                var keyCode = aEvent ? (aEvent.which ? aEvent.which : aEvent.keyCode) : event.keyCode;
        
                if (keyCode == 13)
                {
                    // User pressed Enter (Ascii code 13)
        
                    // Simulate pressing the 'gotoPage3' button
                    $('#gotoPage3').click();
                    return true;
                }
                else
                {
                    // User pressed something other than enter.  So, ignore it
                    return true;
                }
            }
        
        
            $(document).ready(function()
            {
                // Put the cursor on the age textbox
                $('#age').focus();
            });
        </script>
        
        </body>
        </html>


 7.  Create this file:  page3.jsp
     Right-click on /src/main/webapp/WEB-INF/jsp -> New -> File
     Filename:  page3.jsp
     
     Copy this to your page3.jsp  

        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <!DOCTYPE HTML>
        
        <html xmlns="http://www.w3.org/1999/xhtml">
        
        <head>
            <title>Page 3</title>
        </head>
        
        <body>
        
        <%-- S T A N D A R D       H E A D E R  --%>
        <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
        
        <h2>page3.jsp</h2>
        
        <br/>
        
        Review the form
        
        <c:if test="${not empty errorMessage}">
            <%-- An error appeared running the transaction --%>
             <p style="display: block; background-color: #FF3232; color: #FFFFFF">
                Error Occurred!!<br/>
                ${errorMessage}<br/>
            </p>
        </c:if>
        
        <form:form action="${contextPath}/wizard/page3" method="post">
            <table>
                <tr>
                    <td>Name</td>
                    <td>${formBean.name}</td>
                </tr>
                <tr>
                    <td>Occupation</td>
                    <td>${formBean.occupationName}</td>
                </tr>
                <tr>
                    <td>Age</td>
                    <td>${formBean.age}</td>
                </tr>
                <tr>
                    <td colspan='2'>
                        <input type="submit" name="gotoPage2" value="Back to Edit Details" />&nbsp;&nbsp;
                        <input type="submit" name="submitTransaction" value="Submit Request" />
                    </td>
                </tr>
            </table>
        </form:form>
        
        
        <a href="${contextPath}/wizard">Go to Page 1 of wizard</a>
        
        <br/>
        <br/>
        
        <%-- S T A N D A R D       F O O T E R  --%>
        <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
        
        
        </body>
        </html>



 8.  Create this file:  page4.jsp
     Right-click on /src/main/webapp/WEB-INF/jsp -> New -> File
     Filename:  page4.jsp
     
     Copy this to your page4.jsp  
        
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <!DOCTYPE HTML>
        
        <html xmlns="http://www.w3.org/1999/xhtml">
        
        <head>
            <title>Page 4</title>
        </head>
        
        <body>
        
        <%-- S T A N D A R D       H E A D E R  --%>
        <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
        
        <h2>page4.jsp</h2>
        
        <br/>
        
        Thank you for using the form
        <p style="margin-left: 10px">
            Your ticket id is ${ticketid}
        </p>
        
        
        
        <a href="${contextPath}/wizard/page1">Go to Page 1 of wizard</a>
        
        <br/>
        <br/>
        
        <%-- S T A N D A R D       F O O T E R  --%>
        <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
        
        </body>
        </html>
                        
      
        
  9. Handle the situation in which a user's session expires 
      -- Add a method to your WizardController that will catch the HttpSessionRequiredException 
         and *redirect* the user back to page1
                            
            /**************************************************************
             * handleHttpSessionRequiredException()
             *  1) Redirect the user back to page1
             *  2) Add a flash attribute with the error message
             *
             * NOTE:  This exception handler must *redirect* back to page1
             *        in order for session management to work properly
             **************************************************************/
            @ExceptionHandler(HttpSessionRequiredException.class)
            public RedirectView handleHttpSessionRequiredException(Exception aException,
                                                                    HttpServletRequest aRequest)
            {
                logger.warn("  Exception ignored", aException);
        
                // This exception handler
                RedirectView rv = new RedirectView("/wizard/page1", true);
        
                // Get a reference to the outputFlashMap (so I can pass the error message back to page1)
                FlashMap outputFlashMap = RequestContextUtils.getOutputFlashMap(aRequest);
                if (outputFlashMap != null)
                {
                    outputFlashMap.put("errorMessage",  "I'm sorry, but your session has timed-out.");
                }
        
                return rv;
            }

                        
        
        
 10. Setup a backround timer that will keep sending requests to the WizardController
     so the user's session should *NEVER* expire     
     
     a. Add this to page1.jsp, page2.jsp, and page3.jsp
        NOTE:  page4.jsp does not need it because the session is cleared before viewing the last page
     
     
        <%-- Load jquery --%>
        <script src="${contextPath}/resources/jquery-1.11.3/jquery-1.11.3.min.js"></script>
        
        
        <script type="text/javascript">
            var gsContextPath = '${pageContext.request.contextPath}';
        
            // Assumption:  The timeout is the session timeout - 30 secs
            // NOTE:  If session timeout is 30 min, then pageContext.request.session.maxInactiveInterval holds 1800
            var TIMEOUT_IN_MSEC =  ${pageContext.request.session.maxInactiveInterval} * 1000 - 30000;
        
            function keepMeAlive()
            {
                var sUrl = gsContextPath + '/wizard/keepAlive';
                console.log("Making ajax call to " + sUrl);
        
                $.ajax({
                    type: 'GET',
                    cache: false,
                    url:   sUrl,
                    data: '',
                    success: function(aData, aTextStatus, aXhr)
                    {
                        console.log("Ajax call finished   aData=", aData);
                    },
                    error: function(aXhr, aTextStatus, aErrorThrown)
                    {
                        console.log("Ajax call errored out:  aErrorThrown=" + aErrorThrown);
                    }
                });
            }
    
        
        
            $(document).ready(function()
            {
                console.log("calling setInterval with TIMEOUT_IN_MSEC = " + TIMEOUT_IN_MSEC);
                window.setInterval("keepMeAlive()", TIMEOUT_IN_MSEC);
            });
        </script>
            
  
  
    b. Add this method to the WizardController
    
        /**********************************************************************
         * keepAlive()
         *
         * This is a bogus handler that will acknowledge the ajax calls
         * to keep the session from expiring
         ***********************************************************************/
        @RequestMapping(value="/wizard/keepAlive", method = RequestMethod.GET)
        @ResponseBody
        public String keepAlive()
        {
            String sResponse = "hi";
            return sResponse;
        }
            
              
            