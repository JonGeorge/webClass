How to Debug a Spring MVC web application using Intellij, Maven, and the Cargo Plugin
-------------------------------------------------------------------------------------


Assumptions:  
 A) You have Intellij 14 Community Edition installed
 B) You have Maven installed
 C) Your Maven configuration can download files from a maven repository
 D) You want to use the Cargo maven plugin to run your local Tomcat
 E) You have Tomcat setup here:  C:\tools\apache-tomcat-7.0.55

 
 
Procedures
----------
 1. Create your "mywebapp1" Maven webapp project in Intellij
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project
       
    b. In the "Welcome to Intellij IDEA" scren, press "Create New Project"
       1) In the "New Project" window, Select Maven
            a) Next to Project SDK:  Press New
               -- Browse to your Java JDK:  C:\Program Files\Java\jdk1.7.0_60
               -- Press OK
               
            b) Check "Create from archetype"
            c) Select maven-archetype-webapp
               Press Next
               
       2) In the next screen
          GroupId:     com.resnick
          ArtifactId:  webapp1      
          Version:     1.0-SNAPSHOT
          Press Next
          
          
       3) In the next screen,
          Maven home directory:  C:/tools/apache-maven-3.2.3
          User settings file:    Check the checkbox to "Override"
                                 C:\tools\apache-maven-3.2.3\conf\settings.xml
          Press Next                       
                                 
       
       4) Project Name:      webapp1
          Project Location:  C:\tools\intellij\workspace\webapp1
          Press Finish
          
       5) If you get prompted that "C:\tools\intellij\workspace\webapp1" does not exist
          It will be created by Intellij
          Press OK 
     
       6) If you get prompted 
          New projects can either be opened in a new window or replace the project
          Press "This Window"
          
       7) If you are prompted 
          Maven projects need to be imported
          Press "Enable Auto-Import"
          
          Now, maven has created a simple "Hello World" web app
       
       
       
 2. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
          a) Single-click on Inspections
          b) next to Typo -- Uncheck the checkbox
          c) Press Apply
          
          

 3. Setup the Maven test directories for your Intellij project

    Add these directories
       src/test/               
       src/test/java                          # Holds unit test java code
       src/test/resources/                    # Holds the logback.xml used by unit test code
       src/main/webapp/resources/             # Holds any images, javascript, or css
       src/main/java
    
    
    a. Right-click on src             -> New -> Directory:    test
    b. Right-click on src/test        -> New -> Directory:    java
    c. Right-click on src/test        -> New -> Directory:    resources
    d. Right-click on src/main/webapp -> New -> Directory:    resources
    e. Right-click on src/main        -> New -> Directory:    java
  
    f. Right-click on src/main/java -> Mark Directory As -> Sources Root
    g. Right-click on src/test/java -> Mark Directory As -> Sources Root
    h. Right-click on src/test/java -> Mark Directory As -> Test Sources Root
    
      
    Now, you should have this directory structure
      src/main/java/ 
      src/main/resources/               # Holds logback.xml used by java code     
      src/main/webapp/                  
      src/main/webapp/resources/        # Holds any images, javascript, or css
      src/main/webapp/META-INF/
      src/main/webapp/WEB-INF/  
      src/test/
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code
   

   

           
 4. Add dependencies for Spring, Web development, and Logback
    Your pom.xml should already have one dependency:
      <dependencies>
      
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>3.8.1</version>
          <scope>test</scope>
        </dependency>
        
      </dependencies>
    
        
        
        
    Copy and paste these dependencies into your pom.xml
    NOTE:  Add all of these dependencies should be between these tags:
       <dependencies>
       . . .
       </dependencies>
       
       
       
       
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>4.1.1.RELEASE</version>
        </dependency>
 
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>4.1.1.RELEASE</version>
        </dependency>
   
 
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>4.1.1.RELEASE</version>
        </dependency>

    
        <!-- Spring Core -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>4.1.1.RELEASE</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
                
    
        <!-- Add the dependency for Java Server Template Library (jstl)  -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
    
            
        <!-- Bridge Logging from Java Common Logging to SLF4J -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.5</version>
        </dependency>
        

        <!-- Send Logging from SLF4j to Logback -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
        </dependency>


        <!-- Tomcat provides the servlet classes --> 
        <dependency> 
            <groupId>javax.servlet</groupId> 
            <artifactId>javax.servlet-api</artifactId> 
            <version>3.0.1</version> 
            <scope>provided</scope> 
        </dependency>


       
 5. Create directories under WEB-INF
    a. Create your src / main / webapp / WEB-INF / jsp directory
       -- Right-click on src / main / webapp / WEB-INF -> New -> Directory -> jsp
    
    b. Creat eyour src / main / webapp / WEB-INF / spring directory
       -- Right-click on src / main / webapp / WEB-INF -> New -> Directory -> spring
    


       
 6. Update your web.xml to load Spring
    WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

    a. Browse to src / main / webapp / WEB-INF / web.xml
    
       The original web.xml probably looks like this:
       
        <!DOCTYPE web-app PUBLIC
         "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
         "http://java.sun.com/dtd/web-app_2_3.dtd" >
        
        <web-app>
          <display-name>Archetype Created Web Application</display-name>
        </web-app>

    
    
        Change it to this:
        NOTE:   The file must *start* with <?xml...... There can be no loading spaces
        
        <?xml version="1.0" encoding="UTF-8"?>
        <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">

            <display-name>mywebapp1</display-name>
            
            <welcome-file-list>
                <welcome-file>default.jsp</welcome-file>
            </welcome-file-list>

            <!-- Configure ContextLoaderListener to use XML files as configuration. -->
            <context-param>
            <description>Type of context to load - spring</description>
            <param-name>contextClass</param-name>
            <param-value>org.springframework.web.context.support.XmlWebApplicationContext</param-value>
            </context-param>


            <!-- Configure the application context XML file locations.  -->
            <context-param>
            <description>Location of context config file(s)</description>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/spring/applicationContext.xml</param-value>
            </context-param>


            <servlet>
                <servlet-name>dispatcher</servlet-name>
                <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                <init-param>
                    <param-name>contextConfigLocation</param-name>
                    <param-value>/WEB-INF/spring/dispatch-servlet.xml</param-value>
                </init-param>
                <load-on-startup>1</load-on-startup>
            </servlet>

            <servlet-mapping>
                <servlet-name>dispatcher</servlet-name>
                <url-pattern>/</url-pattern>
            </servlet-mapping>
              
        </web-app>

    
 7. Create this file:  applicationContext.xml
    Browse to src / main / webapp / WEB-INF / spring -> new -> file
    File name:  applicationContext.xml
    Press "OK"
    
    Copy this into your new file
    WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
        
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:aop="http://www.springframework.org/schema/aop" 
            xmlns:context="http://www.springframework.org/schema/context"
            xmlns:jee="http://www.springframework.org/schema/jee" 
            xmlns:mvc="http://www.springframework.org/schema/mvc"
            xmlns:tx="http://www.springframework.org/schema/tx"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/aop
                                http://www.springframework.org/schema/aop/spring-aop.xsd
                                http://www.springframework.org/schema/beans
                                http://www.springframework.org/schema/beans/spring-beans.xsd
                                http://www.springframework.org/schema/context
                                http://www.springframework.org/schema/context/spring-context.xsd
                                http://www.springframework.org/schema/jee
                                http://www.springframework.org/schema/jee/spring-jee.xsd 
                                http://www.springframework.org/schema/mvc
                                http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                                http://www.springframework.org/schema/tx
                                http://www.springframework.org/schema/tx/spring-tx-xsd">
    
           
           <!-- Autodetect classes and register the corresponding beans -->
           <context:component-scan  
                base-package="app1"
                use-default-filters="true">
            
                <context:exclude-filter 
                    type="annotation"
                    expression="org.springframework.stereotype.Controller"/>
            </context:component-scan>
           
           
           
            <!-- Allow the use of @Autowire and @Required -->
            <context:annotation-config />
            
                     
           
            <!--
                    This will automatically locate any and all property files you have
                    within your classpath, provided they fall under the META-INF
                    directory. The located property files are parsed and their values can
                    then be used within application context files in the form of
                    ${propertyKey}.
            -->
            <context:property-placeholder location="classpath*:*.properties" />
            
            
            <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                <property name="order" value="2" />
                <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
                <property name="prefix" value="/WEB-INF/jsp/" />
                <property name="suffix" value=".jsp" />
            </bean>
             
    </beans>
        
    
    
    
    
 8. Create this file:  dispatch-servlet.xml
    Browse to src / main / webapp / WEB-INF / spring -> new -> file
    File name:  dispatch-servlet.xml
    Press "OK"
    
    Copy this into your new file
    WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
        
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:aop="http://www.springframework.org/schema/aop" 
            xmlns:context="http://www.springframework.org/schema/context"
            xmlns:jee="http://www.springframework.org/schema/jee" 
            xmlns:mvc="http://www.springframework.org/schema/mvc"
            xmlns:tx="http://www.springframework.org/schema/tx"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/aop
                                http://www.springframework.org/schema/aop/spring-aop.xsd
                                http://www.springframework.org/schema/beans
                                http://www.springframework.org/schema/beans/spring-beans.xsd
                                http://www.springframework.org/schema/context
                                http://www.springframework.org/schema/context/spring-context.xsd
                                http://www.springframework.org/schema/jee
                                http://www.springframework.org/schema/jee/spring-jee.xsd 
                                http://www.springframework.org/schema/mvc
                                http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                                http://www.springframework.org/schema/tx
                                http://www.springframework.org/schema/tx/spring-tx-xsd">
    
            <!-- Autodetect classes and register the beans -->
            <!-- This context:component-scan should built upon the one 
                 that was already don in the applicationContext.  The goal is to add in the @Controller
                 annotations to the context since Spring MVC requires that those beans are
                 registered at this level.
                 
                 If context:component-scans a file, then it will overwrite anything
                 that wdone for that file in the applicationContext's component-scan.
                 So, you should use point to the package that was previously ignored,
                 or use the resource-pattern property to only scan the corret Java files
                 
                 Be careful if you use the filter tags within the component-scan
                 because that doesn't prevent the file from being scanned, and 
                 will likely cause you to overwrite something that you didn't mean to.
             -->
             <context:component-scan
                    base-package="app1"
                    use-default-filters="false">
                    
                    <!-- Make sure that the use-default filters property is set to false.
                         When a file is scanned with the @Controller annotation,
                         it should be included in the context at this point. -->
                    <context:include-filter
                        type="annotation"
                        expression="org.springframework.stereotype.Controller" />
                        
                    <context:include-filter
                        type="annotation"
                        expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
             </context:component-scan>


            <!-- Map the relative address for certain locations -->
            <mvc:resources  mapping="/resources/**"  location="/resources/" />
                                                  
                                      
            <!-- Registers the DefaultAnnotationhandlerMapping and AnnotationMethodHandlerAdapter beans
                (that are required for Spring MVC to dispatch requests to @Controllers -->
            <mvc:annotation-driven />
    
    
            <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                <property name="order"     value="2" />
                <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
                <property name="prefix"    value="/WEB-INF/jsp/" />
                <property name="suffix"    value="" />
            </bean>                       
                            
    </beans>            
             
    
    
    


 9. Create this file:  logback.xml
    a. Right-click on src/main/resources -> New -> File
       filename:  logback.xml
       Press OK
       
    b. Copy this into your logback.xml file 
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>
    
    
        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>
        
        <configuration debug="true">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %c %m%n</pattern>
                </encoder>
            </appender>
            
            
            <logger name="org.springframework" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
            
            <logger name="app1" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>   
            
            <root level="DEBUG">
                <appender-ref ref="CONSOLE"/>
            </root>
            
        </configuration>




10. Create this file:  UserInfo.java
    a. Right-click on mywebapp1 -> src/main/java -> New -> Package
       Name:  app1.model
       Press OK
       
    b. Right-click on app1.model -> New -> Java Class
       Name:  UserInfo
       Press OK
               
    c. Copy this java code to UserInfo.java
           
        package app1.model;
        
        public class UserInfo
        {
            private boolean isAdministrator = false;
            private String username;
            
            
            public UserInfo()
            {
                
            }
            
            public boolean getIsAdministrator()
            {
                return this.isAdministrator;
            }
            
            public void setIsAdministrator(boolean aValue)
            {
                this.isAdministrator = aValue;
            }
            
            public String getUserName()
            {
                return this.username;
            }
            
            public void setUserName(String aUserName)
            {
                this.username = aUserName;
            }
        }

    

    
    
11. Create this file:  WelcomeController.java
    a. Right-click on mywebapp1 -> src/main/java -> New -> Package
       Name:  app1.controllers
       Press OK
       
    b. Right-click on app1.controllers -> New -> Java Class
       Name:  WelcomeController  
       Press OK            

    c. Copy this java code to WelcomeController.java
    
            package app1.controllers;
            
            import org.slf4j.Logger;
            import org.slf4j.LoggerFactory;
            import org.springframework.stereotype.Controller;
            import org.springframework.ui.Model;
            import org.springframework.web.bind.annotation.RequestMapping;
            import org.springframework.web.servlet.ModelAndView;
            import app1.model.UserInfo;
            
            
            @Controller
            public class WelcomeController
            {
                private final static Logger logger = LoggerFactory.getLogger(WelcomeController.class);
            
            
                /**********************************************************************
                 * handleDefaultPage()
                 *
                 * The user browsed to the   http://www.myserver.com/webapp
                 * So, forward the user to   http://www.myserver.com/webapp/forward
                 ***********************************************************************/
                @RequestMapping("/")
                public ModelAndView handleDefaultPage( Model aModel )
                {
                    // By default, forward users to the /welcome page
                    return new ModelAndView("forward:/welcome");
                }
            
            
            
                /**********************************************************************
                 * mainPage()
                 *
                 * The user browsed to the /welcome page
                 *  1) Get a userinfo object setup
                 *  2) Forward the user to the welcome.jsp page
                 ***********************************************************************/
                @RequestMapping("/welcome")
                public ModelAndView mainPage( Model aModel )
                {
                    logger.debug("mainPage() started");
            
                    // Create a modelAndView object
                    ModelAndView mav = new ModelAndView();
            
                    // Show the welcome.jsp page
                    mav.setViewName("welcome.jsp");
            
                    // Create a userInfo object
                    UserInfo userInfo = new UserInfo();
                    userInfo.setUserName("Adam");
                    userInfo.setIsAdministrator(true);
            
                    // Add the userInfo information to the view
                    mav.addObject("userInfo", userInfo);
            
                    logger.debug("mainPage() finished");
                    return mav;
                }
            }
                    
        
        


12. Create this file:  stdJspIncludes.jsp
    a. Right-click on src/main/webapp/WEB-INF/jsp -> New -> File
       File name:  stdJspIncludes.jsp
       Press OK
       
    b. Copy these contents into your stdJspIncludes.jsp file:
    
        <%@ page session="false" language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" %>
        
        <%-- Allow all JSPs to use the tag libraries --%>
        <%@ taglib prefix='c'      uri='http://java.sun.com/jsp/jstl/core' %>
        <%@ taglib prefix='spring' uri='http://www.springframework.org/tags' %>
        <%@ taglib prefix='form'   uri='http://www.springframework.org/tags/form' %>
        
        <%-- Allow all JSPs to have the contextPath variable --%>
        <c:set var="contextPath" value="${pageContext.request.contextPath}" />
        
        
    
        
    
13. Create this file:  stdHeader.jsp
    a. Right-click on src/main/webapp/WEB-INF/jsp -> New -> File
       File name:  stdHeader.jsp
       Press OK
       
    b. Copy these contents into your stdHeader.jsp file
    
        <table style="width: 100%; border: 1px solid black">
            <tr>
                <td align="center">Standard Header is here</td>
            </tr>
        </table>
    
    
    
    
    
14. Create this file:  stdFooter.jsp
    a. Right-click on src/main/webapp/WEB-INF/jsp -> New -> File
       File name:  stdFooter.jsp
       Press OK
       
    b. Copy these contents into your stdFooter.jsp file

        <table style="width: 100%; border: 1px solid black">
            <tr>
                <td align="center">Standard Footer is here</td>
            </tr>
        </table>



    
    
    
15. Create this file:  welcome.jsp
    a. Right-click on src/main/webapp/WEB-INF/jsp -> New -> File
       File name:  welcome.jsp
       Press OK

    b. Copy these contents into your welcome.jsp file
    
            <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
            
            <!DOCTYPE HTML>
            
            <html xmlns="http://www.w3.org/1999/xhtml">
            
            <head>
                <title>Welcome Page</title>
            </head>
            
            <body>
                
                <%-- S T A N D A R D       H E A D E R  --%>
                <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
                
                <h2>welcome.jsp</h2>
                
                <br/>
                
                Hello ${userInfo.userName} <br/>
                Are you an administrator: ${userInfo.isAdministrator }
                   
                <br/>
                <br/>    
            
                <%-- S T A N D A R D       F O O T E R  --%>
                <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
                
            </body>
            </html>
        
        
        

        
16. Delete the generated index.jsp
    a. Right-click on src/main/webapp/index.jsp -> Delete
    b. In the Delete File window, press OK
            
        
        
        

17. Setup Remote Tomcat connection in Intellij
    a. Pull Run / Edit Configurations
    b. Click the "+"
    c. Select "Remote"
    d. Enter these values:
       Name:           Remote-mywebapp1
       Transport:      Socket
       Debugger Mode:  Attach
       Host:           localhost
       Port:           5005        
     
    e. Press Apply
    f. Press OK
    
    
    
18. Setup the Cargo maven plugin to startup a Tomcat from the command-line in debug mode
    The end of your pom.xml should look like this:
    
            <build>
              <finalName>webapp1</finalName>
            </build>
         </project>
     
    a. Change the end of the of the pom.xml to this:
    
          <build>
            <finalName>webapp1</finalName>
    
          <plugins>
              <plugin>
                  <!-- Setup the Cargo plugin -->
                  <groupId>org.codehaus.cargo</groupId>
                  <artifactId>cargo-maven2-plugin</artifactId>
                  <version>1.4.16</version>
                  <configuration>
                      <container>
                          <!-- Tell Cargo to use the installed Tomcat7 located in <home>...</home> -->
                          <containerId>tomcat7x</containerId>
                          <type>installed</type>
                          <home>C:/tools/apache-tomcat-7.0.55</home>
                      </container>
                      <configuration>
                          <properties>
                              <!-- Have Cargo pass-in the debug parameters to the target -->
                              <cargo.jvmargs>
                                  -Xdebug
                                  -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005
                                  -Xnoagent
                                  -Djava.compiler=NONE
                              </cargo.jvmargs>
                              <cargo.logging>medium</cargo.logging>
                          </properties>
                      </configuration>
                  </configuration>
    
                  <executions>
                      <execution>
                          <id>run</id>
                          <goals>
                              <goal>run</goal>
                          </goals>
                      </execution>
                  </executions>
    
              </plugin>
          </plugins>
      </build>
    </project>
    
    
     
19. *OPTIONAL* Tell cargo to use your *own* logbackConsole.xml file
    a. Create this file:  c:\tools\logging\logbackConsole.xml
    
        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>
        
        <configuration debug="true">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>localConsole3 %d{MM/dd/yyyy HH:mm:ss} %c %m%n</pattern>
                </encoder>
            </appender>
             
            <logger name="org.springframework" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
        
            <logger name="app1" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/> 
             </logger>
        
            <root level="DEBUG">
                <appender-ref ref="CONSOLE"/>
            </root>
        
        </configuration>
            
    b. Edit the pom.xml so that cargo starts-up Tomcat to look for this logbackConsole.xml file
       Normally, you would add this to your <Tomcat-home>/bin/setenv.bat
           set JAVA_OPTS=%JAVA_OPTS% -Dlogback.configurationFile=C:\tools\logging\logback.xml
        
      But, because we are running in cargo, we need to add this to the <cargo.jvmargs>
          <cargo.jvmargs>
                -Xdebug
                -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005
                -Xnoagent
                -Djava.compiler=NONE
                -Dlogback.configurationFile=C:\tools\logging\logbackConsole.xml
           </cargo.jvmargs>
 
      
      
20. Startup the webapp in debug mode
    a. In Intellij, Pull File / Save All
    
    b. Set a breakpoint
       -- Browse to src/main/java -> app1.controllers -> WelcomeController.java
       -- Click in the left margin around line 30 to set a breakpoint
       
    c. Startup Tomcat in debugging mode
       -- Open a DOS window by pressing <Start><Run>CMD and enter these commands
          DOS> cd /d c:\tools\intellij\workspace\webapp1
          DOS> mvn clean package cargo:run
               or
          DOS> mvn clean install cargo:run
       
      
          NOTE:  mvn clean package  will create a new build of your webapp
          NOTE:  mvn cargo:run      will have your webapp deployed to your tomcat and startup Tomcat in debug mode
       
       You should see this:
       
       [INFO] [talledLocalContainer] Tomcat 7.x starting...
       [INFO] [stalledLocalDeployer] Deploying [c:\tools\intellij\workspace\webapp1\target\webapp1.war] to [c:\tools\intellij\workspace\webapp1\target\cargo\configurations\tomcat7x/webapps]...
       [INFO] [talledLocalContainer] Listening for transport dt_socket at address: 5005
       
       At this point, your Tomcat is *waiting* for someone to connect to it remotely
        
    
    d. Use Intellij to connect to your Tomcat remotely
       -- In Intellij, pull Run / Debug 'Remote-mywebapp1'
        
    e. Open a web browser to your local webapp
       -- Open Firefox
       -- Connect to http://localhost:8080/webapp1
       -- You should reach your breakpoint
       
       
    
    
What happens when you start the debugger
----------------------------------------
 1) Your browser opens to here:  http://localhost:8080/webapp1
    
 2) Your Tomcat instance will call WelcomeController.handleDefaultPage() 
    which forwards the user to 
      http://localhost:8080/webapp1/welcome
        
 3) Your WelcomeController has this line in it:
    @RequestMapping("/welcome")
    public ModelAndView mainPage( Model aModel )
    {
    
    }
    
    So your mainPage() method is executed
    
    
 4) The WelcomeController.mainPage() method then does the following
    a) Creates a UserInfo object
    b) Binds that UserInfo object to your welcome.jsp
    c) Forward the user to the welcome.jsp page  [with the UserInfo object bound to it].
     
     -- As a result, the user sees the welcome.jsp page  [with the information attached to it]
     
