How to Implement a Form Wizard in Spring MVC (inside a Popup)
-------------------------------------------------------------
Suppose you want to setup a series of web pages and have a user continue to hold form information from page 1 to page 2.


Assumptions:
 1) You have a Spring MVC Web App
 2) You have a series of web pages that you want the user to follow
 3) You have installed jquery       [See howToAddJQueryToSpringMvcAppUsingIntellij.txt]
 4) Your stdJspIncludes.jsp page looks like this:
 
        <%@ page session="false" language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" %>
        
        <%-- Allow all JSPs to use the tag libraries --%>
        <%@ taglib prefix='c'      uri='http://java.sun.com/jsp/jstl/core' %>
        <%@ taglib prefix='spring' uri='http://www.springframework.org/tags' %>
        <%@ taglib prefix='form'   uri='http://www.springframework.org/tags/form' %>
        
        <%-- Allow all JSPs to have the contextPath variable --%>
        <c:set var="contextPath" value="${pageContext.request.contextPath}" />

 5) You want each browser tab to run in its own session

      
         
 
References
----------
http://www.intertech.com/Blog/understanding-spring-mvc-model-and-session-attributes/
http://stackoverflow.com/questions/17722641/spring-sessionattribute-how-to-retrieve-the-session-object-in-same-controller
http://duckranger.com/2012/11/add-conversation-support-to-spring-mvc/
 


Procedure (if you already have full-page JSPs)
----------------------------------------------
 1. Create a SpringMvcWebApp [see howToCreateSpringMvcWebApp_usingIntellijMaven_jettyPlugin2.txt]
    NOTE:  Call the webapp springMvcWebAppWiz
    
 
 2. Setup a form wizard as full pages 
    [see learnSpringMvcWeb / howToImplementFormWizardAsFullPages.txt]
    
 
 3. Add Bootstrap to the welcome page
    [see learnBootstrap / howToAddBootstrapToSpringMvcUsingIntellij.txt]
 
 
 4. Copy your WizardController.java to PopupWizardController
    a. Change value="/wizard/page" --> value="/popupWizard/page"
    b. Change pageX.jsp --> popupPageX.jsp
   
   
 5. Create a popupWizard.jsp starting page
    NOTE:  This page will load jquery and bootstrap 
           This page will include the JS function submitFormAsAjaxCall() 
           As a result, the popupPage.jsp pages should *not* include jquery or bootstrap
           This page holds the actual div for the popup

          
 6. Create pupupPage1.jsp
    a. Copy page1.jsp  to  popupPage1.jsp
    b. Make the following edits to popupPage1.jsp:
       1) Remove the following tags:  <html>, <head>...</head>, <body>, </body>, </html> tags
          Remember this popup is just a partial HTML page -- not a complete html document
      
       2) Make sure popupPage1.jsp starts with  <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
       
       3) Adjust the form so that it has an id="popupForm"
       
       4) Remove any calls to include jquery or bootstrap
          NOTE:  The popupWizard.jsp page already has these and including jquery or bootstrap twice causes problems
         
       5) Remove any hyperlinks back to page1
          NOTE:  These will not work
         
       6) Add the following JavaScript sript to the bottom of each popupPage1.jsp page
          -- The 1st part fixes the problem of knowing which submit button was pressed
          -- The 2nd part catches the submit event and calls the submitFormAsAjaxCall()
            
                <script type="text/javascript">
                    $(document).ready(function()
                    {
                        // On submit, add a hidden formfield with the name/value of which submit button was pressed
                        // This fixes the error with the aForm.serialize() call does *NOT* find which submit button was pressed
                        var form = $('#popupForm');
                        $(":submit",form).click(function(){
                            if($(this).attr('name')) {
                                $(form).append(
                                        $("<input type='hidden'>").attr( {
                                            name: $(this).attr('name'),
                                            value: $(this).attr('value') })
                                );
                            }
                        });


                        // Tell this popup form to submit the form as an AJAX call
                        $('#popupForm').submit(function()
                        {
                            // Catch the submit-form-event handler

                            // Run the submit form as an ajax call
                            return(submitFormAsAjaxCall($(this)));
                        });
                    });
                </script>


7. Add a way to return to page 1 [while session is still good]

   a. Add a special method in the PopupWizardController that will take the user back to page1

            /**********************************************************************
             * showPage1_usingCid()
             ***********************************************************************/
            @RequestMapping(value="/popupWizard/page1/cid/{aCid}", method=RequestMethod.GET)
            public ModelAndView showPage1_usingCid(@PathVariable String aCid, HttpSession aSession, HttpServletRequest aRequest)
            {
                logger.debug("showPage1_usingCid()   cid={}", aCid);
        
                // Create a modelAndView object
                ModelAndView mav = new ModelAndView();
                mav.setViewName("popupPage1.jsp");
        
                if (aCid == null)
                {
                    // There is *NO* conversationId -- so user is starting this wizard for the *FIRST* time
        
                    // So, create a new FormBean
                    FormBean formBean = new FormBean();
                    mav.addObject("formBean", formBean);
                }
                else
                {
                    // Get the form bean from the session map (using the CID)
                    LinkedHashMap<String, Map<String, Object>> sessionMap = (LinkedHashMap<String, Map<String, Object>>) aSession.getAttribute(ConversationalSessionAttributeStore.SESSION_MAP);
                    FormBean formBean = (FormBean) sessionMap.get(aCid).get("formBean");
                    mav.addObject("formBean", formBean);
        
                    // Add the CID field to the request object (so that the code does not generate a new one)
                    aRequest.setAttribute(ConversationalSessionAttributeStore.CID_FIELD, aCid);
                }
        
        
                // Add the occupations information to the page
                mav.addObject("occupations", this.occupations);
        
                logger.debug("handleRequestToPage1() finished");
                return mav;
            }
                
                
     b. Add a hyperlink to the popupPage2.jsp
            <a href="#" onclick="showPage1InPopup()">Go to Page 1 of wizard</a>


     c. Add this javascript to the popupWizardPage.jsp
            /*****************************************************************
             * showPage1InPopup()
             ******************************************************************/
            function showPage1InPopup()
            {
                var cidValue = $('input:hidden[name=_cid]').val();
            
                // Load page1 into the modal body
                var sUrlOfPage1 = gsContextPath + "/popupWizard/page1/cid/" + cidValue;
                $("#popupWizardModal").find('.modal-body').load(sUrlOfPage1);
            }
 
 
Procedures
----------
 1. Create a SpringMvcWebApp [see howToCreateSpringMvcWebApp_usingIntellijMaven_jettyPlugin2.txt]
    NOTE:  Call the webapp springMvcWebAppWiz
    
 
 
 2. Add this extra dependency to your pom.xml
        <dependency>
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-lang3</artifactId>
          <version>3.3.2</version>
        </dependency>


        
 3. Add jQuery to your webapp
    [see learnJquery / howToAddJQueryToSpringMvcAppUsingIntellij.txt]
    
 
 4. Add Bootstrap to the welcome page
    [see learnBootstrap / howToAddBootstrapToSpringMvcUsingIntellij.txt]

 
 5. Create Class:  PopupWizardController
    Right-click on /src/main/java/app1/controllers -> New Java Class
    Class Name:   PopupWizardController
    
    Copy this to your Class
    

        package app1.controllers;
        
        import app1.conversationSupport.ConversationalSessionAttributeStore;
        import app1.model.FormBean;
        import org.apache.commons.lang3.StringUtils;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.stereotype.Controller;
        import org.springframework.validation.BindingResult;
        import org.springframework.validation.Errors;
        import org.springframework.web.HttpSessionRequiredException;
        import org.springframework.web.bind.annotation.*;
        import org.springframework.web.bind.support.SessionStatus;
        import org.springframework.web.servlet.FlashMap;
        import org.springframework.web.servlet.ModelAndView;
        import org.springframework.web.servlet.support.RequestContextUtils;
        import org.springframework.web.servlet.view.RedirectView;
        
        import javax.annotation.Resource;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpSession;
        import java.util.HashMap;
        import java.util.LinkedHashMap;
        import java.util.Map;
        import java.util.Random;
        
        
        /**
         * Created by adam on 1/18/2016.
         */
        @SessionAttributes("formBean")    // Tell Spring the name of the model to be copied to the HttpSession before rendering a view
        @Controller
        public class PopupWizardController
        {
            private final static Logger logger = LoggerFactory.getLogger(PopupWizardController.class);
        
            private HashMap<Integer, String> occupations = getOccupations();
        
            @Resource
            private ConversationalSessionAttributeStore convSessionAttrStore;
        
        
        
            /**********************************************************************
             * showPage1_usingCid()
             ***********************************************************************/
            @RequestMapping(value="/popupWizard/page1/cid/{aCid}", method=RequestMethod.GET)
            public ModelAndView showPage1_usingCid(@PathVariable String aCid, HttpSession aSession, HttpServletRequest aRequest)
            {
                logger.debug("showPage1_usingCid()   cid={}", aCid);
        
                // Create a modelAndView object
                ModelAndView mav = new ModelAndView();
                mav.setViewName("popupPage1.jsp");
        
                if (aCid == null)
                {
                    // There is *NO* conversationId -- so user is starting this wizard for the *FIRST* time
        
                    // So, create a new FormBean
                    FormBean formBean = new FormBean();
                    mav.addObject("formBean", formBean);
                }
                else
                {
                    // Get the form bean from the session map (using the CID)
                    LinkedHashMap<String, Map<String, Object>> sessionMap = (LinkedHashMap<String, Map<String, Object>>) aSession.getAttribute(ConversationalSessionAttributeStore.SESSION_MAP);
                    FormBean formBean = (FormBean) sessionMap.get(aCid).get("formBean");
                    mav.addObject("formBean", formBean);
        
                    // Add the CID field to the request object (so that the code does not generate a new one)
                    aRequest.setAttribute(ConversationalSessionAttributeStore.CID_FIELD, aCid);
                }
        
        
                // Add the occupations information to the page
                mav.addObject("occupations", this.occupations);
        
                logger.debug("handleRequestToPage1() finished");
                return mav;
            }
        
        
            /**********************************************************************
             * showPage1()
             *  1) State a new FormBean (if needed)
             *  2) Render page1.jsp
             ***********************************************************************/
            @RequestMapping(value="/popupWizard/page1")
            public ModelAndView showPage1(HttpServletRequest aRequest)
            {
                logger.debug("handleRequestToPage1()   cid={}", aRequest.getAttribute("_cid"));
        
                // Create a modelAndView object
                ModelAndView mav = new ModelAndView();
                mav.setViewName("popupPage1.jsp");
        
               if (aRequest.getAttribute("_cid") == null)
                {
                    // There is *NO* conversationId -- so user is starting this wizard for the *FIRST* time
        
                    // So, create a new FormBean
                    FormBean formBean = new FormBean();
                    mav.addObject("formBean", formBean);
                }
        
                // Add the occupations information to the page
                mav.addObject("occupations", this.occupations);
        
                logger.debug("handleRequestToPage1() finished");
                return mav;
            }
        
        
        
        
            /**********************************************************************
             * onPage1_UserPressedContinue()
             *
             ***********************************************************************/
            @RequestMapping(value="/popupWizard/page1/continue")
            public ModelAndView onPage1_UserPressedContinue(@ModelAttribute("formBean") FormBean aFormBean, BindingResult aResult)
            {
                // Validate and cleanup form fields on page1
                validateAndCleanupPage1(aFormBean, aResult);
        
                if (aResult.hasErrors() )
                {
                    // There are errors -- so show the errors back on page 1
                    ModelAndView page1 = new ModelAndView("popupPage1.jsp");
                    page1.addObject("formBean", aFormBean);
                    page1.addObject("occupations", this.occupations);
                    return page1;
                }
                else
                {
                    // There were no errors -- so continue to page2
        
                    // Set the occupation name value (that corresponds to the occuptationId)
                    String sOccuptationName = this.occupations.get(aFormBean.getOccupationId());
                    aFormBean.setOccupationName(sOccuptationName);
        
                    ModelAndView page2 = new ModelAndView("popupPage2.jsp");
                    page2.addObject("formBean", aFormBean);
                    return page2;
                }
             }
        
        
            /**********************************************************************
             * showPage2()
             *  -- Render popupPage2.jsp
             ***********************************************************************/
            @RequestMapping(value="/popupWizard/page2")
            public ModelAndView showPage2(@ModelAttribute FormBean aFormBean)
            {
                ModelAndView page2 = new ModelAndView("popupPage2.jsp");
                return page2;
            }
        
        
            /**********************************************************************
             * onPage2_UserPressedContinue()
             *
             ***********************************************************************/
            @RequestMapping(value="/popupWizard/page2", params = "gotoPage3")
            public ModelAndView onPage2_UserPressedContinue(@ModelAttribute("formBean") FormBean aFormBean, BindingResult aResult)
            {
                logger.debug("showPage3() started");
        
                // Validate and cleanup form fields on page2
                validateAndCleanupPage2(aFormBean, aResult);
        
                if (aResult.hasErrors() )
                {
                    // There are errors -- so show the errors back on page 2
                    ModelAndView page2 = new ModelAndView("popupPage2.jsp");
                    page2.addObject("formBean", aFormBean);
                    return page2;
                }
                else
                {
                    // There were no errors -- so continue to page3
                    ModelAndView page3 = new ModelAndView("popupPage3.jsp");
                    page3.addObject("formBean", aFormBean);
                    return page3;
                }
            }
        
            /**********************************************************************
             * onPage2_UserPressedBack()
             *  -- So, take the user back to page1
             ***********************************************************************/
            @RequestMapping(value="/popupWizard/page2", params="gotoPage1")
            public String onPage2_UserPressedBack(@ModelAttribute("formBean") FormBean aFormBean)
            {
                logger.debug("onPage2_UserPressedBack() started");
                return "forward:/popupWizard/page1";
            }
        
        
            /**********************************************************************
             * onPage3_UserPressedSubmitTransaction()
             * -- The user has entered clicked the form to *SUBMIT* the transaction
             *
             * 1) Run the transaction
             * 2) Get the generated ticket id
             * 3) If the transaction works, then *redirect* the user to the thank you page
             * 4) If the transaction fails, then forward the user back to the showFinalReview()
             ***********************************************************************/
            @RequestMapping(value="/popupWizard/page3", params = "submitTransaction", method=RequestMethod.POST)
            public ModelAndView onPage3_UserPressedSubmitTransaction( @ModelAttribute FormBean aFormBean, SessionStatus aStatus)
            {
                logger.debug("onPage3_UserPressedSubmitTransaction() started");
        
        
                try {
                    // Run some transaction to create the request
                    int iRandomNumber = getRandomIntegerBetween(1,4);
        
                    if (iRandomNumber == 2)
                    {
                        // Something went wrong
                        throw new RuntimeException("Error occurred running transaction");
                    }
        
                    // The transaction worked.
                    int iTicketid = iRandomNumber * 1000;
        
                    // Remove this bean from the session (without killing the entire HttpSession)
                    aStatus.setComplete();
        
                    // Redirect the user to the thank you page (showing the ticketid)
                    // NOTE:  We redirect on purpose:  If the user clicks "refresh" on the last page, then nothing happens and no errors appear
                    ModelAndView mav = new ModelAndView();
                    mav.addObject("ticketid", iTicketid);
                    mav.setViewName("redirect:/popupWizard/thankyou");
        
                    logger.debug("submitTransaction() finished successfully");
        
                    return mav;
                }
                catch(Exception e)
                {
                    // The transaction failed -- so take the user back to page3
                    logger.debug("Error in submitTransaction()", e);
        
                    ModelAndView page3 = new ModelAndView("popupPage3.jsp");
                    page3.addObject("formBean", aFormBean);
                    page3.addObject("errorMessage", e.getMessage());
                    return page3;
                }
            }
        
        
            /**********************************************************************
             * onPage3_UserPressedBack()
             *  -- So, take the user back to page2
             ***********************************************************************/
            @RequestMapping(value="/popupWizard/page3", params = "gotoPage2")
            public String onPage3_UserPressedBack(@ModelAttribute("formBean") FormBean aFormBean)
            {
                logger.debug("onPage3_UserPressedBack() started");
                return "popupPage2.jsp";
            }
        
        
            /**********************************************************************
             * showThankYou()
             * -- The transaction has finished
             * -- Show the thank you page (along with the generated ticketid)
             ***********************************************************************/
            @RequestMapping(value="/popupWizard/thankyou", method = RequestMethod.GET)
            public ModelAndView showThankYou( @RequestParam("ticketid") String aTicketid)
            {
                logger.debug("showThankYou() started.   aTicketid={}", aTicketid);
        
                // Create a modelAndView object with the ticketid
                ModelAndView mav = new ModelAndView();
                mav.getModelMap().addAttribute("ticketid", aTicketid);
                mav.setViewName("popupPage4.jsp");
        
                logger.debug("showThankYou() finished");
                return mav;
            }
        
        
        
        
        
            /**********************************************************************
             * validateAndCleanupPage1()
             *  1) Trim the name field
             *  2) Validate fields on page 2 by adding errors to the Errors object
             *
             * NOTE:  This method changes the values of the objects that are passed-in
             ***********************************************************************/
            private void validateAndCleanupPage1(FormBean aFormBean, Errors aErrors)
            {
                // Trim the name of any extra leading, middle, or trailing spaces
                String sCleanedName = aFormBean.getName().trim().replaceAll(" +", " ");
                aFormBean.setName(sCleanedName);
        
                if (StringUtils.isBlank(aFormBean.getName()))
                {
                    // The user entered spaces or nothing for the name
                    aErrors.rejectValue("name", "unused", "You did not provide a name.");
        
                    // Clear this textbox
                    // WARNING:  If you use form:input path="name", then make sure you have value="${formbean.name}" in there to override it
                    aFormBean.setName("");
                }
        
                if (aFormBean.getOccupationId() < 1)
                {
                    aErrors.rejectValue("occupationId", "unused", "You did not provide an occupation.");
                }
        
            }
        
        
            /**********************************************************************
             * validateAndCleanupPage2()
             *  1) Trim the age field
             *  2) Validate fields on page 2 by adding errors to the Errors object
             *
             * NOTE:  This method changes the values of the objects that are passed-in
             ***********************************************************************/
            private void validateAndCleanupPage2(FormBean aFormBean, Errors aErrors)
            {
                // Trim the age of any extra leading, middle, or trailing spaces
                String sCleanedAge = aFormBean.getAge().trim().replaceAll(" +", " ");
                aFormBean.setAge(sCleanedAge);
        
                if (StringUtils.isBlank(aFormBean.getAge()))
                {
                    // The user entered spaces or nothing for the name
                    aErrors.rejectValue("age", "unused", "You did not provide an age.");
                }
                else if (! StringUtils.isNumeric(aFormBean.getAge()))
                {
                    // The user entered something in the age field -- but it is not numeric
                    aErrors.rejectValue("age", "unused", "Your entered age must be a positive integer.");
                }
                else
                {
                    try
                    {
                        // The user entered an integer
                        Long lAge = Long.valueOf(sCleanedAge);
        
                        if (lAge > 150)
                        {
                            // The age is over 150
                            aErrors.rejectValue("age", "unused", "Your entered age is too high:  It must be between 1 and 150.");
                        }
                        else if (lAge < 1)
                        {
                            aErrors.rejectValue("age", "unused",  "Your entered age is too low:  It must be between 1 and 150.");
                        }
                    }
                    catch (Exception e)
                    {
                        // I could not convert the string to a long
                        aErrors.rejectValue("age", "unused", "You entered an invalid age.  It must be between 1 and 150.");
                    }
                }
            }
        
        
        
        
            /**************************************************************
             * getRandomIntegerBetween()
             **************************************************************/
            private static int getRandomIntegerBetween(int aMinNumber, int aMaxNumber)
            {
                Random random = new Random();
        
                int randomNumber = random.nextInt(aMaxNumber - aMinNumber) + aMinNumber;
        
                return(randomNumber);
            }
        
        
        
            /**********************************************************************
             * getOccupations()
             ***********************************************************************/
            private HashMap<Integer, String> getOccupations()
            {
                HashMap<Integer, String> map = new HashMap<Integer, String>();
        
                map.put(1, "Teacher");
                map.put(2, "Programmer");
                map.put(3, "Analyst");
                map.put(4, "Project Manager");
        
                return map;
            }
        
        
        
            /**************************************************************
             * handleHttpSessionRequiredException()
             *  1) Redirect the user back to page1
             *  2) Add a flash attribute with the error message
             *
             * NOTE:  This exception handler must *redirect* back to page1
             *        in order for session management to work properly
             **************************************************************/
            @ExceptionHandler(HttpSessionRequiredException.class)
            public RedirectView handleHttpSessionRequiredException(Exception aException,
                                                                   HttpServletRequest aRequest)
            {
                logger.warn("Exception ignored", aException);
        
                // This exception handler
                RedirectView rv = new RedirectView("/popupWizard/page1", true);
        
                // Get a reference to the outputFlashMap (so I can pass the error message back to page1)
                FlashMap outputFlashMap = RequestContextUtils.getOutputFlashMap(aRequest);
                if (outputFlashMap != null)
                {
                    outputFlashMap.put("errorMessage",  "I'm sorry, but your session has timed-out.");
                }
        
                return rv;
            }
        
        
        
            /**********************************************************************
             * keepAlive()
             *
             * This is a bogus handler that will acknowledge the ajax calls
             * to keep the session from expiring
             ***********************************************************************/
            @RequestMapping(value="/popupWizard/keepAlive", method = RequestMethod.GET)
            @ResponseBody
            public String keepAlive()
            {
                return "Hi";
            }
        
        }



 6. Create this class:  ConversationalSessionAttributeStore
    Right-click on /src/main/java/app1 -> New Package
    Package Name:  conversationSupport
    
    Right-click on conversationSupport -> New Java Class
    Class Name:  ConversationalSessionAttributeStore
    
    Copy this to your Class
    
        package app1.conversationSupport;
        
        
        import java.util.HashMap;
        import java.util.LinkedHashMap;
        import java.util.Map;
        import java.util.UUID;
        
        
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.beans.factory.InitializingBean;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.util.Assert;
        import org.springframework.web.bind.support.SessionAttributeStore;
        import org.springframework.web.context.request.WebRequest;
        import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;
        
        /**
         * This class handles how session scoped model attributes are stored and
         * retrieved from the HttpSession. This implementation uses a timestamp to
         * distinguish multiple command objects of the same type. This is needed for
         * users editing the same entity on multiple tabs of a browser.
         *
         * Source:
         * http://forum.springsource.org/showthread.php?95016-Using-Session-Model
         * -Attributes-With-Multiple-Browser-Tabs-Patch
         *
         * Note: Conversation management was on the agenda for 3.1 then got moved to 3.2
         * but doesn't seem like it will make it there.
         *
         * @author MJones
         * @version Sep 2, 2010
         *
         *
         *          Note 2: This is a modification of the code in the URL because I
         *          don't want to use a tag lib. Therefore - my implementation creates a
         *          conversation map on the session - to allow each conversation to have
         *          its own store without adding the cid on the object name. In this way
         *          - the cid and the session attributes are kept separated.
         *
         * @author Nimo Naamani
         * http://duckranger.com
         */
        /**
         * Created by adam on 1/30/2016.
         */
        public class ConversationalSessionAttributeStore implements SessionAttributeStore, InitializingBean
        {
            @Autowired(required = true)
            private RequestMappingHandlerAdapter requestMappingHandlerAdapter;
        
            private static final Logger logger = LoggerFactory.getLogger(ConversationalSessionAttributeStore.class);
        
            private int keepAliveConversations = 10;
        
            public final static String CID_FIELD = "_cid";
            public final static String SESSION_MAP = "sessionConversationMap";
        
        
            public void storeAttribute(WebRequest request, String attributeName, Object attributeValue)
            {
                Assert.notNull(request, "WebRequest must not be null");
                Assert.notNull(attributeName, "Attribute name must not be null");
                Assert.notNull(attributeValue, "Attribute value must not be null");
        
                String cId = getConversationId(request);
                if (cId == null || cId.trim().length() == 0) {
                    cId = UUID.randomUUID().toString();
                }
                request.setAttribute(CID_FIELD, cId, WebRequest.SCOPE_REQUEST);
                logger.debug("storeAttribute - storing bean reference for '{}'", attributeName);
                store(request, attributeName, attributeValue, cId);
            }
        
        
            public Object retrieveAttribute(WebRequest request, String attributeName)
            {
                Assert.notNull(request, "WebRequest must not be null");
                Assert.notNull(attributeName, "Attribute name must not be null");
        
                if (getConversationId(request) != null)
                {
                    logger.debug("retrieveAttribute - retrieving bean reference for '{}' for conversation {}", attributeName, getConversationId(request) );
                    return getConversationStore(request, getConversationId(request)).get(attributeName);
                } else {
                    return null;
                }
            }
        
        
            public void cleanupAttribute(WebRequest request, String attributeName)
            {
                Assert.notNull(request, "WebRequest must not be null");
                Assert.notNull(attributeName, "Attribute name must not be null");
        
                logger.debug("cleanupAttribute - removing bean reference for '{}' from conversation {}", attributeName,getConversationId(request) );
        
                Map<String, Object> conversationStore = getConversationStore(request, getConversationId(request));
                conversationStore.remove(attributeName);
        
                // Delete the conversation store from the session if empty
                if (conversationStore.isEmpty()) {
                    getSessionConversationsMap(request).remove(getConversationId(request));
                }
            }
        
        
            /**
             * Retrieve a specific conversation's map of objects from the session. Will
             * create the conversation map if it does not exist.
             *
             * The conversation map is stored inside a session map - which is a map of
             * maps. If this does not exist yet- it will be created too.
             *
             * @param request
             *            - the incoming request
             * @param conversationId
             *            - the conversation id we are dealing with
             * @return - the conversation's map
             */
            private Map<String, Object> getConversationStore(WebRequest request, String conversationId)
            {
        
                Map<String, Object> conversationMap = getSessionConversationsMap(request).get(conversationId);
                if (conversationId != null && conversationMap == null) {
                    conversationMap = new HashMap<String, Object>();
                    getSessionConversationsMap(request).put(conversationId, conversationMap);
                }
                return conversationMap;
            }
        
            /**
             * Get the session's conversations map.
             *
             * @param request
             *            - the request
             * @return - LinkedHashMap of all the conversations and their maps
             */
            private LinkedHashMap<String, Map<String, Object>> getSessionConversationsMap(WebRequest request)
            {
                @SuppressWarnings("unchecked")
                LinkedHashMap<String, Map<String, Object>> sessionMap = (LinkedHashMap<String, Map<String, Object>>) request.getAttribute(
                        SESSION_MAP, WebRequest.SCOPE_SESSION);
                if (sessionMap == null) {
                    sessionMap = new LinkedHashMap<String, Map<String, Object>>();
                    request.setAttribute(SESSION_MAP, sessionMap, WebRequest.SCOPE_SESSION);
                }
                return sessionMap;
            }
        
            /**
             * Store an object on the session. If the configured maximum number of live
             * conversations to keep is reached - clear out the oldest conversation. (If
             * max number is configured as 0 - no removal will happen)
             *
             * @param request
             *            - the web request
             * @param attributeName
             *            - the name of the attribute (from @SessionAttributes)
             * @param attributeValue
             *            - the value to store
             */
            private void store(WebRequest request, String attributeName, Object attributeValue, String cId)
            {
                LinkedHashMap<String, Map<String, Object>> sessionConversationsMap = getSessionConversationsMap(request);
                if (keepAliveConversations > 0 && sessionConversationsMap.size() >= keepAliveConversations
                        && !sessionConversationsMap.containsKey(cId)) {
                    // clear oldest conversation
                    String key = sessionConversationsMap.keySet().iterator().next();
                    sessionConversationsMap.remove(key);
                }
                getConversationStore(request, cId).put(attributeName, attributeValue);
        
            }
        
            public int getKeepAliveConversations()
            {
                return keepAliveConversations;
            }
        
            public void setKeepAliveConversations(int numConversationsToKeep)
            {
                keepAliveConversations = numConversationsToKeep;
            }
        
            /**
             * Helper method to get conversation id from the web request
             *
             * @param request
             *            - Incoming request
             * @return - the conversationId (note that this is a request parameter, and
             *         only gets there on form submit)
             */
            private String getConversationId(WebRequest request)
            {
                String cid = request.getParameter(CID_FIELD);
                if (cid == null) {
                    cid = (String) request.getAttribute(CID_FIELD, WebRequest.SCOPE_REQUEST);
                }
                return cid;
            }
        
            /**
             * Required for wiring the RequestMappingHandlerAdapter
             */
            public void afterPropertiesSet() throws Exception
            {
                requestMappingHandlerAdapter.setSessionAttributeStore(this);
            }
        }



 7. Create this class:   ConversationIdRequestProcessor
    Right-click on /src/main/java/app1/conversationSupport -> New Java Class
    Class Name:  ConversationIdRequestProcessor
    
    Copy this to your Class
            
        package app1.conversationSupport;
        
        import org.springframework.web.servlet.support.RequestDataValueProcessor;
        import javax.servlet.http.HttpServletRequest;
        import java.util.HashMap;
        import java.util.Map;
        
        /**
         * Created by adam on 1/30/2016.
         */
        public class ConversationIdRequestProcessor implements RequestDataValueProcessor
        {
            public String processAction(HttpServletRequest request, String action, String httpMethod)
            {
                return action;
            }
        
        
            public String processFormFieldValue(HttpServletRequest request, String name, String value, String type)
            {
                return value;
            }
        
            public Map<String, String> getExtraHiddenFields(HttpServletRequest request)
            {
        
                Map<String, String> hiddenFields = new HashMap<String, String>();
                if (request.getAttribute(ConversationalSessionAttributeStore.CID_FIELD) != null)
                {
                    // There is a Conversation ID in the Request object
        
                    // So, add a hidden form field with name="_cid" and value="<conversationId>"
                    hiddenFields.put(ConversationalSessionAttributeStore.CID_FIELD,
                            request.getAttribute(ConversationalSessionAttributeStore.CID_FIELD).toString());
                }
                return hiddenFields;
            }
        
            public String processUrl(HttpServletRequest request, String url)
            {
                return url;
            }
        }



 8. Create this JSP:  popupWizardPage.jsp
    Right-click on /src/main/webapp/WEB-INF/jsp -> New File
    Filename:  popupWizardPage.jsp
    
    Copy this to your JSP:
    
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <!DOCTYPE HTML>
        
        <html xmlns="http://www.w3.org/1999/xhtml">
        
        <head>
            <title>Welcome Page</title>
        
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
        
            <!-- Load Bootstrap CSS -->
            <link href="${contextPath}/resources/bootstrap-3.3.4/css/bootstrap.min.css" rel="stylesheet" media="screen">
        
            <!-- Load Bootstrap CSS Themes -->
            <link href="${contextPath}/resources/bootstrap-3.3.4/css/bootstrap-theme.min.css" rel="stylesheet" media="screen">
        
            <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
            <!--[if lt IE 9]>
            <script src="${contextPath}/resources/bootstrap-3.3.4/assets/html5shiv.js"></script>
            <script src="${contextPath}/resources/bootstrap-3.3.4/assets/respond.min.js"></script>
            <![endif]-->
        
            <style>
                .form-error-field { background-color: #FFC;}
                .form-error-message { font-weight: bold; color: #900; }
            </style>
        </head>
        
        <body>
        
            <%-- S T A N D A R D       H E A D E R  --%>
            <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
        
            <h2>wizardPage.jsp</h2>
        
            <br/>
        
            <div class="container">
                <%-- 'Open Wizard Popup' button
                     NOTES
                      1) data-toggle="modal" opens the modal window
                      2) data-target="#popupWizardModal" points to the id of the modal popup
                      3) data-remote=<url to load as page1>
                 --%>
                <button id="btnPopup" type="button" class="btn btn-info btn-lg" onclick="openWizardPopup()">Open Wizard Popup</button>
        
        
                <%-- M O D A L    P O P U P      S H E L L
                     NOTE:
                        1) class="modal-dialog modal-lg"  --> Large Modal
                        2) tabindex="-1" causes escape to close the dialog
                --%>
                <div class="modal fade" id="popupWizardModal" role="dialog" tabindex="-1">
                    <div class="modal-dialog modal-lg">
        
                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Modal Header</h4>
                            </div>
                            <div class="modal-body">
                                <p>Some text in the modal CHANGE6666
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                        </div>
        
                    </div>
                </div>
            </div>
        
        
            <br/>
            <a href="#" onclick="openWizardPopup()">Open Wizard Popup2</a>
            <br/>
            <br/>
        
            <%-- S T A N D A R D       F O O T E R  --%>
            <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
        
        
            <%-- Load jQuery (necessary for Bootstrap's JavaScript plugins) --%>
            <script src="${contextPath}/resources/jquery-1.11.3/jquery-1.11.3.min.js" type="text/javascript"></script>
        
            <%-- Include all compiled plugins (below), or include individual files as needed --%>
            <script src="${contextPath}/resources/bootstrap-3.3.4/js/bootstrap.min.js" type="text/javascript"></script>
        
            <script type="text/javascript">
        
                var gsContextPath = '${contextPath}';
        
                /*****************************************************************
                 * openWizardPopup()
                 ******************************************************************/
                function openWizardPopup()
                {
                    // Open the popup wizard
                    // WARNING:  Make sure the popups do not include jquery or bootstrap (as they are already loaded on this page
                    $('#popupWizardModal').modal();
                }
        
                /*****************************************************************
                 * showPage1InPopup()
                 ******************************************************************/
                function showPage1InPopup()
                {
                    var cidValue = $('input:hidden[name=_cid]').val();
        
                    // Load page1 into the modal body
                    var sUrlOfPage1 = gsContextPath + "/popupWizard/page1/cid/" + cidValue;
                    $("#popupWizardModal").find('.modal-body').load(sUrlOfPage1);
                }
        
        
        
                /*****************************************************************
                 * showPage1InPopupStartOver()
                 ******************************************************************/
                function showPage1InPopupStartOver()
                {
                     // Load page1 into the modal body
                    var sUrlOfPage1 = gsContextPath + "/popupWizard/page1";
                    $("#popupWizardModal").find('.modal-body').load(sUrlOfPage1);
                }
        
                /*****************************************************************
                 * submitFormAsAjaxCall()
                 ******************************************************************/
                function submitFormAsAjaxCall(aFormElement)
                {
                    console.log('submitFormAsAjaxCall aFormElement=' + aFormElement);
        
                    // Create an AJAX call
                    $.ajax( {
                        data: aFormElement.serialize(),     // get the form data
                        type: aFormElement.attr("method"),  // get the method from the form (GET or POST)
                        url:  aFormElement.attr("action"),  // get the action from the form
                        success: function(aResponse) {
                            $("#popupWizardModal").find('.modal-body').html(aResponse);
        
                            return false;
                        }
                    });
        
                    // Return false so that the page submit does not actually happen
                    return false;
                }
        
        
        
                $(document).ready(function()
                {
                    $("#popupWizardModal").on('show.bs.modal', function(e)
                    {
                        // The event 'show.bs.modal' is fired just before the modal is open.
        
                        // Get the url of page1
                        var sUrlOfPage1 = gsContextPath + "/popupWizard/page1";
        
                        // Load page1 into the modal body
                        $(e.target).find('.modal-body').load(sUrlOfPage1);
                    });
        
        
                    $('#popupWizardModal').on('shown.bs.modal', function () {
                        // The popup-wizard is shown -- so set the focus on the name field of the 1st page
                        $('#name').focus();
                    })
                });
            </script>
        </body>
        </html>



 9. Create this JSP:  popupPage1.jsp
    Right-click on /src/main/webapp/WEB-INF/jsp -> New File
    Filename:  popupPage1.jsp
    
    Copy this to your JSP:
    
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <h2>popupPage1.jsp</h2>
        
        <br/>
        
        <c:if test="${not empty errorMessage}">
            <p style="display: block; background-color: #FF3232; color: #FFFFFF">
                Error Occurred!!<br/>
                    ${errorMessage}<br/>
            </p>
        </c:if>
        
        
        <form:form id="popupForm" action="${contextPath}/popupWizard/page1/continue" method="post" modelAttribute="formBean">
        
            <table>
                <tr>
                    <td>Enter Name:</td>
                    <td><form:input id="name" path="name" placeholder="-Enter Name-" cssErrorClass="form-error-field"/></td>
                    <td><div class="form-error-message"><form:errors path="name" cssClass="form-error-field"/></div></td>
                </tr>
                <tr>
                    <td>Occupation</td>
                    <td>
                        <form:select path="occupationId" cssErrorClass="form-error-field">
                            <form:option value="0">-Occuptation-</form:option>
                            <form:options items="${occupations}" />
                        </form:select>
                    </td>
                    <td><div class="form-error-message"><form:errors path="occupationId" cssClass="form-error-field"/></div></td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td><input type="submit" name="unused" value="Continue to Page 2"  /></td>
                </tr>
            </table>
        </form:form>
        
        <br/>
        <br/>
        
        
        <script type="text/javascript">
            $(document).ready(function()
            {
                // Put the cursor on the enter-name textbox
                $('#name').focus();
        
        
                // On submit, add a hidden formfield with the name/value of which submit button was pressed
                // This fixes the error with the aForm.serialize() call does *NOT* find which submit button was pressed
                var form = $('#popupForm');
                $(":submit",form).click(function(){
                    if($(this).attr('name')) {
                        $(form).append(
                                $("<input type='hidden'>").attr( {
                                    name: $(this).attr('name'),
                                    value: $(this).attr('value') })
                        );
                    }
                });
        
        
                // Tell this popup form to submit the form as an AJAX call
                $('#popupForm').submit(function()
                {
                    // Catch the submit-form-event handler
        
                    // Run the submit form as an ajax call
                    return(submitFormAsAjaxCall($(this)));
                });
            });
        </script>



10. Create this JSP:  popupPage2.jsp
    Right-click on /src/main/webapp/WEB-INF/jsp -> New File
    Filename:  popupPage2.jsp
    
    Copy this to your JSP:

        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <h2>popupPage2.jsp</h2>
        
        <br/>
        
        <form:form id="popupForm" action="${contextPath}/popupWizard/page2" method="post" modelAttribute="formBean">
        
            <table>
                <tr>
                    <td>Name</td>
                    <td>${formBean.name}</td>
                </tr>
                <tr>
                    <td>Occupation</td>
                    <td>${formBean.occupationName}</td>
                </tr>
                <tr>
                    <td>Age</td>
                    <td><form:input id="age" path="age" placeholder="-Enter Your Age-"
                                       cssErrorClass="form-error-field"
                                       onKeyPress="submitOnEnter(event)"/>
                    </td>
                    <td><div class="form-error-message"><form:errors path="age" cssClass="form-error-field"/></div></td>
                </tr>
                <tr>
                    <td colspan='2'>
                        <input type="submit" id="gotoPage1" name="gotoPage1" value="Back to Page 1" />&nbsp;&nbsp;
                        <input type="submit" id="gotoPage3" name="gotoPage3" value="Continue to Page 3" />
                    </td>
                </tr>
            </table>
        </form:form>
        
        
        
        <br/>
        <br/>
        
        <a href="#" onclick="showPage1InPopup()">Go to Page 1 of wizard</a>
        
        
        <script type="text/javascript">
        
            // --------------------------------------------------------------------------
            // submitOnEnter()
            //
            // If the user presses Enter anywhere on the HTML page
            //   Then submit form as if user pressed 'gotoPage3'
            // --------------------------------------------------------------------------
            function submitOnEnter(aEvent)
            {
                // Get the Ascii Keycode of the last keypress
                var keyCode = aEvent ? (aEvent.which ? aEvent.which : aEvent.keyCode) : event.keyCode;
        
                if (keyCode == 13)
                {
                    // User pressed Enter (Ascii code 13)
        
                    // Simulate pressing the 'gotoPage3' button
                    $('#gotoPage3').click();
                    return true;
                }
                else
                {
                    // User pressed something other than enter.  So, ignore it
                    return true;
                }
            }
        
        
            $(document).ready(function()
            {
                // Put the cursor on the age textbox
                $('#age').focus();
        
        
                // On submit, add a hidden formfield with the name/value of which submit button was pressed
                // This fixes the error with the aForm.serialize() call does *NOT* find which submit button was pressed
                var form = $('#popupForm');
                $(":submit",form).click(function(){
                    if($(this).attr('name')) {
                        $(form).append(
                                $("<input type='hidden'>").attr( {
                                    name: $(this).attr('name'),
                                    value: $(this).attr('value') })
                        );
                    }
                });
        
        
                // Tell this popup form to submit the form as an AJAX call
                $('#popupForm').submit(function()
                {
                    // Catch the submit-form-event handler
        
                    // Run the submit form as an ajax call
                    return(submitFormAsAjaxCall($(this)));
                });
            });
        </script>



11. Create this JSP:  popupPage3.jsp
    Right-click on /src/main/webapp/WEB-INF/jsp -> New File
    Filename:  popupPage3.jsp
    
    Copy this to your JSP:

        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <h2>page3.jsp</h2>
        
        <br/>
        
        Review the form
        
        <c:if test="${not empty errorMessage}">
            <%-- An error appeared running the transaction --%>
             <p style="display: block; background-color: #FF3232; color: #FFFFFF">
                Error Occurred!!<br/>
                ${errorMessage}<br/>
            </p>
        </c:if>
        
        <form:form id="popupForm" action="${contextPath}/popupWizard/page3" method="post">
        
            <table>
                <tr>
                    <td>Name</td>
                    <td>${formBean.name}</td>
                </tr>
                <tr>
                    <td>Occupation</td>
                    <td>${formBean.occupationName}</td>
                </tr>
                <tr>
                    <td>Age</td>
                    <td>${formBean.age}</td>
                </tr>
                <tr>
                    <td colspan='2'>
                        <input type="submit" name="gotoPage2" value="Back to Edit Details" />&nbsp;&nbsp;
                        <input type="submit" name="submitTransaction" value="Submit Request" />
                    </td>
                </tr>
            </table>
        </form:form>
        
        
        <br/>
        <br/>
        
        <a href="#" onclick="showPage1InPopup()">Go to Page 1 of wizard</a>
        
        
        <script type="text/javascript">
        
            $(document).ready(function()
            {
                // On submit, add a hidden formfield with the name/value of which submit button was pressed
                // This fixes the error with the aForm.serialize() call does *NOT* find which submit button was pressed
                var form = $('#popupForm');
                $(":submit",form).click(function(){
                    if($(this).attr('name')) {
                        $(form).append(
                                $("<input type='hidden'>").attr( {
                                    name: $(this).attr('name'),
                                    value: $(this).attr('value') })
                        );
                    }
                });
        
        
                // Tell this popup form to submit the form as an AJAX call
                $('#popupForm').submit(function()
                {
                    // Catch the submit-form-event handler
        
                    // Run the submit form as an ajax call
                    return(submitFormAsAjaxCall($(this)));
                });
            });
        </script>



12. Create this JSP:  popupPage4.jsp
    Right-click on /src/main/webapp/WEB-INF/jsp -> New File
    Filename:  popupPage4.jsp
    
    Copy this to your JSP:

        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        
        <h2>page4.jsp</h2>
        
        <br/>
        
        Thank you for using the form
        <p style="margin-left: 10px">
            Your ticket id is ${ticketid}
        </p>
        
        <a href="#" onclick="showPage1InPopupStartOver()">Go to Page 1 of wizard</a>
        
        <br/>
        <br/>



13. Add a link to your popupWizardPage from your welcome.jsp
    Edit your welcome.jsp and add this to it:
    
        <a href="${contextPath}/welcome/popupWizardPage">Go to Wizard Popup Starting Page</a>
       
       
                 

14. Add an event handler to your WelcomeController (that forwards to popupWizard.jsp)
 
    Add this code to your WelcomeController class
    
        /**********************************************************************
         * showPopupWizardPage()
         *
         ***********************************************************************/
        @RequestMapping("/welcome/popupWizardPage")
        public ModelAndView showPopupWizardPage( Model aModel )
        {
            // Create a modelAndView object
            ModelAndView mav = new ModelAndView("popupWizardPage.jsp");
    
            return mav;
        }    
        
                          