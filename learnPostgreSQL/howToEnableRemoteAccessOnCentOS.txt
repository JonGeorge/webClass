How to Make Postgres Remotely Accessable (on CentOS)
----------------------------------------------------
Problem:  You can connect to postgres from localhost
          But, you cannot connect to postgres from other points on your network
          
Solution: Tell postgres to let anyone connect to it.



Assumptions:
 A) Your postgres database is on, listening on localhost
 B) Your postgres database is running on a computer at 192.168.1.162
 C) Your postgres database is running on a unix computer
 D) You have the authority to modify the pg_hba.conf file
 


Procedure
--------- 
 1. Open up Port 5432 (so outside clients can connect to postgres)
    unix> sudo -s
    unix> iptables -I INPUT -p tcp -m tcp --dport 5432 -j ACCEPT
    unix> service iptables save
    unix> service iptables restart
    unix> iptables -S  # to list the current rule

 
 
 2. Tell Postgres to access remote connections from anywhere
    NOTE:  When done, users can use either localhost *OR* the IP address to connect to the database
    a. Check to see if remote access is allowed   [it should be disabled by default]
       unix> psql -U postgres -h 192.168.1.162       # I assume that your server's IP address is 192.168.1.162
   
	     psql: could not connect to server: Connection refused
	  	   Is the server running on host "192.168.1.162" and accepting
		   TCP/IP connections on port 5432?
       
       
    b. Modify pg_hba.conf so that everyone requires a password from localhost *AND* remote boxes
       unix> sudo cp /var/lib/pgsql/9.3/data/pg_hba.conf  /var/lib/pgsql/9.3/data/pg_hba.conf.OLD
       unix> sudo vi /var/lib/pgsql/9.3/data/pg_hba.conf
    
		# Change the file so it looks like this

		# "local" is for Unix domain socket connections only. 
		#  So, the system admins can login without password using this:
		#    unix> sudo su - postgres
		#    unix> psql 
		local   all             postgres                                peer
		
		# IPv4 local connections require password
		host    all             all             127.0.0.1/32            md5
		
		# IPv6 local connections require password
		host    all             all             ::1/128                 md5
		
		# all remote connections require password 
		host    all             all             0.0.0.0/0               md5

    
    c. Tell postgres to listen on all IP addresses (and not just localhost)
       unix> sudo vi /var/lib/pgsql/9.3/data/postgresql.conf 
       		
       	    # Add this line to that postgres listens on all IP addresses
            listen_addresses='*'
    
    
    d. Delete your .pgpass file (if it exists).  This file might have a passwords in it
       unix> rm ~/.pgpass
           
    e. Tell postgres to reload the conf file
       unix> sudo service postgresql-9.3 reload

    f. Verify it works using an IP address
       unix> psql -U postgres -h 192.168.1.162
       Password for user postgres:    secret <enter>
     
       If it works, you should see the postgres prompt.  Use \q to exit out.
       postgres-# \q
       
    g. Verify it works using localhost
       unix> psql -U postgres -h localhost
       Password for user postgres:    secret <enter>
       
       If it works, you should see the postgres prompt.  Use \q to exit out.
       postgres-# \q        
    
       

           
How to Log Into the Postgres Database (using postgres unix account)
-------------------------------------------------------------------
unix> sudo su - postgres
unix> psql

postgres-# \q

unix> exit



How to Log Into the Postgres Database (using user/password)
------------------------------------------------------------
unix> psql -U postgres -h 192.168.1.162
      Password for user postgres:    secret <enter>


postgres-# \q
