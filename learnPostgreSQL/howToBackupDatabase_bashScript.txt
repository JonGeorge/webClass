How to Backup Database using Bash Script
----------------------------------------

NOTE:  You would copy this script to your postgres server
       Then, setup a cronjob to run it periodically.



#!/bin/bash
#################################################################################
# Filename:  backupDatabase.sh
#################################################################################
# Purpose:
#   Provide a way to backup the production Postgres database
#   and to age-off older versions of the backups
#
# Design:
#   1) Verify command-line arguments
#   2) Backup the current production database (get all schemas inside of it)
#   3) Delete old backups (based on command-line arguments)
#
# Setup:
#   1) Setup the default destination directory
#      unix> sudo -s
#      unix> mkdir -p /var/backups
#
#   2) Upload this script to that server and put it in a safe place:  like /srv/cde/scripts
#      unix> mkdir -p /srv/cde/scripts
#      unix> mv /tmp/backupDatabase.sh /srv/cde/scripts
#      unix> chmod u+x /srv/cde/scripts/backupDatabase.sh
#
#   4) Run this script manually (as root)
#      unix> sudo -s
#      unix> cd /srv/cde/scripts
#      unix> ./backupDatabase.sh --days-to-keep=20  --dest-dir=/var/backups
#
#   5) Setup a cron job that runs this twice-per-day  (noon and midnight)
#      unix> crontab -e
#
# Usage
#   unix> ./backupDatabase.sh --days-to-keep=14           # Backup and age-off backups older than 14 days
#   unix> ./backupDatabase.sh --dest-dir=/opt/somewhere   # Backup and store backups in /opt/somewhere
#   unix> ./backupDatabase.sh                             # Backup and do not ageoff any backups
#
# Assumptions:
#   1) Default destination directory is /var/backups
#   2) This script runs the pg_dumpall to do the backup
#   3) This script should be run as *root*
#      (so that there is no need to store usernames or password here)
#
# History:
#   Create Date:  03/21/2018
#################################################################################
DAYS_TO_KEEP=0                                       # Command line arg --days-to-keep
DEST_DIR=/var/backups                                # Command line arg --dest-dir

readonly SCRIPT_ARGS="$@"                            # Holds the command line arguments
readonly SCRIPT_NAME=`basename $0`                   # Holds the name of this bash script
readonly TMP_FILE_PATH=/tmp/${SCRIPT_NAME}.$$.tmp    # Holds the path of temporary files
readonly DATABASE_PREFIX="postgres_"
readonly DATABASE_SUFFIX=".bak"



#######################################################
# main()
#
#######################################################
function main()
{
  # S C R I P T        S T A R T S       H E R E
  echo "${SCRIPT_NAME} started as of `date`"

  # Part 1:  Verify Command Line Arguments
  verifyCommandLineArgs

  # Part 2:  Backup current production database
  backupDatabase "$DATABASE_PREFIX" "$DATABASE_SUFFIX"

  # Part 3:  Delete older backups
  ageoffBackups "$DATABASE_PREFIX" "$DATABASE_SUFFIX" $DAYS_TO_KEEP

  # S C R I P T         E N D S        H E R E
  echo -e "\n${SCRIPT_NAME} finished successfully as of `date`"
  exit 0
}


#######################################################
# cleanup()
#
# This method is always called before the script ends
#######################################################
function cleanup()
{
  # Clean-up the tmp file
  rm -f $TMP_FILE_PATH
}

# Tell bash to call cleanup() when the program ends
# NOTE:  Whether the program crashes or succeeds, this method is the last method called
trap cleanup EXIT


#######################################################
# displayUsage()
# -- Display the usage statement
#######################################################
function displayUsage()
{
  # Display a multi-line-string with the usage statement
  cat << EOF

   ${SCRIPT_NAME} --days-to-keep=<number of days to keep as an integer>

   Assumptions:
     1) The database server is on the same hostname as this script

EOF
}


#######################################################
# verifyCommandLineArgs()
#
# Examine the command line arguments
# Verify that the command line arguments are valid
# If valid, set the global vars
#######################################################
function verifyCommandLineArgs()
{

  # Parse Command Line Arguments
  for arg in ${SCRIPT_ARGS[*]}; do
    case $arg in
        --days-to-keep=*)   DAYS_TO_KEEP="${arg#*=}"; shift 1;;
        --dest-dir=*)       DEST_DIR="${arg#*=}"; shift 1;;
    esac
  done


  if [[ -z "$DAYS_TO_KEEP" ]]; then
     # The user passed-in an empty string for --days-to-keep
     displayUsage
     echo "The --days-to-keep value must be greater than zero.  Please specify --days-to-keep=<positive number>"
     exit 1
  elif ! [[ $DAYS_TO_KEEP =~ ^[\-0-9]+$ ]]; then
     # The user passed-in a value that is not a number
     displayUsage
     echo "The --days-to-keep value must be greater than zero.  Please specify --days-to-keep=<positive number>"
     exit 1
  elif (( $DAYS_TO_KEEP < 0 )); then
     # The user passed-in a value that is negative
     displayUsage
     echo "The --days-to-keep value must be greater than zero.  Please specify --days-to-keep=<positive number>"
     exit 1
  fi

  # Verify that the DEST_DIR exists and is write-able
  if [ ! -d "$DEST_DIR" ]; then
     # This directory does not exist
     displayUsage
     echo -e "The destination directory does not exists:  $DEST_DIR\nPlease specify --dest-dir to a different path or create this directory.\n"
     exit 1
  fi

  if [ ! -w "$DEST_DIR" ]; then
     # This directory is not writable
     displayUsage
     echo -e "The destination directory is not writable:  $DEST_DIR\nPlease specify --dest-dir to a different path or adjust this directory's write permissions.\n"
     exit 1
  fi


  if [ "$(whoami)" != "root" ]; then
     echo "Error:  This script must be run as root to backup the database without password prompts."
     exit 1
  fi

  echo -e "Command line arguments were successfully parsed:"
  echo -e "\tDAYS_TO_KEEP = ${DAYS_TO_KEEP}"
}


#######################################################
# backupDatabase()
#
#######################################################
function backupDatabase()
{
   local aDatabasePrefix=$1
   local aDatabaseSuffix=$2

   local currentDateTime=`date +"%Y%m%d_%H%M%S"`
   local destFilePath="${DEST_DIR}/${aDatabasePrefix}${currentDateTime}${aDatabaseSuffix}"

   echo -e "\nbackupDatabase()   prefix=${aDatabasePrefix=}  suffix=${aDatabaseSuffix}"


   # Run the backup
   echo -e "\tRunning backup:  pg_dumpall -U postgres > $destFilePath"
   pg_dumpall -U postgres > $destFilePath

   # Verify the backup finished successfully
   if [ $? -eq 0 ]; then
       # The backup succeeded
       echo -e "\tbackup succeeded."
   else
      # The backup failed
      echo -e "\tBackup failed."
      exit 1;
   fi

}


#######################################################
# ageoffBackups()
#  1) If the days-to-keep is zero, then do nothing
#  2) If the days-to-keep is positive, then
#      a) Get a list of all backups that are old
#      b) Erase the backups
#######################################################
function ageoffBackups()
{
   local aDatabasePrefix=$1
   local aDatabaseSuffix=$2
   local aDaysToKeep=$3

   echo -e "\nageoffBackups()   prefix=$aDatabasePrefix   suffix=$aDatabaseSuffix  daysToKeep=$aDaysToKeep"

   if [ "$aDaysToKeep" -eq "0" ]; then
      # The days to keep is zero.  So, exit this function here
      echo -e "\tDays to keep is zero:  Not deleting any old backups."
      return 0
   fi

   # Attempt to age off old backups

   # Use the date command to calculate the oldest *valid* file
   local oldestValidDate=`date +%Y%m%d -d "${aDaysToKeep} day ago" `
   echo -e "\tAny backups older than ${oldestValidDate} will be deleted."

   # Get a list of all backup filenames
   local fileList=( `ls -t ${DEST_DIR}/${aDatabasePrefix}*${aDatabaseSuffix}` )

   # Generate a list of files to delete
   local filename=""
   local filedate=""
   for filepath in "${fileList[@]}"
   do
       filename=`basename ${filepath}`

      if [[ $filename =~ ${aDatabasePrefix}([0-9]+) ]]; then
         # The reg exp matches.  Get the YYYMMDD from the filename
         filedate=${BASH_REMATCH[1]}

         if (( $filedate <= $oldestValidDate )); then
            # This file is older than $oldestValidDate -- so delete it
            echo -e "\tDeleting this file:  $filepath"

            # Attempt to delete this file
            rm -f $filepath

            if [ $? -eq 0 ]; then
                # The delete succeeded
                echo -e "\tDelete succeeded."
            else
               # The delete failed
               echo -e "\tDelete failed."
               exit 1;
            fi
         else
            # This file is younger than $oldestValidDate -- so keep it
            echo -e "\tKeeping this file:   $filepath"
         fi
      fi
   done
}


# Run the main() function
main
