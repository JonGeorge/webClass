How to Configure Nginx as a Reverse Proxy
-----------------------------------------


Procedures
----------
 1. Install nginx
    [see howToInstallNginx.txt]
    
 
 2. Modify the /etc/nginx/conf.d/default.conf to include other .conf files
    Add this to conf file:
        include conf.d/proxy/*.conf;

    So, your default.conf looks like this:
    
      server
      {
            listen       80;
            server_name  localhost;
        
        
            location / 
            {
                root   /usr/share/nginx/html;
                index  index.html index.htm;
            }
        
            # redirect server error pages to the static page /50x.html
            #
            error_page   500 502 503 504  /50x.html;
            location = /50x.html 
            {
                root   /usr/share/nginx/html;
            }
      
      
           include conf.d/proxy/*.conf;
      }
      
      
      
 3. Setup your other conf file
    unix> mkdir -p /etc/nginx/conf.d/proxy
    unix> vi reverseProxy.conf
    
          location /openam    
          {
          
                  #Add a custom header 
                  proxy_set_header X-something "Additional Header Information";
          
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
                  proxy_pass http://10.3.0.21:8080/springMvcWebApp1;
          }


   WARNING:  nginx may have problems with its reverse-proxy if you add this header
                 proxy_set_header Host $http_host; 
     
     
 4. Make sure your centos box has httpd_can_network_connect turned-on
    unix> getsebool -a | grep httpd_can_network_connect
    httpd_can_network_connect --> off
    
    NOTE:  If it shows "off" then, use this command to turn it on
    unix> setsebool httpd_can_network_connect on
    
    

 5. Turn on your destination webapp springMvcWebApp1
    NOTE:  It should be listening at http://10.3.0.21:8080/springMvcWebApp1
 
 
 6. Verify it works, open a few tail windows
    a. On your centos box, Connect to your centos box
       unix> tail -f /var/log/nginx/access.log
       
       unix> tail -f /var/log/nginx/error.log
       
       
   b. On your centos box  [which should now be forwarding to http://10.3.0.21:8080/springMvcWebApp1]
      1) Open a firefox browser
      2) Connect to http://localhost/openam
         -- It should reverse-proxy you to http://10.3.0.21:8080/springMvcWebApp1
         -- And, you should see the headers       


Handy:  Adjust your welcome.jsp page and WelcomeController to show headers
-----------------------------------------------------------------------------
 7. Update your WelcomeController.java to provide header information
    a. Edit your WelcomeController.java
    b. Copy this to your WelcomeController
         
       package app1.controllers;
       
       import org.slf4j.Logger;
       import org.slf4j.LoggerFactory;
       import org.springframework.stereotype.Controller;
       import org.springframework.ui.Model;
       import org.springframework.web.bind.annotation.RequestMapping;
       import org.springframework.web.servlet.ModelAndView;
       import app1.model.UserInfo;
       
       import javax.servlet.http.HttpServletRequest;
       import java.util.Enumeration;
       import java.util.HashMap;
       import java.util.Map;
       
       
       @Controller
       public class WelcomeController
       {
           private final static Logger logger = LoggerFactory.getLogger(WelcomeController.class);
       
       
           /**********************************************************************
            * handleDefaultPage()
            *
            * The user browsed to the   http://www.myserver.com/webapp
            * So, forward the user to   http://www.myserver.com/webapp/forward
            ***********************************************************************/
           @RequestMapping("/")
           public ModelAndView handleDefaultPage( Model aModel )
           {
               // By default, forward users to the /welcome page
               return new ModelAndView("forward:/welcome");
           }
       
       
       
           /**********************************************************************
            * mainPage()
            *
            * The user browsed to the /welcome page
            *  1) Get a userinfo object setup
            *  2) Forward the user to the welcome.jsp page
            ***********************************************************************/
           @RequestMapping("/welcome")
           public ModelAndView mainPage(Model aModel, HttpServletRequest aRequest)
           {
               logger.debug("mainPage() started");
       
               // Create a modelAndView object
               ModelAndView mav = new ModelAndView();
       
               // Show the welcome.jsp page
               mav.setViewName("welcome.jsp");
       
               // Create a userInfo object
               UserInfo userInfo = new UserInfo();
               userInfo.setUserName("Adam");
               userInfo.setIsAdministrator(true);
       
               // Add the userInfo information to the view
               mav.addObject("userInfo", userInfo);
               mav.addObject("useragent", getUserAgent(aRequest));
               mav.addObject("headers", getHeadersInfo(aRequest));
       
               logger.debug("mainPage() finished");
               return mav;
           }
       
       
           private String getUserAgent(HttpServletRequest aRequest) 
           {
               return aRequest.getHeader("user-agent");
           }
       
       
           public Map<String, String> getHeadersInfo(HttpServletRequest aRequest) 
           {
               Map<String, String> map = new HashMap<String, String>();
       
               Enumeration headerNames = aRequest.getHeaderNames();
               while (headerNames.hasMoreElements()) {
                   String key = (String) headerNames.nextElement();
                   String value = aRequest.getHeader(key);
                   map.put(key, value);
               }
               return map;
           }
       
       }
       

 8. Update your welcome.jsp to display header information
    a. Edit your /src/main/webapp/WEB-INF/jsp/welcome.jsp
    b. Copy this to your welcome.jsp
      
       <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
       
       <!DOCTYPE HTML>
       
       <html xmlns="http://www.w3.org/1999/xhtml">
       
       <head>
           <title>Welcome Page</title>
       </head>
       
       <body>
       
       <%-- S T A N D A R D       H E A D E R  --%>
       <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
       
       <h2>welcome.jsp</h2>
       <br/>
       
       Hello ${userInfo.userName} <br/>
       Are you an administrator: ${userInfo.isAdministrator }
       <br/>
       
       <pre>
       User-Agent is ${useragent}
       
       
       Headers
       <c:forEach var="entry" items="${headers}">
           Key: <c:out value="${entry.key}"/>  Value: <c:out value="${entry.value}"/>
       </c:forEach>
       </pre>
       
       <%-- S T A N D A R D       F O O T E R  --%>
       <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
       
       </body>
       </html>
