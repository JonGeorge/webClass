Lesson:  Add a REST call to get Lookups from back-end
-----------------------------------------------------
Problem:  Lots of pages needs to get lookup values
Solution: Create a REST endpoint that will get lookup values

   Contract will be:  GET /api/lookups/{lookup_type}/{order by}


Approach
 1) Add flyway to the backend 
 2) Run flyway:migrate from command-line
 3) Verify flyway runs automatically every time the webapp starts-up
 4) Add a Java LookupDTO class
 5) Add a Java LookupService class (that queries the database)
 6) Add a Java LookupController class
 7) Verify the REST call works
 

Procedure
---------
 1. Add flyway to the backend
    a. Add the flyway dependencies to the backend/pom.xml
            <dependency>
               <groupId>org.flywaydb</groupId>
               <artifactId>flyway-core</artifactId>
               <version>5.2.4</version>
            </dependency>

    b. Add the flyway maven plugin to the backend/pom.xml      
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>5.2.4</version>

                <configuration>
                    <!-- Set the postgres credentials when running mvn flyway:migrate from command-line -->
                    <user>app1_user</user>
                    <password>secret</password>
                    <url>jdbc:postgresql://localhost:5432/app1_db</url>
                    <schemas>app1_db</schemas>
                </configuration>
            </plugin>
     
    c. Add the flyway directories to the backend project
       unix> cd ~/intellijProjects/angularApp1
       unix> mkdir -p backend/src/main/resources/db/migration
  
    d. Add this file to the backend/src/main/resources/db/migration:   V1.1__lookup_tables.sql
       1) Right-click on backend/src/main/resources/db/migration -> New File
          Filename:  V1.1__lookup_tables.sql
       2) Copy this to the newly-created file

            --------------------------------------------------------------
            -- Filename:  V1.4__lookup_tables.sql
            --------------------------------------------------------------

            -- Create this table:  LookupType
            create table lookup_type
            (
                id            integer      not null,
                version       integer      not null,
                name          varchar(256) not null,
                primary key (id),
                constraint lookup_type_name_uniq UNIQUE(name) -- Each lookup type name must be unique
            );
            comment on table  lookup_type      is 'This lookup_type table holds all of the lookup type names.  Every lookup must have a type';
            comment on column lookup_type.name is 'Lookup_type.name holds the name or category of this lookup -- e.g., priority.';

            -- Create this table:  Lookup
            create table lookup
            (
                id            integer      not null,
                version       integer      not null,
                lookup_type   integer      not null,
                name          varchar(256) not null,
                display_order integer      null,
                primary key(id),
                constraint lookup_name_uniq UNIQUE(lookup_type, name),                           -- Each lookup name and type must be unique
                constraint lookup_type_fkey FOREIGN KEY(lookup_type) references lookup_type(id)  -- Each lookup type must exist in the lookup_type table
            );
            comment on table  lookup               is 'The lookup table holds all of the lookup values';
            comment on column lookup.name          is 'Lookup.name holds the actual lookup name -- low, medium, high';
            comment on column lookup.display_order is 'A possible order to display the lookups on the front-end';


            -- Insert Starting Lookup Types
            insert into lookup_type(id, version, name) values(100, 1, 'priority');
            insert into lookup_type(id, version, name) values(101, 1, 'report_type');


            -- Insert Starting Lookup Values for priority
            insert into lookup(id, version, lookup_type, display_order, name)  values(1, 1,  100, 1, 'low');
            insert into lookup(id, version, lookup_type, display_order, name)  values(2, 1,  100, 2, 'medium');
            insert into lookup(id, version, lookup_type, display_order, name)  values(3, 1,  100, 3, 'high');
            insert into lookup(id, version, lookup_type, display_order, name)  values(4, 1,  100, 4, 'critical');


            -- Insert Starting Lookup Values for report_type
            insert into lookup(id, version, lookup_type, name)  values(5, 1, 101, 'Marketing');
            insert into lookup(id, version, lookup_type, name)  values(6, 1, 101, 'H&R');
            insert into lookup(id, version, lookup_type, name)  values(7, 1, 101, 'CEO');

 2. Run flyway (from command-line)
    a. Compile everything
       unix> cd ~/intellijProjects/angularApp1
       unix> mvn clean install
    
    b. Run flyway to empty and migrate the database
       unix> cd backend
       unix> mvn flyway:clean
       unix> mvn flyway:migrate
    
    c. Verify flyway ran 
       unix> mvn flyway:info
       -- You should see this:
            +------------+---------+------------------------------+--------+---------------------+---------+
            | Category   | Version | Description                  | Type   | Installed On        | State   |
            +------------+---------+------------------------------+--------+---------------------+---------+
            | Repeatable |         | << Flyway Schema Creation >> | SCHEMA | 2020-05-25 17:52:15 | Success |
            | Versioned  | 1.1     | lookup tables                | SQL    | 2020-05-25 17:52:15 | Success |
            +------------+---------+------------------------------+--------+---------------------+---------+


 3. Configure the backend so that it runs flyway automatically every time the webapp starts
    a. Edit the backend/src/main/resources/application.yaml
       Add these lines:
       
          # Have spring run flyway:migrate on startup
          spring.flyway.enabled: true
          spring.flyway.schemas: app1_db

    
    b. Verify that the backend runs flyway everytime on startup
       1) Empty your database using mvn flyway:clean
          unix> cd ~/intellijProjects/angularApp1/backend
          unix> mvn flyway:clean
      
       2) Start-up the backend (Spring should automatically run flyway:migrate)
          In IntelliJ, Select Backend -> Run
       
       3) Connect to your database and verify that the tables exist
          unix> psql -U app1_user -d app1_db -h localhost
          password: secret
          
          \dt
          
          -- You should see this:
                                     List of relations
          Schema  |         Name          | Type  |   Owner   
         ---------+-----------------------+-------+-----------
          app1_db | flyway_schema_history | table | app1_user
          app1_db | lookup                | table | app1_user
          app1_db | lookup_type           | table | app1_user


          \q
          
          

 4. Add this class:  LookupDTO
    a. Right-click on backend/src/main/java/com/lessons -> New Package
       Package Name: models
       
    a. Right-click on backend/src/main/java/com/lessons/backend -> New Java Class
       Class Name:  LookupDTO

    b. Copy this to your newly-created class

            package com.lessons.models;

            public class LookupDTO {
                private int id;
                private String name;

                public int getId() {
                    return id;
                }

                public void setId(int id) {
                    this.id = id;
                }

                public String getName() {
                    return name;
                }

                public void setName(String name) {
                    this.name = name;
                }
            }


 5. Add this class:  LookupService
    a. Right-click on backend/src/main/java/com/lessons -> New Package
       Package Name:  services
       
    b. Right-click on backend/src/main/java/com/lessons/services -> New Java Class
       Class Name:  LookupService

    b. Copy this to your newly-created class

            package com.lessons.services;

            import com.lessons.models.LookupDTO;
            import org.apache.commons.lang3.StringUtils;
            import org.slf4j.Logger;
            import org.slf4j.LoggerFactory;
            import org.springframework.jdbc.core.BeanPropertyRowMapper;
            import org.springframework.jdbc.core.JdbcTemplate;
            import org.springframework.jdbc.support.rowset.SqlRowSet;
            import org.springframework.stereotype.Service;

            import javax.annotation.Resource;
            import javax.sql.DataSource;
            import java.util.List;

            @Service("com.lessons.services.LookupService")
            public class LookupService {
                private static final Logger logger = LoggerFactory.getLogger(LookupService.class);

                @Resource
                private DataSource dataSource;


                /**
                 * @param aLookupType holds the name of the lookup type
                 * @return true if found in the lookup_type table.  False otherwise
                 */
                public boolean doesLookupTypeExist(String aLookupType) {
                    // Construct the sql to see if this lookup type is found in the lookup_type table
                    String sql = "Select id from lookup_type where name=?";

                    // Execute the SQL
                    JdbcTemplate jt = new JdbcTemplate(this.dataSource);
                    SqlRowSet rs = jt.queryForRowSet(sql, aLookupType);

                    // Returns true if the lookup name is found, false otherwise
                    return rs.next();
                }

                /**
                 * @param aLookupType holds a string with a lookup type name
                 * @return list of LookupDTO objects that hold information about all lookups with this lookup type name
                 */
                public List<LookupDTO> getLookupsWithType(String aLookupType, String aOrderBy) {
                    String sql = "select l.id, l.name\n" +
                                "from lookup l\n" +
                                "join lookup_type lt on (lt.id=l.lookup_type)\n" +
                                "where lt.name=? ";

                    if (StringUtils.isNotEmpty(aOrderBy)) {
                        // Append the order by string
                        sql = sql + "order by " + aOrderBy;
                    }

                    // Execute the SQL, generating a list of LookupDTO objects
                    // NOTE:  If no lookup records are found, then returns an empty list
                    BeanPropertyRowMapper rowMapper = new BeanPropertyRowMapper(LookupDTO.class);
                    JdbcTemplate jt = new JdbcTemplate(this.dataSource);
                    List<LookupDTO> lookups = jt.query(sql, rowMapper, aLookupType);

                    // Return the list of LookupDTO objects (or empty list)
                    return lookups;
                }
            }

 6. Add the common-lang StringUtils to the backend/pom.xml
         <dependency>
            <!-- StringUtils Dependency -->
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.5</version>
        </dependency>    

 7. Add this class:  LookupController
    a. Right-click on backend/src/main/java/com/lessons/controllers -> New Java Class
       Class Name:  LookupController

    b. Copy this to your newly-created class

            package com.lessons.controllers;

            import com.lessons.models.LookupDTO;
            import com.lessons.services.LookupService;
            import org.slf4j.Logger;
            import org.slf4j.LoggerFactory;
            import org.springframework.http.HttpStatus;
            import org.springframework.http.MediaType;
            import org.springframework.http.ResponseEntity;
            import org.springframework.stereotype.Controller;
            import org.springframework.web.bind.annotation.PathVariable;
            import org.springframework.web.bind.annotation.RequestMapping;
            import org.springframework.web.bind.annotation.RequestMethod;

            import javax.annotation.Resource;
            import java.util.List;

            @Controller("com.lessons.controllers.LookupController")
            public class LookupController {
                private static final Logger logger = LoggerFactory.getLogger(LookupController.class);

                @Resource
                private LookupService lookupService;

                /*************************************************************************
                 * REST endpoint /api/lookups/{lookupType}/{orderBy}
                 *               /api/lookups/{lookupType}
                 *
                 * @return list of LookupDTO objects for the given category name
                 *************************************************************************/
                @RequestMapping(value = {"/api/lookups/{lookupType}/{orderBy}",
                                         "/api/lookups/{lookupType}"}, method = RequestMethod.GET, produces = "application/json")
                public ResponseEntity<?> getLookupsWithType(@PathVariable(name="lookupType")               String aLookupType,
                                                            @PathVariable(name="orderBy", required=false)  String aOrderBy) {
                    logger.debug("getLookupsWithType() started.   aLookupType={}", aLookupType);

                    if (! lookupService.doesLookupTypeExist(aLookupType) ) {
                        return ResponseEntity
                                .status(HttpStatus.BAD_REQUEST)
                                .contentType(MediaType.TEXT_PLAIN)
                                .body("The pass-in lookup type does not exist: " + aLookupType);
                    }

                    List<LookupDTO> lookupDTOS = lookupService.getLookupsWithType(aLookupType, aOrderBy);

                    // Return the list of LookupDTO objects back to the front-end
                    return ResponseEntity
                            .status(HttpStatus.OK)
                            .body(lookupDTOS);
                }
            }




 8. Verify the REST call works
    a. Pull Run -> Debug 'backend'
       -- This will open a browser connected to http://localhost:4200
       
    b. Use Postman to verify that the REST call works
       1) Make a GET call to http://localhost:8080/app1/api/lookups/priority
          Headers:  
             Accept   application/json
             
          -- You should get a list of maps back
            [
                {
                    "id": 4,
                    "name": "critical"
                },
                {
                    "id": 3,
                    "name": "high"
                },
                {
                    "id": 1,
                    "name": "low"
                },
                {
                    "id": 2,
                    "name": "medium"
                }
            ]
       2) Make a GET call to http://localhost:8080/app1/api/lookups/priority/id
          Headers:
             Accept   application/json
          
          -- You should get a list of maps back (sorted by id)
         [
             {
                 "id": 1,
                 "name": "low"
             },
             {
                 "id": 2,
                 "name": "medium"
             },
             {
                 "id": 3,
                 "name": "high"
             },
             {
                 "id": 4,
                 "name": "critical"
             }
         ]



