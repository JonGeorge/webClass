Lesson:  Use Angular Flex Layout for an Internal Page Navigation Mechanism
--------------------------------------------------------------------------
Problem:  I have a really long page
          I need a way for the user to navigate to different sections of the page
          


Assumptions:
 A) The page layout is as follows
   
    +--------------------------------------------+
    | Page Title                   | Page Title  |
    |                              | Section 1   |
    |  Section 1                   | Section 2   |
    |    section 1 is here         | Section 3   |
    |                              |             |
    |  Section 2                   |             |
    |    section 2 is here         |             |
    |                              |             |
    |  Section 3                   |             |
    |    section 3 is here         |             |
    +--------------------------------------------+
    
    As the user scrolls down, the right column is *always* visible at the top
    Clicking on items in the internal nav page, scrolls left column down
    
    
Procedure
---------
 1. Add a new page to the angularApp1
    unix> cd ~/intellijProjects/angularApp1/frontend
	unix> ng generate component longPage --skipTests
	
	
 2. Add a route for the new page
    a. Edit app.module.ts
	b. Add this to the routes
	     { path: 'page/longPage',  component: LongPageComponent },
		 
		 
	 When finished, your appRoutes should look *something* like this:
	   
		const appRoutes: Routes = [
		  { path: 'page/addReport',     component: AddReportComponent,  canActivate: [PageGuard] },
		  { path: 'page/longReport',    component: LongReportComponent, canActivate: [PageGuard] },
		  { path: 'page/viewReports',   component: ViewReportsComponent, canActivate: [PageGuard] },
		  { path: 'page/searchResults', component: SearchResultsComponent, canActivate: [PageGuard] },
		  { path: 'page/403',           component: ForbiddenComponent},      
		  { path: 'page/welcome',       component: WelcomeComponent },
		  { path: 'page/longPage',      component: LongPageComponent },
		  { path: '',   redirectTo:  'page/welcome', pathMatch: 'full'},
		  { path: '**',                 component: NotFoundComponent}    // No routes match, so take the user to the "NotFoundComponent"
		];   

 3. Add a link to the page in the navigation bar
    a. Edit navbar.component.html
	
	b. Add this to it:
		  <!-- View Long Page -->
		  <mat-list-item class="navItem" [routerLink]="'page/longPage'" routerLinkActive="active">
			<a title="View Long Page">View Long Page</a>
			<div fxFlex fxLayoutAlign="end end">
			  <a [routerLink]="'page/longPage'" target="_blank">
				<i class="fas fa-external-link-alt navItemIcon" title="Open 'View Long Page' in a new window"></i>
			  </a>
			</div>
		  </mat-list-item>


 4. Add some sections to this long page
    a. Edit long-page.component.html
	b. Replace its contents with this:
		<mat-card style="height: 300px">
		  <!-- Section for Title -->
		  <mat-card-title>Title Section</mat-card-title>

		  <mat-card-content>
			This is the title section and it goes on an one

		  </mat-card-content>

		</mat-card>



		<mat-card style="height: 300px; margin-top: 15px">
		  <!-- Section 1 -->
		  <mat-card-title>Section 1</mat-card-title>

		  <mat-card-content>
			Section 1 starts here it goes on an one

		  </mat-card-content>

		</mat-card>



		<mat-card style="height: 300px; margin-top: 15px">
		  <!-- Section 2 -->
		  <mat-card-title>Section 2</mat-card-title>

		  <mat-card-content>
			Section 2 starts here it goes on an one

		  </mat-card-content>

		</mat-card>



		<mat-card style="height: 300px; margin-top: 15px">
		  <!-- Section 3 -->
		  <mat-card-title>Section 3</mat-card-title>

		  <mat-card-content>
			Section 3 starts here it goes on an one

		  </mat-card-content>

		</mat-card>

