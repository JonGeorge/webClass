Lesson 6: Add Spring Boot to the Structure
------------------------------------------
There are two approaches for how to structure the Angular code and Spring Boot java code
 1) Create one maven module that holds both the front-end and back-end
 2) Create two maven modules: One holds the front-end, another holds the back-end

The best approach should be the approach that lets you
 A) Debug the java code on the back-end
 B) Debug the typescript code on the front-end
 C) Let front-end developers use "ng serve"


References
----------
https://sterl.org/2019/02/angular-spring-boot/


Reasons to keep the webapp as one module
----------------------------------------
 + Simpler to debug:  Just kick off the webapp's main class and it's running
 - Not sure if you can debug the typescript this way...?


Reasons to split the webapp into two modules
--------------------------------------------
 + Front-end people can still use "ng serve" for quick development
 + You can still run the entire webapp



Procedure (using Two Maven Modules)
-----------------------------------
We need to create a new directory structure with this:
  angularApp1/
  angularApp1/frontend/
  angularApp1/backend/


Procedure
---------
 1. Create this file:  angularApp1/pom.xml

        <?xml version="1.0" encoding="UTF-8"?>

        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>

          <groupId>com.lessons</groupId>
          <artifactId>angularApp1</artifactId>
          <packaging>pom</packaging>
          <version>1.0-SNAPSHOT</version>

          <name>angularApp1</name>

          <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>


            <spring.boot.version>2.2.1.RELEASE</spring.boot.version>
            <spring.version>5.2.1.RELEASE</spring.version>

          </properties>


          <build>
            <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
              <plugins>
                <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
                <plugin>
                  <artifactId>maven-clean-plugin</artifactId>
                  <version>3.1.0</version>
                </plugin>
                <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
                <plugin>
                  <artifactId>maven-resources-plugin</artifactId>
                  <version>3.0.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <version>3.8.0</version>
                </plugin>
                <plugin>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>2.22.1</version>
                </plugin>
                <plugin>
                  <artifactId>maven-jar-plugin</artifactId>
                  <version>3.0.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-install-plugin</artifactId>
                  <version>2.5.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-deploy-plugin</artifactId>
                  <version>2.8.2</version>
                </plugin>
                <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
                <plugin>
                  <artifactId>maven-site-plugin</artifactId>
                  <version>3.7.1</version>
                </plugin>
                <plugin>
                  <artifactId>maven-project-info-reports-plugin</artifactId>
                  <version>3.0.0</version>
                </plugin>
              </plugins>
            </pluginManagement>
          </build>
        </project>



 2. Use IntelliJ to create this maven module:  frontend
    a. In Intellij, right-click on the angularApp1/pom.xml -> Add as Maven Project
    b. Right-click on angularApp1 -> New Module:
        On the left, select Maven
        Click "Create from archetype"
        Select maven-archetype-quickstart
        Press "Next"

        ArtifactId:  frontend
        Press "Next"

        Module name:  frontend

    c. Delete the angularApp1/frontend/src directory and all of its subdirectories
    d. Delete the angularApp1/node_modules directory and all of its subdirectories


    When completed, the angularApp1/frontend/pom.xml should look like this:
        <?xml version="1.0" encoding="UTF-8"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <parent>
            <artifactId>angularApp1</artifactId>
            <groupId>com.lessons</groupId>
            <version>1.0-SNAPSHOT</version>
          </parent>
          <modelVersion>4.0.0</modelVersion>

          <artifactId>frontend</artifactId>
        </project>


 3. Use IntelliJ to create this maven module:  backend
    a. In Intellij, right-click on the angularApp1/pom.xml -> Add as Maven Project
    b. Right-click on angularApp1 -> New Module:
        On the left, select Maven
        Click "Create from archetype"
        Select maven-archetype-quickstart
        Press "Next"

        ArtifactId:  backend
        Press "Next"

        Module name:  backend


    When completed, the angularApp1/backend/pom.xml should look like this:
        <?xml version="1.0" encoding="UTF-8"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <parent>
            <artifactId>angularApp1</artifactId>
            <groupId>com.lessons</groupId>
            <version>1.0-SNAPSHOT</version>
          </parent>
          <modelVersion>4.0.0</modelVersion>

          <artifactId>backend</artifactId>
        </project>


 4. Move the Angular code to the frontend directory
    unix> cd ~/intellijProjects/angularApp1
    unix> mv src frontend
    unix> mv e2e frontend
    unix> mv README.md angular.json browserslist karma.conf.js package.json package-lock.json tsconfig* tslint.json frontend

 5. Modify the frontend/pom.xml by adding this <build>...</build> section right before the closing </project> line
        <build>
            <sourceDirectory>src/app</sourceDirectory>

            <resources>
                <resource>
                    <directory>src</directory>
                </resource>
                <resource>
                    <directory>e2e</directory>
                </resource>
            </resources>

            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <configuration>
                        <filesets>
                            <fileset>
                                <directory>node_modules</directory>
                            </fileset>
                        </filesets>
                    </configuration>
                </plugin>

                <plugin>
                    <artifactId>exec-maven-plugin</artifactId>
                    <groupId>org.codehaus.mojo</groupId>
                    <executions>
                        <execution>
                            <id>npm install</id>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                            <phase>generate-resources</phase>
                            <configuration>
                                <executable>npm</executable>
                                <arguments>
                                    <argument>install</argument>
                                </arguments>
                            </configuration>
                        </execution>

                        <execution>
                            <id>angular-cli build</id>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                            <phase>compile</phase>
                            <configuration>
                                <executable>ng</executable>
                                <arguments>
                                    <argument>build</argument>
                                    <argument>--prod</argument>
                                    <argument>--output-path</argument>
                                    <argument>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}/${project.version}</argument>
                                </arguments>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </build>

     When finished, the frontend/pom.xml should look like this:

         <?xml version="1.0" encoding="UTF-8"?>
         <project xmlns="http://maven.apache.org/POM/4.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
           <parent>
             <artifactId>angularApp1</artifactId>
             <groupId>com.lessons</groupId>
             <version>1.0-SNAPSHOT</version>
           </parent>
           <modelVersion>4.0.0</modelVersion>

           <artifactId>frontend</artifactId>

           <build>
             <sourceDirectory>src/app</sourceDirectory>

             <resources>
               <resource>
                 <directory>src</directory>
               </resource>
               <resource>
                 <directory>e2e</directory>
               </resource>
             </resources>

             <plugins>
               <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-clean-plugin</artifactId>
                 <configuration>
                   <filesets>
                     <fileset>
                       <!-- Tell mvn clean to also delete the node_modules directory -->
                       <directory>node_modules</directory>
                     </fileset>
                   </filesets>
                 </configuration>
               </plugin>

               <plugin>
                 <artifactId>exec-maven-plugin</artifactId>
                 <groupId>org.codehaus.mojo</groupId>
                 <executions>
                   <execution>
                     <id>npm install</id>
                     <goals>
                       <goal>exec</goal>
                     </goals>
                     <phase>generate-resources</phase>
                     <configuration>
                       <executable>npm</executable>
                       <arguments>
                         <argument>install</argument>
                       </arguments>
                     </configuration>
                   </execution>

                   <execution>
                     <id>angular-cli build</id>
                     <goals>
                       <goal>exec</goal>
                     </goals>
                     <phase>compile</phase>
                     <configuration>
                       <executable>ng</executable>
                       <arguments>
                         <argument>build</argument>
                         <argument>--prod</argument>
                         <argument>--output-path</argument>
                         <argument>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}/${project.version}</argument>
                       </arguments>
                     </configuration>
                   </execution>
                 </executions>
               </plugin>
             </plugins>
           </build>

         </project>


 6.
