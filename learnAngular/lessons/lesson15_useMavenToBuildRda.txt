Lesson:  Use Maven to Build an RDA (so it can be deployed on a BDP)
-------------------------------------------------------------------
Problem:  I can't just deploy my spring-boot-uber-jar to the BDP.
Solution: Add a maven module that will build the RDA zip file
           a) Create a zip file
           b) Add a number of files to the zip file -- e.g., rda.manifest, initial.config, spring-boot-uber-jar, application.yaml


Procedure
---------
 1. Add a maven module called bdp-install to the angularApp1
    a. Open the angularApp1 project in Intellij
    b. Right-click on angularApp1 -> New -> Module
    c. In the "New Module" popup
       1) On the left, select Maven
       2) On the right, click "Create from achetype"
       3) Select maven-archetype-quickstart
       4) Press "Next"
         
    d. In the next popup,
       Parent:  angularApp1
       Name:    bdp-install
       Location ~/intellijProjects/angularApp1/bdp-install
    
    e. In the next popup,
       Use the default for the maven settings
       Press "Finish"
       
       
 2. Adjust the directory structure
    a. Remove the bdp-install/test/                     directory
    b. Remove the bdp-install/src/main/java/            directory
    c. Add    the bdp-install/src/main/assembly/        directory
    d. Add    the bdp-install/src/main/assembly/config/ directory


 3. Insert the production application.yaml 
    a. Right-click on bdp-install/src/main/assembly/config -> New -> File
       Filename:  application.yaml
       
    b. Copy this to your newly-created file:
       NOTE:  Do *NOT* add any leading spaces on the left side

		#######################################################################
		# application.yaml   (used for **PRODUCTION** purposes)
		#
		# This is the application.yaml that will be packaged into the RDA
		#######################################################################
		name: app1
		server.servlet.context-path: /app1

		# Enable cors check because we are *NOT* running in local dev mode
		disable.cors: false

		# Set the Active profile to be prod
		spring.profiles.active: prod

		# Tell Spring to disable DataSource Auto Configuration (so you can run a springboot app without a datasource
		spring.autoconfigure:
		  exclude:
			- org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
			- org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration


		spring.flyway.enabled: true
		spring.flyway.schemas: app1_db


		###########################################################
		# Database Settings
		##########################################################
		app.datasource:
		  driver-class-name: org.postgresql.Driver
		  url: jdbc:postgresql://{{{bdp:postgresql.servers}}}/app1_db
		  username: app1_user
		  password: secret
		  maxPoolSize: 10



 4. Create this file:  initial.config
    a. Right-click on bdp-install/src/main/assembly -> New File
	   Filename:  initial.config
	   
	   
	   WARNING:  There's a bug in the BDP regarding changes to initial.config
	             -- The BDP will not pickup changes to your initial.config
				 -- If you change your appKey (in the rda.manifest) to a different string,
				      Then the BDP will pickup changes in your initial.config
	             
	   
	b. Copy this to the newly-created file:
		[
			{
				"type":  "web-service",
				"name":  "App1",
				"config": {
					"container": {
						"instances": 1,
						"cores":     1,
						"memory":    900
					},
					"app": {
						"command": "java -Xms128m -Xmx1024m -jar webapp/backend-exec.jar --server.port=${HTTPS_PORT}"
					}
				}
			}
		]

	
	
 5. Create this file:  rda.manifest
    a. Right-click on bdp-install/src/main/assembly -> New File
	   Filename:  rda.manifest
	   
	b. Copy this to the newly-created file:
		{
			"name":        "App1",
			"description": "A web application containing....",
			"appKey":      "bogus.app2",
			"version":     "1.0.0-SNAPSHOT",
			"components": [
				{
					"type": "web-service",
					"name": "App1",
					"description": "Some webapp that does something",
					"config": {
						"context": "/app1",
						"files": [
							{
								"src": "webapp"
							},
							{
								"src": "config/application.yaml",
								"template": true
							}
						]
					}

				}
			]
		}

 
 
 6. Create the assembly.xml file  (which tells maven how to assemble the zip file)
    a. Right-click on bdp-install/src/main/assembly -> New File
       Filename:  assembly.xml
    
    b. Copy this to the newly-created file:
		<assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				  xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
			<id>buildRdaZipFile</id>

			<includeBaseDirectory>false</includeBaseDirectory>

			<formats>
				<format>zip</format>
			</formats>

			<fileSets>
				<fileSet>
					<!-- Add to the zip file:  initial.config and rda.manifest -->
					<directory>src/main/assembly</directory>
					<outputDirectory>./</outputDirectory>
					<includes>
						<include>initial.config</include>
						<include>rda.manifest</include>
					</includes>
				</fileSet>

				<fileSet>
					<!-- Add to the zip file:  config/application.yaml -->
					<directory>src/main/assembly/config</directory>
					<outputDirectory>./config</outputDirectory>
					<includes>
						<include>application.yaml</include>
					</includes>
				</fileSet>
			</fileSets>

			<files>
				<file>
					<!-- Add to the zip file:  webapp/backend-exec.jar -->
					<!-- NOTE:  We need this section to include *AND* rename the file to backend-exec.jar -->
					<source>../backend/target/backend-${project.version}-exec.jar</source>
					<outputDirectory>./webapp</outputDirectory>
					<destName>backend-exec.jar</destName>
				</file>
			</files>
		</assembly>

    

 7. Adjust the bdp-install/pom.xml so that 
    -- It's dependent on the backend jar (so the uber jar is built *first*)
    -- It packages it and inserts it into a zip file (*second*)
    
    a. Edit the bdp-install/pom.xml
    b. Replace its contents with this:
		<?xml version="1.0" encoding="UTF-8"?>

		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
			<parent>
				<artifactId>angularApp1</artifactId>
				<groupId>com.lessons</groupId>
				<version>1.0-SNAPSHOT</version>
			</parent>
			<modelVersion>4.0.0</modelVersion>
			<artifactId>bdp-install</artifactId>

			<!-- There is no java code so tell maven to not compile anything -->
			<packaging>pom</packaging>


			<name>bdp-install</name>

			<dependencies>
				<dependency>
					<!-- Build the backend *before* doing this -->
					<groupId>${project.groupId}</groupId>
					<artifactId>backend</artifactId>
					<version>${project.version}</version>
				</dependency>
			</dependencies>

			<profiles>
				<profile>
					<id>buildRda</id>
					<activation>
						<activeByDefault>false</activeByDefault>
					</activation>
					<build>
						<plugins>
							<plugin>
								<artifactId>maven-assembly-plugin</artifactId>
								<version>2.5.2</version>
								<executions>
									<execution>
										<id>create-rda</id>
										<phase>package</phase>
										<goals>
											<goal>single</goal>
										</goals>
									</execution>
								</executions>
								<configuration>
									<appendAssemblyId>false</appendAssemblyId>

									<!-- The final name of the zip file will be webapp.rda.zip -->
									<finalName>webapp.rda</finalName>

									<descriptors>
										<descriptor>src/main/assembly/assembly.xml</descriptor>
									</descriptors>
								</configuration>
							</plugin>
						</plugins>
					</build>
				</profile>
			</profiles>

		</project>

 8. Change the parent pom.xml so that it only runs the bdp-install module when using the -PbuildRda
    a. Edit the angularApp1/pom.xml
	b. Add this section before the closing </project> tag
		 <profiles>
			<profile>
			  <!-- When running the buildRda profile, use all 3 modules -->
			  <id>buildRda</id>

			  <modules>
				<module>backend</module>
				<module>frontend</module>
				<module>bdp-install</module>
			  </modules>
			</profile>

			<profile>
			  <!-- By default, look only at backend and frontend modules -->
			  <!-- Most of the time, developers do not need to run the bdp-install module so disable it with the default profile -->
			  <id>default</id>
			  <activation>
				<activeByDefault>true</activeByDefault>
			  </activation>
			  <modules>
				<module>backend</module>
				<module>frontend</module>
			  </modules>
			</profile>
		  </profiles>

    When finished, the angularApp1.pom should look like this:
		<?xml version="1.0" encoding="UTF-8"?>

		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		  <modelVersion>4.0.0</modelVersion>

		  <groupId>com.lessons</groupId>
		  <artifactId>angularApp1</artifactId>
		  <packaging>pom</packaging>
		  <version>1.0-SNAPSHOT</version>
		  <modules>
			<module>backend</module>
			<module>frontend</module>
		  </modules>

		  <name>angularApp1</name>

		  <properties>
			<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
			<maven.compiler.source>1.8</maven.compiler.source>
			<maven.compiler.target>1.8</maven.compiler.target>
		  </properties>


		  <build>
			<pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
			  <plugins>
				<!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
				<plugin>
				  <artifactId>maven-clean-plugin</artifactId>
				  <version>3.1.0</version>
				</plugin>
				<!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
				<plugin>
				  <artifactId>maven-resources-plugin</artifactId>
				  <version>3.0.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-compiler-plugin</artifactId>
				  <version>3.8.0</version>
				</plugin>
				<plugin>
				  <artifactId>maven-surefire-plugin</artifactId>
				  <version>2.22.1</version>
				</plugin>
				<plugin>
				  <artifactId>maven-jar-plugin</artifactId>
				  <version>3.0.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-install-plugin</artifactId>
				  <version>2.5.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-deploy-plugin</artifactId>
				  <version>2.8.2</version>
				</plugin>
				<!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
				<plugin>
				  <artifactId>maven-site-plugin</artifactId>
				  <version>3.7.1</version>
				</plugin>
				<plugin>
				  <artifactId>maven-project-info-reports-plugin</artifactId>
				  <version>3.0.0</version>
				</plugin>
			  </plugins>
			</pluginManagement>
		  </build>

		  <profiles>
			<profile>
			  <!-- When running the buildRda profile, use all 3 modules -->
			  <id>buildRda</id>

			  <modules>
				<module>backend</module>
				<module>frontend</module>
				<module>bdp-install</module>
			  </modules>
			</profile>

			<profile>
			  <!-- By default, look only at backend and frontend modules -->
			  <!-- Most of the time, developers do not need to run the bdp-install module so disable it with the default profile -->
			  <id>default</id>
			  <activation>
				<activeByDefault>true</activeByDefault>
			  </activation>
			  <modules>
				<module>backend</module>
				<module>frontend</module>
			  </modules>
			</profile>
		  </profiles>
		</project>

	
 9. Build the RDA package
    unix> cd ~/intellijProjects/angularApp1
    unix> mvn clean package -PbuildRda -Pprod   # Apply both the buildRda and prod profiles
    -- This should create a file:  bdp-install/target/webapp.rda.zip
	
 
10. Verify that your zip file has the correct contents
    unix> unzip -l bdp-install/target/webapp.rda.zip
    
	Archive:  bdp-install/target/webapp.rda.zip
	  Length      Date    Time    Name
	---------  ---------- -----   ----
			0  07-08-2020 21:22   webapp/
	 30160957  07-08-2020 21:22   webapp/backend-exec.jar
		  389  07-08-2020 18:55   initial.config
		  845  07-08-2020 18:52   rda.manifest
			0  07-08-2020 21:22   config/
		 1158  07-08-2020 18:30   config/application.yaml
	---------                     -------
	 30163349                     6 files

     
       
    
    
    
