Lesson:  Deploy this webapp to the BDP
--------------------------------------
Problem:  I can't just deploy my spring-boot-uber-jar to the BDP.
Solution: Add a maven module that will build the RDA zip file
           a) Create a zip file
           b) Add a number of files to the zip file -- e.g., rda.manifest, initial.config, spring-boot-uber-jar, application.yaml


Procedure
---------
 1. Add a maven module called bdp-install to the angularApp1
    a. Open the angularApp1 project in Intellij
    b. Right-click on angularApp1 -> New -> Module
    c. In the "New Module" popup
       1) On the left, select Maven
       2) On the right, click "Create from achetype"
       3) Select maven-archetype-quickstart
       4) Press "Next"
         
    d. In the next popup,
       Parent:  angularApp1
       Name:    bdp-install
       Location ~/intellijProjects/angularApp1/bdp-install
    
    e. In the next popup,
       Use the default for the maven settings
       Press "Finish"
       
       
 2. Adjust the directory structure
    a. Remove the bdp-install/test/                     directory
    b. Remove the bdp-install/src/main/java/            directory
    c. Add    the bdp-install/src/main/assembly/        directory
    d. Add    the bdp-install/src/main/assembly/config/ directory


 3. Insert the production application.yaml 
    a. Right-click on bdp-install/src/main/assembly/config -> New -> File
       Filename:  application.yaml
       
    b. Copy this to your newly-created file:
       NOTE:  Do *NOT* add any leading spaces on the left side
       
        #######################################################################
        # application.yaml   (used for **PRODUCTION** purposes)
        #
        # This is the application.yaml that will be packaged into the RDA 
        #######################################################################
        name: app1
        server.servlet.context-path: /app1
        server.port: 8080

        # Enable cors check because we are *NOT* running in local dev mode
        disable.cors: false

        # Set the Active profile to be prod
        spring.profiles.active: prod

        # Tell Spring to disable DataSource Auto Configuration (so you can run a springboot app without a datasource
        spring.autoconfigure:
          exclude:
            - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
            - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration


        spring.flyway.enabled: true
        spring.flyway.schemas: app1_db


        ###########################################################
        # Database Settings
        ##########################################################
        app.datasource:
          driver-class-name: org.postgresql.Driver
          url: jdbc:postgresql://localhost:5432/app1_db
          username: app1_user
          password: secret
          maxPoolSize: 10


 4. Create the assembly.xml file  (which tells maven how to assemble the zip file)
    a. Right-click on bdp-install/src/main/assembly -> New File
       Filename:  assembly.xml
    
    b. Copy this to the newly-created file:
            <assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
            <id>buildRdaZipFile</id>
                <includeBaseDirectory>false</includeBaseDirectory>
                <formats>
                    <format>zip</format>
                </formats>
                <dependencySets>
                    <dependencySet>
                        <useProjectArtifact>false</useProjectArtifact>
                        <includes>
                            <include>org.springframework:spring-jdbc:jar</include>
                        </includes>
                        <useTransitiveFiltering>true</useTransitiveFiltering>
                        <outputDirectory>/</outputDirectory>
                    </dependencySet>
                </dependencySets>
                <fileSets>
                    <fileSet>
                        <directory>./config/</directory>
                        <useDefaultExcludes>true</useDefaultExcludes>
                        <outputDirectory>./</outputDirectory>
                        <includes>
                            <include>*.ksh</include>
                            <include>*.properties</include>
                        </includes>
                    </fileSet>
                </fileSets>
            </assembly>
    
    

 5. Adjust the bdp-install/pom.xml so that 
    -- It's dependent on the backend jar (so the uber jar is built *first*)
    -- It packages it and inserts it into a zip file (*second*)
    
    a. Edit the bdp-install/pom.xml
    b. Replace its contents with this:
        <?xml version="1.0" encoding="UTF-8"?>

        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <parent>
                <artifactId>angularApp1</artifactId>
                <groupId>com.lessons</groupId>
                <version>1.0-SNAPSHOT</version>
            </parent>
            <modelVersion>4.0.0</modelVersion>

            <artifactId>bdp-install</artifactId>

            <name>bdp-install</name>

            <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>2.5.2</version>
                        <configuration>
                            <appendAssemblyId>false</appendAssemblyId>
                            <finalName>CleanupScripts</finalName>
                            <descriptors>
                                <descriptor>${basedir}/src/main/assembly/assembly.xml</descriptor>
                            </descriptors>
                        </configuration>
                        <executions>
                            <execution>
                                <id>create-archive</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </project>


 6. Try it out:
    unix> cd ~/intellijProjects/angularApp1
    unix> mvn clean package -PbuildRda -Pprod   # Apply the buildRda and prod profiles
 
 
 7. Verify that your zip file has the correct contents
    unix> unzip -l bdp-install/target/file.zip
    
    -- You should see this:
         rda.manifest
         initial.config
         config/application.yaml
         webapp/my-uber-exec.jar
     
       
    
    
    
