Lesson:  Improve the Angular lookup.service.ts Service by Making a REST Call
----------------------------------------------------------------------------
Problem:  The add-report page needs to invoke a REST call to get the list of priorities
          This information is needed in the priorities dropdown
          This data is needed for the page to operate


References
----------
https://medium.com/angular-in-depth/angular-question-rxjs-subscribe-vs-async-pipe-in-component-templates-c956c8c0c794
https://alligator.io/angular/async-pipe/
https://www.concretepage.com/angular-2/angular-2-async-pipe-example



 Approach 1: Use routes to make the lookup call **synchronous**
	- The REST call is synchronous
	- The entire page view *WAITS* for the REST call to resolve
	- No spinner
    NOTE:  This approach is considered poor practice
	

 Approach 2: Subscribe to an Observable from ngOnInit()
    a. The add-report.component.ts has a public list of priorities
    b. Inject the lookupService
	c. Have The add-report.component.ts ngOnInit() method will subscribe to the REST call
	d. Add a flag indicating the REST call is running
	e. Clear the flag when the REST call finishes
	f. Add a method in ngOnDestroy() to cleanup

	+ The REST call is asynchronous
    + We can show a spinner while the REST call is running 
	- Need to unsubscribe from the observable at the end of the component life-cycle to avoid memory leaks
	- Subscribing to an observable manually in ngOnInit() does not work with OnPush change detection [out of the box]
	- Complex to implement


 Approach 3: Use Async Pipe (to subscribe to observables)
    + The REST call is asynchronous
	+ Automatically clean-up:  No need to unsubscribe
	+ We can show a spinner
    + Async Pipe makes the rendering of data from observable and promise easier.
    + For promises, it automatically calls the then method.
    + For observables, it automatically calls subscribe and unsubscribe.
	+ Less complex than approach 2 because
	+ Works with OnPush change detection
	- Objects have to be unwrapped in the template using *ngIf="something$ | async as something" syntax. 
	- Properties unwrapped in the template using *ngIf or *ngFor are *NOT* accessible in the component's methods. So, we have pass these properties in to the methods from the template.  This splits the logic between the template and the component itself
	
	


