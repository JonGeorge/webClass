Lesson:  Change the lookup.service.ts so that invokes a REST call



Procedure
---------
 1. Add the HttpClientModule to app.module.ts
        imports: [ ...
                    HttpClientModule,
                    ...
                 ]
                 
                 
 2. Change the LookupService so that it injects the httpClient and calls the REST service
    a. Edit the lookup.service.ts
    b. Change the lookup.service.ts to this:
        import { Injectable } from '@angular/core';
        import {LookupDTO} from "../models/lookup.DTO";
        import {HttpClient} from "@angular/common/http";
        import {environment} from "../../environments/environment";
        import {Observable} from "rxjs";

        @Injectable({
          providedIn: 'root'
        })
        export class LookupService {

          constructor(private httpClient: HttpClient) { }

          /*
           * Return a list of LookupDTO objects that correspond to the passed-in type name -- e.g, 'priority'
           */
          public getLookupWithType(aType: string): Observable<LookupDTO[]>  {

            const restUrl = environment.baseUrl + '/api/lookups/' + aType;

            return this.httpClient.get <LookupDTO[]>(restUrl);
          }
        }



Now, your frontend page component can invoke this REST endpoint with something like this:
NOTE:  Make sure your page implements OnInit and OnDestroy

		public priorities: LookupDTO[];

		
		public ngOnInit(): void {
		
				// Invoke the REST end point
				this.lookupService.getLookupWithType("priority").subscribe(data => {
					// The REST call finished successfully
					
					// Get the data from the REST call
					this.priorities = data;
				  },
				  
				 (err) => {
					// REST Call call finished with an error
					console.error(err);

				  }).add( () => {
					// Code to run after the REST call finished
					
					// Unset the flag so that the dropdown appears
					console.log('rest call tear down code');
				})


		}  // end of method



Next:  Remove the memory leak
 		private lookupSubscription: Subscription;
		
		public ngOnInit(): void {
		
				// Invoke the REST end point
				this.lookupSubscription = this.lookupService.getLookupWithType("priority").subscribe(data => {
					// The REST call finished successfully
					
					// Get the data from the REST call
					this.priorities = data;
				  },
				  
				 (err) => {
					// REST Call call finished with an error
					console.error(err);

				  }).add( () => {
					// Code to run after the REST call finished
					
					// Unset the flag so that the dropdown appears
					console.log('rest call tear down code');
				})


		}  // end of method
   
   
        public ngOnDestroy(): void {
		
		    if (this.lookupSubscription) {
			   // Unsubscribe from this subscription so we don't have a memory leak
			   this.lookupSubscription.unsubscribe();
			}
			
		}
