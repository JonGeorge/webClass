Lesson: Configure your ElasticSearch Service so it works on the BDP
-------------------------------------------------------------------



     
Procedure
---------
 1. Adjust the mapping so that it has security in it
    a. Edit src/main/resources/reports.mapping.json
  	b. Add this right after the "mappings": {
		  "security": {
			  "_meta": {
				"acl": {
				  "data_read":      "role:ES_READER",
				  "data_write":     "role:ES_READER|role:ES_WRITER",
				  "metadata_read":  "role:ES_READER",
				  "metadata_write": "role:ES_READER|role:ES_WRITER"
				}
			  }
			},
	
	   When finished, the reports.mapping.json should look like this:
		{
		  "settings": {
			"analysis": {
			  "analyzer" : {
				"my_ngram_analyzer" : {
				  "tokenizer" : "my_ngram_tokenizer",
				  "filter": ["lowercase"]
				}
			  },
			  "tokenizer" : {
				"my_ngram_tokenizer" : {
				  "type" : "ngram",
				  "min_gram" : "1",
				  "max_gram" : "75",
				  "token_chars": [ ]
				}
			  },
			  "normalizer": {
				"case_insensitive_normalizer": {
				  "type": "custom",
				  "char_filter": [],
				  "filter": [ "lowercase", "asciifolding" ]
				}
			  }
			},
			"max_result_window": 500000,
			"refresh_interval": "1s"
		  },

		  "mappings": {
			"security": {
			  "_meta": {
				"acl": {
				  "data_read":      "role:ES_READER",
				  "data_write":     "role:ES_READER|role:ES_WRITER",
				  "metadata_read":  "role:ES_READER",
				  "metadata_write": "role:ES_READER|role:ES_WRITER"
				}
			  }
			},
			"record": {
			  "dynamic": "strict",
			  "properties": {
				"id": {
				  "type": "integer",
				  "ignore_malformed": false
				},
				"description": {
				  "type": "text",
				  "include_in_all": true
				},
				"display_name": {
				  "type": "text",
				  "include_in_all": true,
				  "fields": {
					"raw": {
					  "type": "keyword"
					},
					"sort": {
					  "type": "keyword",
					  "normalizer": "case_insensitive_normalizer"
					},
					"filtered": {
					  "type": "text",
					  "analyzer": "my_ngram_analyzer"
					}
				  }
				},
				"priority": {
				  "type": "text",
				  "include_in_all": true,
				  "fields": {
					"raw": {
					  "type": "keyword"
					},
					"sort": {
					  "type": "keyword",
					  "normalizer": "case_insensitive_normalizer"
					},
					"filtered": {
					  "type": "text",
					  "analyzer": "my_ngram_analyzer"
					}
				  }
				}
			  }
			}
		  }
		}



 2. Grant the ES_WRITER role to all of the data nodes on ES
    a. Get a list of all data nodes
	   ssh to the puppet master
	   unix> sudo -s
	   unix> /var/bdp/bin/bdp_describe role datanodes
	   
	   You should see the following:
		{
			"datanodes": [
				"testdn02",
				"testdn01"
			]
		}

    b. Get the fullname of one of the nodes
	   unix> citadel user:list | grep -i testdn
		testdn01.test.com
		testdn02.test.com
	   
	   
	c. Grant the ES_WRITER role to all of data nodes
	   Using this format:  
	      citadel attribute:add -u <name of datanode1 -a ROLE:ES_WRITER
		 
	   unix> citadel attribute:add -u testdn01.test.com  -a ROLE:ES_WRITER
	   unix> citadel attribute:add -u testdn02.test.com -a ROLE:ES_WRITER
	
	
 
 3. Add ElasticSearch settings to production template application.yaml
    a. Edit bdp-install/src/main/assembly/config/application.yaml
	b. Add this section to the top:
	
		###########################################################
		# ElasticSearch Settings
		##########################################################
		es:
		  url: {{{bdp:proxy.url/elasticsearch}}}
		  ssl_enabled: true
		  client-p12: /etc/pki/java/keystore.p12
		  client-p12-password: changeit
		  trust-store: {{{bdp:host.pki.truststore.jks}}}
		  trust-store-password: {{{bdp:host.pki.truststore.password}}}
		  trust-store-type: JKS 
 
 
 4. Add code to generate SSL Conext
 
 
 5. Package the RDA
 6. Deploy to the BDP
 7. Try it out on the BDP
 

