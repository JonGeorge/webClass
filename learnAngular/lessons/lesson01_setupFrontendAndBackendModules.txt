Lesson 6: Add Spring Boot to the Structure
------------------------------------------
There are two approaches for how to structure the Angular code and Spring Boot java code
 1) Create one maven module that holds both the front-end and back-end
 2) Create two maven modules: One holds the front-end, another holds the back-end

The best approach should be the approach that lets you
 A) Debug the java code on the back-end
 B) Debug the typescript code on the front-end
 C) Let front-end developers use "ng serve"


References
----------
https://sterl.org/2019/02/angular-spring-boot/
https://shekhargulati.com/2017/11/08/a-minimalist-guide-to-building-spring-boot-angular-5-applications/
https://dzone.com/articles/building-a-web-app-using-spring-boot-angular-6-and
https://blog.jdriven.com/2016/12/angular2-spring-boot-getting-started/
https://keepgrowing.in/java/springboot/integrate-angular-with-a-spring-boot-project/
https://stackoverflow.com/questions/42393211/how-can-i-serve-static-html-from-spring-boot
https://gist.github.com/pavankjadda/8d17d697f86c1b80cc06c39cec74c87e
https://stackoverflow.com/questions/24661289/spring-boot-not-serving-static-content


Reasons to keep the webapp as one module
----------------------------------------
 + Simpler to debug:  Just kick off the webapp's main class and it's running
 - Not sure if you can debug the typescript this way...?


Reasons to split the webapp into two modules
--------------------------------------------
 + Front-end people can still use "ng serve" for quick development
 + You can still run the entire webapp



General Approach
----------------
 A) Create the angularApp1/frontend directory with an angular app
 B) The backend maven module has a dependency on the frontend jar file
 C) The backend listens on http://localhost:8080/app1
 D) The frontend is built with base href of /app1   (so all frontend requests add /app1)
 E) The frontend is built and written to dist/static
 F) All REST endpoints start with /api
 G) All angular routes start with /page
 H) The backend has a default listener on "/" and "/page/**" to take users to index.html
    -- So, if a user refreshes the page, the backend sends the user to index.html
    -- And, then the front-end forwards the user to the correct page view
 I) Unblock cors policy so that the angular frontend on localhost:4200 is allowed to make calls to localhost:8080
 J) Increase Intellij Memory settings (so that debugging is responsive)
    In Intellij, Pull Help -> Change Memory Settings
    Set max heap size to 4096M
    Press "Save and Restart"







             Part 2: Create the frontend from command-line



					 2. Create the frontend project as a "Static Web" project
						a. Right-click on angularApp1 -> New Module....

						b. On the left, select "Static Web"
						   On the right, select Angular CLI
						   Press Next

						   NOTE:  This will provide the Run / Edit Configurations to debug the Angular application

						c. In the next popup
						   Module name:  frontend
						   Node interpreter:  ~/.nvm/versions/node/V12.5.0/bin/node    # Or whatever version of node you are using
						   Press Finish

						   NOTE:  This will run


Part 1:  Create the parent angularApp1 in IntelliJ as a "Maven" project
-----------------------------------------------------------------------
 1. Create the parent project as a "Maven" project
	a. Startup Intellij
	b. Pull File -> New Project
	c. Select "Maven"
	d. Check "Create from archetype"
	   -- Select maven-archetype-quickstart
	   -- Press Next

	e. In the next popup
	   Name:      angularApp1
	   Location:  ~/intellijProjects/angularApp1

	   In the Artifact Coordinates:
		 GroupId:     com.lesson
		 ArtifactId:  angularApp1
		 Version:     1.0-SNAPSHOT
	   Press Next

	f. In the next popup:
	   Choose the location of your Maven
	   Press Finish



Part 2:  Create the "frontend" angular app using the command-line
-----------------------------------------------------------------
 1. Use nvm to install node version 12.5
    [see learnNode / howToInstallNodeVersionManager.txt]

 2. Verify that node is 12.5.0 or higher
    NOTE:  Angular8 requires node 12.5.0 or higher
    unix> node --version
    v12.5.0

 3. Install or Upgrade the angular global command line tool to Angular 9
    NOTE:  It is the angular command line tool that determines the version of Angular
    [see learnNode / howToUpdateAngularCLI.txt]

 4. Create the project directory:  angularApp1
    unix> cd ~/intellijProjects
    unix> mkdir angularApp1

 5. Create the angular application (within the frontend directory)
    unix> cd ~/intellijProjects/angularApp1
    unix> ng new frontend --strict=true       # The strict=true enabled more strict TypeScript
    Would you like to use routes?                  Y
    Which stylesheet format would you like to use? CSS

 6. Add Angular Material to your frontend
    unix> cd frontend
    unix> ng add @angular/material     # NOTE: Make sure you are in the angularApp1/frontend project when running this command

    Choose a prebuilt theme:                           Deep Purple/Amber
    Set up global Angular Material typography styles?  Y
    Set up browser animations?                         Y

 7. Start-up the frontend so it listens on port 4200
    unix> cd ~/intellijProjects/angularApp1/frontend
    unix> ng serve --port 4200

 8. Verify the frontend is up
    a. Startup a browser
    b. Go to http://localhost:4200
       -- You should see "frontend app is running!" at the top of the page
    c. Press Control-C to kill the frontend





Part 2: Open the frontend project in Intellij
---------------------------------------------
 1. Startup Intellij
 2. Pull File -> Open
 3. Select ~/intellijProjects/AngularApp1

 4. Delete the angularApp1/src directory

 4. Replace the parent pom.xml with this:

        <?xml version="1.0" encoding="UTF-8"?>

        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>

          <groupId>com.lessons</groupId>
          <artifactId>angularApp1</artifactId>
          <packaging>pom</packaging>
          <version>1.0-SNAPSHOT</version>

          <name>angularApp1</name>

          <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
          </properties>


          <build>
            <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
              <plugins>
                <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
                <plugin>
                  <artifactId>maven-clean-plugin</artifactId>
                  <version>3.1.0</version>
                </plugin>
                <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
                <plugin>
                  <artifactId>maven-resources-plugin</artifactId>
                  <version>3.0.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <version>3.8.0</version>
                </plugin>
                <plugin>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>2.22.1</version>
                </plugin>
                <plugin>
                  <artifactId>maven-jar-plugin</artifactId>
                  <version>3.0.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-install-plugin</artifactId>
                  <version>2.5.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-deploy-plugin</artifactId>
                  <version>2.8.2</version>
                </plugin>
                <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
                <plugin>
                  <artifactId>maven-site-plugin</artifactId>
                  <version>3.7.1</version>
                </plugin>
                <plugin>
                  <artifactId>maven-project-info-reports-plugin</artifactId>
                  <version>3.0.0</version>
                </plugin>
              </plugins>
            </pluginManagement>
          </build>
        </project>



 5. Create the frontend/pom.xml
    unix> cd ~/intellijProjects/angularApp1
    unix> vi frontend/pom.xml

    <?xml version="1.0" encoding="UTF-8"?>
             <project xmlns="http://maven.apache.org/POM/4.0.0"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
               <parent>
                 <artifactId>angularApp1</artifactId>
                 <groupId>com.lessons</groupId>
                 <version>1.0-SNAPSHOT</version>
               </parent>
               <modelVersion>4.0.0</modelVersion>

               <artifactId>frontend</artifactId>
               <packaging>jar</packaging>

               <build>
                 <resources>
                   <resource>
                     <directory>dist</directory>
                   </resource>
                 </resources>

                 <plugins>
                   <plugin>
                     <artifactId>maven-clean-plugin</artifactId>
                     <version>2.4.1</version>
                     <configuration>
                       <filesets>
                         <fileset>
                           <!-- Tell mvn clean to remove the "dist" directory -->
                           <directory>dist</directory>
                           <includes>
                             <include>**</include>
                           </includes>
                           <followSymlinks>false</followSymlinks>
                         </fileset>
                       </filesets>
                     </configuration>
                   </plugin>


                   <plugin>
                     <groupId>com.github.eirslett</groupId>
                     <artifactId>frontend-maven-plugin</artifactId>
                     <version>1.3</version>

                     <configuration>
                       <!-- Angular 8 requires node of 12.5 or later -->
                       <nodeVersion>v12.5.0</nodeVersion>
                       <npmVersion>6.9.0</npmVersion>
                     </configuration>

                     <executions>
                       <execution>
                         <id>install node and npm</id>
                         <goals>
                           <goal>install-node-and-npm</goal>
                         </goals>
                       </execution>

                       <execution>
                         <id>npm install</id>
                         <goals>
                           <goal>npm</goal>
                         </goals>
                       </execution>

                       <execution>
                         <id>npm run build</id>
                         <goals>
                           <goal>npm</goal>
                         </goals>
                         <configuration>
                           <arguments>run build</arguments>
                         </configuration>
                       </execution>

                       <execution>
                         <id>prod</id>
                         <goals>
                           <goal>npm</goal>
                         </goals>
                         <configuration>
                           <arguments>run-script build</arguments>
                         </configuration>
                         <phase>generate-resources</phase>
                       </execution>
                     </executions>
                   </plugin>
                 </plugins>

               </build>
             </project>

 6. Right-click on frontend/pom.xml -> Add as Maven Project

 7. Setup IntelliJ debugging
    Pull Run / Edit Configuration
    Press +  ->  NPM




 3. Open the angularApp1 project in Intellij
    a. Startup Intellij
    b. Pull File / Open
    c. Browse to intellijProjects/angularApp1


 4. Tell Intellij that is a maven project
     a. Right-click on pom.xml -> Add as Maven Project
     a. Right-click on frontend/pom.xml -> Add as Maven Project


 5. Verify that the mvn clean install runs "npm install"
    unix> cd ~/intellijProjects/angularApp1/frontend
    unix> rm -rf node_modules
    unix> mvn clean install
    -- You should see the frontend/node_modules/ directory

 6. Configure Angular debugging within Intellij
    a. Create the "Angular CLI Server" option
       Pull Run / Edit Configurations
       Select +   -> NPM

       In the window on the right:
         Name:              Angular CLI Server
         Package.json:      ~/intellijProjects/angularApp1/frontend/package.json
         Command:           run
         Scripts:           start
         Arguments:
         Node interpreter:  ~/.nvm/versions/node/v12.5.0/bin/node
         Node options:
         Package manager:   Project
         Environment

       Press OK


    b. Create the "Angular App" option
       Pull Run / Edit Configuration
       Select +   ->  JavaScript Debug

       In the window on the right:
          Name:           Angular Application
          URL:            http://localhost:4200

          Uncheck   "Ensure breakpoints are detected when loading scripts"

       Press OK

 7. Set a breakpoint in app.component.ts on this line:
         title = 'frontend';

 8. Verify that the debugger works
    a. Select "Angular CLI Server" and press the "Run" icon
       -- Wait for it to finish

    b. Select "Angular Application" and press the "Debug" icon"
       -- It should startup a Chrome browser connected to http://localhost:4200
       -- You should hit your breakpoint
       -- Press the "Continue" button

    c. If it works, Pull Run / Stop ALl








Press Apply


    b. Pull Run -> Angular CLI Server

    c. Open a browser and connect
    d. Go to http://localhost:4200
          -- You should see your webapp

    e. Pull Run -> Stop -> Stop All



Part 2:  Configure Spring Boot (within the "backend" maven module)
------------------------------------------------------------------
 1. Create this Maven module:  backend
    NOTE:  This maven module will hold all of the Java/SpringBoot code
    a. Right-click on angularApp1 -> New Module:

        On the left, select Maven
        Click "Create from archetype"
        Select maven-archetype-quickstart
        Press "Next"

        ArtifactId:  backend
        Press "Next"

        Module name:  backend



 2. Create these directories:
    angularApp1/backend/src/main/resources
    angularApp1/backend/src/test/resources


 3. Add Spring Boot and Logback Dependencies to the backend/pom.xml

    a. Replace the contents of the backend/pom.xml with this:

        <?xml version="1.0" encoding="UTF-8"?>

        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>

          <groupId>com.lessons</groupId>
          <artifactId>backend</artifactId>
          <version>1.0-SNAPSHOT</version>

          <name>backend</name>

          <dependencyManagement>
            <!-- Set Spring Boot Dependencies -->
            <dependencies>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.2.1.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
              </dependency>
            </dependencies>
          </dependencyManagement>

          <dependencies>

            <dependency>
              <!-- Include the front-end as a dependency so the front-end is compiled *BEFORE* the backend is compiled -->
              <groupId>com.lessons</groupId>
              <artifactId>frontend</artifactId>
              <version>${project.version}</version>
            </dependency>

            <dependency>
              <!-- Spring Boot Web -->
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-web</artifactId>

              <exclusions>
                <exclusion>
                  <!-- Remove Tomcat from Spring Boot -->
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>

                <exclusion>
                  <!-- Remove logging from spring as we will use logback -->
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
              </exclusions>
            </dependency>

            <dependency>
              <!-- Add Dependency for the Undertow App Server -->
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-undertow</artifactId>

              <exclusions>
                <exclusion>
                  <!-- Remove logging from undertow as we will use logback -->
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
              </exclusions>
            </dependency>

            <dependency>
              <!-- Send logging from Java Common Logging to SLF4J -->
              <groupId>org.slf4j</groupId>
              <artifactId>jcl-over-slf4j</artifactId>
              <version>1.7.5</version>
            </dependency>

            <dependency>
              <!-- SLF4J will use Logback-classic as its logging implementation -->
              <groupId>ch.qos.logback</groupId>
              <artifactId>logback-classic</artifactId>
              <version>1.2.3</version>
            </dependency>

            <dependency>
              <groupId>org.springframework</groupId>
              <artifactId>spring-jdbc</artifactId>
              <version>5.2.1.RELEASE</version>
            </dependency>

            <dependency>
              <groupId>org.springframework</groupId>
              <artifactId>spring-web</artifactId>
              <version>5.2.1.RELEASE</version>
            </dependency>

            <dependency>
              <!-- Implementation for converting objects to JSON -->
              <groupId>com.fasterxml.jackson.core</groupId>
              <artifactId>jackson-databind</artifactId>
              <version>2.9.3</version>
            </dependency>

            <dependency>
              <!-- Add the dependency for your postgreSQL JDBC driver -->
              <groupId>org.postgresql</groupId>
              <artifactId>postgresql</artifactId>
              <version>42.1.4</version>
            </dependency>

            <dependency>
              <!-- Hikari Data Source / JDBC Connection Pool -->
              <groupId>com.zaxxer</groupId>
              <artifactId>HikariCP</artifactId>
              <version>2.6.0</version>
            </dependency>

            <dependency>
              <groupId>junit</groupId>
              <artifactId>junit</artifactId>
              <version>4.12</version>
              <scope>test</scope>
            </dependency>
          </dependencies>

          <build>

            <plugins>
              <plugin>
                <!-- This plugin provides the tools needed to repackage the Spring Boot JAR into a runnable JAR
                     Run this command to generate the runnable Spring Boot Jar
                        mvn clean package  *or*
                        mvn clean package spring-boot:repackage
                 -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                  <addResources>true</addResources>
                </configuration>

                <executions>
                  <execution>
                    <goals>
                      <goal>repackage</goal>
                    </goals>
                    <configuration>
                      <classifier>exec</classifier>
                    </configuration>
                  </execution>
                </executions>

              </plugin>
            </plugins>
          </build>

        </project>


 4. Verify that the top pom.xml has both modules listed like this:
    a. Look at the angularApp1/pom.xml

    b. You should see this:
            <modules>
              <module>frontend</module>
              <module>backend</module>
            </modules>


 5. Setup logback in the springboot application
    a. Right-click on angularApp1/backend/src/main/resources -> New -> File
       filename:  logback.xml
       Press OK

    b. Copy this into your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

            <?xml version="1.0" encoding="windows-1252" ?>
            <configuration debug="false">
                <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                    <encoder>
                        <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                    </encoder>
                </appender>

                <logger name="org.springframework" level="INFO" additivity="false">
                    <appender-ref ref="CONSOLE"/>
                </logger>

                <logger name="com.lessons" level="DEBUG" additivity="false">
                    <appender-ref ref="CONSOLE"/>
                </logger>

                <root level="DEBUG">
                    <appender-ref ref="CONSOLE"/>
                </root>
            </configuration>


 6. Delete the App.java
    a. Right-click on backend/src/main/java/com/lessons/App -> Delete

 7. Create the Application.java class with a logger
    a. Right-click on backend/src/main/java/com/lessons -> New Java Class
       Class Name:  Application

    b. Replace the contents of Application.java with this:

        package com.lessons;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;

        /**
         * Main Application
         **/
        public class Application {
          private static final Logger logger = LoggerFactory.getLogger(Application.class);

          public static void main(String[] args)
          {
            logger.debug("main() started.");

            logger.debug("main() finished.");
          }
        }


 8. Verify logging is working
    a. Set a breakpoint in your logger.debug() line by clicking in the margin
    b. Right-click on main() -> Debug 'App.main'
    c. Press F9 to continue
       You should see this in the console
        02/02/2018 22:45:22 DEBUG com.lessons.Application main() started.
        02/02/2018 22:45:22 DEBUG com.lessons.Application main() finished.


 9. Update the Application.java class so it starts a Spring-Boot webapp
    a. Replace the Application.java contents with this:

        package com.lessons;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.boot.SpringApplication;
        import org.springframework.boot.autoconfigure.SpringBootApplication;

        /**
         * Main Application
         **/
        @SpringBootApplication
        public class Application
        {
            private static final Logger logger = LoggerFactory.getLogger(Application.class);


          /**
           * Web Application Starts Here
           **/
           public static void main( String[] args )
            {
                logger.debug("main() started.");

                // Start up Spring Boot
                SpringApplication.run(Application.class, args);

                logger.debug("WebApp is Up.");
            }
        }


    b. Create this file:  application.yaml
       1) Right-click on angularApp1/backend/src/main/resources -> New -> File
          Filename:  application.yaml

       2) Copy this to your new file:
            ##########################################################
            # application.yaml   (used for development purposes)
            ##########################################################
            name: app1
            server.servlet.context-path: /app1
            server.port: 8080

           NOTE:  Make sure there are no leading spaces on any of these lines



10. Add these dependencies to your backend/pom.xml

         <dependency>
             <groupId>org.springframework</groupId>
             <artifactId>spring-jdbc</artifactId>
             <version>5.2.1.RELEASE</version>
         </dependency>

         <dependency>
             <groupId>org.springframework</groupId>
             <artifactId>spring-web</artifactId>
             <version>5.2.1.RELEASE</version>
         </dependency>

         <dependency>
             <!-- Implementation for converting objects to JSON -->
             <groupId>com.fasterxml.jackson.core</groupId>
             <artifactId>jackson-databind</artifactId>
             <version>2.9.3</version>
         </dependency>




11. Create this java class:  HomeController
    a. Right-click on backend/src/main/java/com/lessons -> New Package
       Package Name:  controllers

    b. Right-click on backend/src/main/java/com/lessons/controllers -> New Java Class
       Name: HomeController

    c. Copy this to your new class

            package com.lessons.controllers;

            import org.springframework.stereotype.Controller;
            import org.springframework.web.bind.annotation.RequestMapping;
            import org.springframework.web.bind.annotation.RequestMethod;

            @Controller
            public class HomeController {

              @RequestMapping(value = {"/", "/page/**"}, method = RequestMethod.GET)
              public String home() {

                // This method handles two cases:
                // Case 1: The user goes to http://localhost:8080/app1  --> Take users to the index.html
                // Case 2: The user goes to http://localhost:8080/app1/page/addReport and presses refresh --> Take users to the index.html
                return "forward:/index.html";

              }

            }



12. Create this java class:  BogusController
    a. Right-click on backend/src/main/java/com/lessons/controllers -> New Java Class
       Name: BogusController

    b. Copy this to your new class

             package com.lessons.controllers;


             import org.slf4j.Logger;
             import org.slf4j.LoggerFactory;
             import org.springframework.http.HttpStatus;
             import org.springframework.http.MediaType;
             import org.springframework.http.ResponseEntity;
             import org.springframework.stereotype.Controller;
             import org.springframework.web.bind.annotation.RequestMapping;
             import org.springframework.web.bind.annotation.RequestMethod;
             import java.text.DateFormat;
             import java.text.SimpleDateFormat;
             import java.util.Date;

             @Controller("com.lessons.controllers.BogusController")
             public class BogusController {
               private static final Logger logger = LoggerFactory.getLogger(BogusController.class);


               /*************************************************************************
                * REST endpoint /api/time
                *
                * @return a plain-old string with the system time (not JSON)
                *************************************************************************/
               @RequestMapping(value = "/api/time", method = RequestMethod.GET, produces = "application/json")
               public ResponseEntity<?> getDateTime() {
                 logger.debug("getDateTime() started.");

                 // Get the date/time
                 DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                 Date date = new Date();
                 String dateTime = dateFormat.format(date);

                 // Return the date/time string as plain-text
                 return ResponseEntity
                   .status(HttpStatus.OK)
                   .contentType(MediaType.TEXT_PLAIN)
                   .body(dateTime);
               }
             }

13. Create this java class:  WebMvcConfig
    NOTE:  This tellsell Spring boot to look for the frontend static html inside a jar
    a. Right-click on backend/src/main/java/com/lessons -> New Package
       Package Name: config

    b. Right-click on backend/src/main/java/com/lessons/config -> New Java Class
       Class Name:  WebMvcConfig

    c. Copy this to the newly-created class

          package com.lessons.config;

          import org.springframework.beans.factory.annotation.Value;
          import org.springframework.context.annotation.Configuration;
          import org.springframework.web.servlet.config.annotation.CorsRegistry;
          import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
          import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;



          @Configuration
          public class WebMvcConfig extends WebMvcConfigurerAdapter {

            @Value("${disable.cors}")
            private boolean disableCors;

            private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {
              "classpath:/META-INF/resources/", "classpath:/resources/",
              "classpath:/static/", "classpath:/public/" };

            /**
             * Added to allow spring boot to find html content in the frontend depency jar
             * @param registry
             */
            @Override
            public void addResourceHandlers(ResourceHandlerRegistry registry) {
              registry.addResourceHandler("/**")
                .addResourceLocations(CLASSPATH_RESOURCE_LOCATIONS);
            }


            /**
             * Allow CORS requests to come from anywhere
             * -- Should be used for local debugging only
             * @param registry
             */
            @Override
            public void addCorsMappings(CorsRegistry registry) {
              if (disableCors) {
                registry.addMapping("/**").allowedOrigins("*");
              }
            }

          }


14. Add this to your backend/src/main/resources/application.yaml
        # Disable cors check because we are running in local dev mode
        disable.cors: true


15. Change the npm build output path to "dist/"
    a. Edit the frontend/angular.json

    b. Change this line:
          "outputPath": "dist/angularApp1",

       To this:
          "outputPath": "dist/static",

       NOTE:  this outputPath must match the classpath found in WebMvcConfig


16. Change the npm build so that it adds the /app1/ prefix to all URLs
    a. Edit the frontend/package.json

    b. Change this line:
         "build": "ng build",

       To this:
         "build": "ng build --base-href /app1/",


17. Update nav bar routes to use the '/page' prefix
    a. Edit the app.module.ts
    b. Update the routes so they look like this:
            const appRoutes: Routes = [
              { path: 'page/addReport', component: AddReportComponent},
              { path: '', redirectTo: '/', pathMatch: 'full'},
              { path: '**', component: NotFoundComponent}
            ];

    a. Edit the app.copmonent.html  (where the navigation bar is defined)
    b. Update the routerLinks so that they start with '/page'
       They should look like this:
             <a mat-button [routerLink]="'/page/addReport'"> Add Report </a>
             <a mat-button [routerLink]="'/page/viewReports'"> View Reports </a>


18. Verify the web app runs in Intellij
    a. Go to your Application class
    b. Right-click on main() -> Debug 'Application.main()'
    c. Open a browser
    d. Connect to http://localhost:8080/api/time
       -- You should see the current time
    e. Stop the app in Intellij (as it is bound to port 8080)


19. Verify that the webapp builds correctly and runs as a super-jar
    a. Build everything
       unix> cd ~/intellijProjects/angularApp1
       unix> mvn clean install

    b. Run the uber jar  (it has -exec in the filename)
       unix> java -jar ./backend/target/backend-1.0-SNAPSHOT-exec.jar

       You should see this:
          02/27/2020 22:54:41 INFO  org.springframework.boot.web.embedded.undertow.UndertowServletWebServer Undertow started on port(s) 8080 (http) with context path '/app1'
          02/27/2020 22:54:41 INFO  com.lessons.Application Started Application in 1.804 seconds (JVM running for 2.259)
          02/27/2020 22:54:41 DEBUG com.lessons.Application WebApp is Up.

    c. Verify that http//localhost:8080/app1 takes users into the main web page
       a. Open a browser
       b. Connect to http://localhost:8080/app1
          -- You should see the default page

    d. Verify that users can refresh on a specific page
       a. Open a browser
       b. Connect to http://localhost:8080/app1/page/addReport
          -- You should see the "App a Report" page




Problem with backend being dependent upon frontend.jar
------------------------------------------------------
If you are changing the frontend, then you must recompile the frontend
 1. Run the backend in Intellij on localhost:8080
 2. Run the frontend from command-line on localhost:4200
 3. Connect to webpage at localhost:4200
    -- Can

This build structure works well for building for production
This build structure works poorly for local debugging
-- Need separate maven profiles for dev and prod




Approaches:
 1) in backend/pom.xml
      include frontend dependency with scope=runtime

    in frontend/pom.xml
        <build>
            <resources>
                <resource>
                    <directory>target/frontend</directory>
                    <targetPath>static</targetPath>
                </resource>
            </resources>
        </build>


 2. In backend/pom.xml
    a. include frontend dependency with scope=compile
    b. Modify springboot addResourceHandlers
       *or*
       In application.yaml
          spring.resources.static-locations=classpath:/custom/

