Lesson:  Setup a Navigation Bar like the Washington Post
--------------------------------------------------------

References
----------
https://material.angular.io/components/sidenav/examples
http://www.dotnetspeak.com/angular/controlling-scrolling-with-angularflex-layout/
https://stackblitz.com/angular/ybgmagmydrr?file=src%2Fapp%2Fsidenav-fixed-example.html


--------------------------------------------------------------------------------
| search icon | app menu |              Title                       User icon  |
--------------------------------------------------------------------------------
| App Navbar |                   Content Area                    | User Navbar |
|            |                                                   |             |
|            |                                                   |             |
--------------------------------------------------------------------------------

Menu Behavior:
 1) Top header is fixed and 60 pixels tall
 2) App menu  appears/disappears on left  when user clicks app menu
 3) User menu appears/disappears on right when user clicks on the User Icon
 4) Only one side menu appears at a time
 5) Vertical/Horizontal Scrollbars only appears in Content areA  (no vertical scrollbar in the App Menu)
 6) App Title is centered in the header
 7) Clicking on the search icon opens a searchbox (and closes the menus)
 
Colors
 A) Header    has background=#111     foreground=white
 B) App Menu  has background=#2a2a2a  foreground=white
 C) User Menu has background=#172a52  foreground=white
 D) Hover on User Menu Item has background=black foreground=white and indents about 5 pixels
 

Procedure
---------
 1. Update the browser tab to show the Application Title
    a. Edit index.html
	   Change this:
	  		<title>Frontend</title>
	   To this:
	  		<title>Angular App1</title>


 2. Update the header
    a. Change the header so it's only 60 pixels
       1) Edit app.component.html 
	      Change the header to this:
	    	<div fxFlex="60px">
				<!-- Header is 60 pixels high -->
				<app-header></app-header>
		  	</div> 
	
	   2) Edit navbar.component.html
	      Change the margin-top to be 60 px
		  	<mat-sidenav class="navbar" style="width:200px; margin-top: 60px" mode="side" opened="true"
            	   [fixedInViewport]="true" [fixedTopGap]="0" [fixedBottomGap]="0">


    b. Change the header background so it's near-black  #111
	   1) Edit header.component.css
	      Change the .header CSS class so the background is #111
			.header {
			  background: #111;
			  color: white;
			  height: 100%;
			  padding-left: 16px;
			  padding-right: 16px;
			}
		

   c. Move the title to the center part of the header 
      1) Edit header.component.html
	  2) Move the Application Title to the center part of the header
	     So, the Center Part of the Header looks like this:
		 
		  <!-- Center Part of the Header -->
		  <div fxFlex  fxLayoutAlign="center center">
			<!-- fxLayoutAlign="center center" is center-aligned horizontally and centered vertically   -->

			<!-- Application Title -->
			<h1 style="display: inline" class="app1Logo">Angular App1</h1>
		  </div>
    
	  3) Change the title so that clicking on it takes you to the default page
           <h1 class="app1Logo clickable" [routerLink]="'/'">Angular App1</h1>
		
		
   d. Add a search hourglass to the left side of the header
      1) Edit header.component.html
	  2) Update the Left Side of the Header so it looks like this:
			  <!-- Left Side of the Header -->
			  <div fxFlex fxLayoutAlign="left center" fxLayout="row" fxLayoutGap="0">

				  <!-- Search Hourglass -->
				  <a class="button" (click)="toggleAppNavbar()">
					<i class="fa fa-search"></i>
				  </a>

				  <!-- Separator -->
				  &nbsp;&nbsp;&nbsp;&nbsp;

				  <!-- App Navbar -->
				  <a  class="button" (click)="toggleAppNavbar()">
					Sections
					<i class="fa fa-bars"></i>
				  </a>
			  </div>

 
    e. Add a "User Menu" and person icon to the right side of the header
	   1) Edit the header.component.html
	   2) Update the Right Side of the Header so it looks like this:
	   
			  <!-- Right Side of the Header -->
			  <div fxFlex fxLayoutAlign="end center">
				<!-- fxLayoutAlign="end center" is right-aligned horizontally and centered vertically   -->

				<!-- User Menu -->
				<a class="button">
				  <span class="username">John.Smith</span>&nbsp;
				  <span class="fa fa-user"></span>
				</a>
			  </div>
    
	f. Change the header icon buttons to look prettier 
	   -- They are in a box
	   -- They have a white border when hovered over
       -- Each button box has: margin-top: 11px
	   -- Each button box has: background-color: #1f1f1f;
	   
		a.button {
		  background-color: #1f1f1f;
		  border: 1px solid #444;
		  border-radius: 4px;
		  font-size: 14px;
		  line-height: 20px;
		  color: #f7f7f7;
		  padding: 7px 14px 7px 14px;
		  height: 20px;
		  cursor: pointer;
		  -webkit-transition: 200ms all linear;
		  -moz-transition: 200ms all linear;
		  -o-transition: 200ms all linear;
		  transition: 200ms all linear;
		  background-image: none;
		}

		a.button:hover {
		  background-color: black;
		  color: white;
		  border-color: #f9f9f9;
		}
    
	When completed, the header.component.html looks like this:
		<div class="header">

		  <div fxFlex fxLayout="row" fxLayoutGap="0">

			  <!-- Left Side of the Header -->
			  <div fxFlex fxLayoutAlign="left center" fxLayout="row" fxLayoutGap="0">

				  <!-- Search Hourglass -->
				  <a class="button" (click)="toggleAppNavbar()">
					<i class="fa fa-search"></i>
				  </a>

				  <!-- Separator -->
				  &nbsp;&nbsp;&nbsp;&nbsp;

				  <!-- App Navbar -->
				  <a  class="button" (click)="toggleAppNavbar()">
					Sections
					<i class="fa fa-bars"></i>
				  </a>
			  </div>


			  <!-- Center Part of the Header -->
			  <div fxFlex  fxLayoutAlign="center center">
				<!-- fxLayoutAlign="center center" is center-aligned horizontally and centered vertically   -->

				<!-- Application Title -->
				<h1 style="display: inline" class="app1Logo">Angular App1</h1>
			  </div>


			  <!-- Right Side of the Header -->
			  <div fxFlex fxLayoutAlign="end center">
				<!-- fxLayoutAlign="end center" is right-aligned horizontally and centered vertically   -->

				<!-- User Menu -->
				<a class="button">
				  <span class="username">John.Smith</span>&nbsp;
				  <span class="fa fa-user"></span>
				</a>
			  </div>

		  </div>
		</div>
	
	When completed, the header.component.css looks like this:
		.header {
		  background: #111;
		  color: white;
		  height: 100%;
		  padding-left: 16px;
		  padding-right: 16px;
		}

		.app1Logo {
		  color: #fff;
		  padding: 3px 0 5px 5px;
		  font-size: 1.7em;
		  margin: 0;
		  font-family: "Verdana", san-serif;
		  text-decoration: none;

		  /* Outline of zero gets rid of the annoying box around the link */
		  outline: 0;
		}

		a.button {
		  background-color: #1f1f1f;
		  border: 1px solid #444;
		  border-radius: 4px;
		  font-size: 14px;
		  line-height: 20px;
		  color: #f7f7f7;
		  padding: 7px 14px 7px 14px;
		  height: 20px;
		  cursor: pointer;
		  -webkit-transition: 200ms all linear;
		  -moz-transition: 200ms all linear;
		  -o-transition: 200ms all linear;
		  transition: 200ms all linear;
		  background-image: none;
		}
		
		a.button:hover {
		  background-color: black;
		  color: white;
		  border-color: #f9f9f9;
		}


 3. Change the header.component.html and header.component.ts to call toggleAppNavBar() and toggleUserNavbar()
    a. Edit header.component.ts
	   Change toggle() to toggleAppNavbar()
			public toggleAppNavbar(): void {
				this.navbarService.toggleAppNavbar();
			}
			
    b. Edit header.component.html
	   Change the (click)="toggle()" to (click)="toggleAppNavbar()"
   
    c. Create a new method in the header.component.ts
		public toggleUserNavbar(): void {
			this.navbarService.toggleUserNavbar();
		}
		
 4. Change the navbarService so that it holds 2 boolean properties
    -- One is for the app-navbar
	-- One is for the user-navbar
	
	a. Add this interface to the top:
		interface NavbarState {
		  isAppNavbarDisplayed: boolean;
		  isUserNavbarDisplayed: boolean;
		}

	
	b. Change the navbar.service.ts to this:
		import {Injectable} from '@angular/core';
		import {Observable, Subject} from "rxjs";

		interface NavbarState {
		  isAppNavbarDisplayed: boolean;
		  isUserNavbarDisplayed: boolean;
		}

		@Injectable({
		  providedIn: 'root'
		})
		export class NavbarService  {

		  private navbarStateSubject = new Subject<NavbarState>();
		  private navbarState: NavbarState = new class implements NavbarState {
			isAppNavbarDisplayed: true;
			isUserNavbarDisplayed: false;
		  };

		  public constructor() {
		  }

		  public getNavbarStateAsObservable(): Observable<NavbarState> {
			return this.navbarStateSubject.asObservable();
		  }

		 public toggleUserNavbar(): void {
			this.navbarState.isUserNavbarDisplayed = !this.navbarState.isUserNavbarDisplayed;
			
			// Send a message to the user-navbar (to tell the navbar to show or hide)
			this.navbarStateSubject.next(this.navbarState);
		  }

		  public toggleAppNavbar(): void {
			this.navbarState.isAppNavbarDisplayed = !this.navbarState.isAppNavbarDisplayed;

			// Send a message to the user-navbar (to tell the navbar to show or hide)
			this.navbarStateSubject.next(this.navbarState);
		  }
		}




 5. Add the User Navbar (for the right side)
    a. Create the userNavbar component
	   unix> cd ~/intellijProjects/angularApp1/frontend
	   unix> ng generate component userNavbar
	   
    b. Make the user navbar look pretty:
	

 6. Change the app.component.ts to listen for the navbar properties
 	a. Edit the app.component.ts
	b. Rename isSideNavVisible        to isAppNavVisible 
	c. Rename showSideNavSubscription to showAppNavSubscription
	d. Add a 2nd public boolean:
	     public isUserNavVisible = false;    // The right nav starts out as not visible
		
    e. Change the ngOnInit() so that it subscribes to the observable and returns a NavbarState object
	   NOTE:  This NavbarState object holds 2 booleans
	   
	   
      When finished, app.component.ts should look like this:
		import {Component, OnDestroy, OnInit} from '@angular/core';
		import {Subscription} from "rxjs";
		import {NavbarService} from "./services/navbar.service";

		@Component({
		  selector: 'app-root',
		  templateUrl: './app.component.html',
		  styleUrls: ['./app.component.css']
		})
		export class AppComponent implements OnInit, OnDestroy {
		  title = 'AngularApp1';

		  public isAppNavVisible = true;    // The left nav starts out as visible
		  public isUserNavVisible = false;    // The right nav starts out as not visible

		  private showNavSubscription: Subscription;

		  constructor(private navbarService: NavbarService)
		  { }


		  public ngOnInit(): void {

			// This app-component will listen for messages from the navbarService
			this.showNavSubscription = this.navbarService.getNavbarStateAsObservable().subscribe((navbarState) => {
			  // We received a message from the navbarService
			  // -- Someone has toggled the one of the navbars

			  // Set the public properties based on the navbarState properties returned
			  this.isAppNavVisible = navbarState.isAppNavbarDisplayed;
			  this.isUserNavVisible = navbarState.isUserNavbarDisplayed;
			});
		  }

		  public ngOnDestroy() {
			this.showNavSubscription.unsubscribe();
		  }

		}


 7. Edit the app.component.html to listen for the new properties 
    a. Edit the app.component.html
	b. Add the right-side navigation
	    <div fxFlex="200px" style="padding: 0" *ngIf="this.isUserNavVisible">
      		<!-- Right Side Navigation -->
      	<app-user-navbar></app-user-navbar>
    
	
	 When finished, app.component.html looks like this:
		<div fxFlexFill fxLayout="column">

			  <div fxFlex="60px">
				<!-- Header is 60 pixels high -->
				<app-header></app-header>
			  </div>


			  <div fxFlex fxLayout="row" fxLayoutGap="0px">
				<div fxFlex="200px" style="padding: 0" *ngIf="this.isAppNavVisible">
				  <!-- Left Side Navigation -->
				  <app-navbar></app-navbar>
				</div>

				<div fxFlex>
				  <!-- Main Viewing Area -->
				  <router-outlet></router-outlet>
				</div>

				<div fxFlex="200px" style="padding: 0" *ngIf="this.isUserNavVisible">
				  <!-- Right Side Navigation -->
				  <app-user-navbar></app-user-navbar>
				</div>
			  </div>

		</div>



 8. Chang the navbar.service.ts so that only *one* navbar appears at a time
    a. Edit navbar.service.ts
	b. Change the toggleAppNavbar() method by adding this if statement
		 public toggleAppNavbar(): void {
			this.navbarState.isAppNavbarDisplayed = !this.navbarState.isAppNavbarDisplayed;

			if ((this.navbarState.isUserNavbarDisplayed) && (this.navbarState.isAppNavbarDisplayed)) {
			  // The user is showing the App Navbar and the User Navbar is presently visible

			  // So, hide the User Navbar (so that only *ONE* navbar is visible at a time)
			  this.navbarState.isUserNavbarDisplayed = false;
			}

			// Send a message to the user-navbar (to tell the navbar to show or hide)
			this.navbarStateSubject.next(this.navbarState);
		  }

 	c. Change the toggleUserNavbar() method by adding this if statement
		  public toggleUserNavbar(): void {
			this.navbarState.isUserNavbarDisplayed = !this.navbarState.isUserNavbarDisplayed;

			if ((this.navbarState.isUserNavbarDisplayed) && (this.navbarState.isAppNavbarDisplayed)) {
			  // The user is showing the User Navbar and the App Navbar is presently visible

			  // So, hide the App Navbar (so that only *ONE* navbar is visible at a time)
			  this.navbarState.isAppNavbarDisplayed = false;
			}

			// Send a message to the user-navbar (to tell the navbar to show or hide)
			this.navbarStateSubject.next(this.navbarState);
		  }



	
