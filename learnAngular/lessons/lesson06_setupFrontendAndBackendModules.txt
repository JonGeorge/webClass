Lesson 6: Add Spring Boot to the Structure
------------------------------------------
There are two approaches for how to structure the Angular code and Spring Boot java code
 1) Create one maven module that holds both the front-end and back-end
 2) Create two maven modules: One holds the front-end, another holds the back-end

The best approach should be the approach that lets you
 A) Debug the java code on the back-end
 B) Debug the typescript code on the front-end
 C) Let front-end developers use "ng serve"


References
----------
https://sterl.org/2019/02/angular-spring-boot/
https://shekhargulati.com/2017/11/08/a-minimalist-guide-to-building-spring-boot-angular-5-applications/


Reasons to keep the webapp as one module
----------------------------------------
 + Simpler to debug:  Just kick off the webapp's main class and it's running
 - Not sure if you can debug the typescript this way...?


Reasons to split the webapp into two modules
--------------------------------------------
 + Front-end people can still use "ng serve" for quick development
 + You can still run the entire webapp



Procedure (using Two Maven Modules)
-----------------------------------
We need to create a new directory structure with this:
  angularApp1/
  angularApp1/frontend/
  angularApp1/backend/




Part 1:  Configure the Angular Code (within the "frontend" maven module)
------------------------------------------------------------------------
 1. Delete the existing angularApp1/node_modules directory and all of its subdirectories
    unix> cd ~/intellijProjects/angularApp1
    unix> rm -rf node_modules

 2. Create this file:  angularApp1/pom.xml
    NOTE:  This is the parent maven module
    unix> cd ~/intellijProjects/angularApp1
    unix> vi pom.xml

        <?xml version="1.0" encoding="UTF-8"?>

        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>

          <groupId>com.lessons</groupId>
          <artifactId>angularApp1</artifactId>
          <packaging>pom</packaging>
          <version>1.0-SNAPSHOT</version>

          <name>angularApp1</name>

          <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
          </properties>


          <build>
            <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
              <plugins>
                <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
                <plugin>
                  <artifactId>maven-clean-plugin</artifactId>
                  <version>3.1.0</version>
                </plugin>
                <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
                <plugin>
                  <artifactId>maven-resources-plugin</artifactId>
                  <version>3.0.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <version>3.8.0</version>
                </plugin>
                <plugin>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>2.22.1</version>
                </plugin>
                <plugin>
                  <artifactId>maven-jar-plugin</artifactId>
                  <version>3.0.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-install-plugin</artifactId>
                  <version>2.5.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-deploy-plugin</artifactId>
                  <version>2.8.2</version>
                </plugin>
                <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
                <plugin>
                  <artifactId>maven-site-plugin</artifactId>
                  <version>3.7.1</version>
                </plugin>
                <plugin>
                  <artifactId>maven-project-info-reports-plugin</artifactId>
                  <version>3.0.0</version>
                </plugin>
              </plugins>
            </pluginManagement>
          </build>
        </project>



 3. Tell Intellij that is a maven project
    a. Right-click on the newly-created pom.xml -> Add as Maven Project


 4. Create this Maven module:  frontend
    NOTE:  This maven module will hold all of the Angular code
    a. In Intellij, right-click on the angularApp1/pom.xml -> Add as Maven Project
    b. Right-click on angularApp1 -> New Module:
        On the left, select Maven
        Click "Create from archetype"
        Select maven-archetype-quickstart
        Press "Next"

        ArtifactId:  frontend
        Press "Next"

        Module name:  frontend

    c. Delete the angularApp1/frontend/src directory and all of its subdirectories

    d. Replace the angularApp1/frontend/pom.xml with this:

        When completed, the angularApp1/frontend/pom.xml should look like this:
            <?xml version="1.0" encoding="UTF-8"?>
            <project xmlns="http://maven.apache.org/POM/4.0.0"
                     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
              <parent>
                <artifactId>angularApp1</artifactId>
                <groupId>com.lessons</groupId>
                <version>1.0-SNAPSHOT</version>
              </parent>
              <modelVersion>4.0.0</modelVersion>

              <artifactId>frontend</artifactId>
            </project>


 5. Move the Angular code to the frontend directory
    unix> cd ~/intellijProjects/angularApp1
    unix> mv src frontend
    unix> mv e2e frontend
    unix> mv README.md angular.json browserslist karma.conf.js package.json package-lock.json tsconfig* tslint.json frontend




 6. Modify the frontend/pom.xml by adding this <build>...</build> section right before the closing </project> line
        <build>
            <sourceDirectory>src/app</sourceDirectory>

            <resources>
                <resource>
                    <directory>src</directory>
                </resource>
                <resource>
                    <directory>e2e</directory>
                </resource>
            </resources>

            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <configuration>
                        <filesets>
                            <fileset>
                                <directory>node_modules</directory>
                            </fileset>
                        </filesets>
                    </configuration>
                </plugin>

                <plugin>
                    <artifactId>exec-maven-plugin</artifactId>
                    <groupId>org.codehaus.mojo</groupId>
                    <executions>
                        <execution>
                            <id>npm install</id>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                            <phase>generate-resources</phase>
                            <configuration>
                                <executable>npm</executable>
                                <arguments>
                                    <argument>install</argument>
                                </arguments>
                            </configuration>
                        </execution>

                        <execution>
                            <id>angular-cli build</id>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                            <phase>compile</phase>
                            <configuration>
                                <executable>ng</executable>
                                <arguments>
                                    <argument>build</argument>
                                    <argument>--prod</argument>
                                    <argument>--output-path</argument>
                                    <argument>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}/${project.version}</argument>
                                </arguments>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </build>

     When finished, the frontend/pom.xml should look like this:

     <?xml version="1.0" encoding="UTF-8"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <parent>
            <artifactId>angularApp1</artifactId>
            <groupId>com.lessons</groupId>
            <version>1.0-SNAPSHOT</version>
          </parent>
          <modelVersion>4.0.0</modelVersion>

          <artifactId>frontend</artifactId>

          <build>
            <sourceDirectory>src/app</sourceDirectory>

            <resources>
              <resource>
                <directory>src</directory>
              </resource>
              <resource>
                <directory>e2e</directory>
              </resource>
            </resources>

            <plugins>
              <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <configuration>
                  <filesets>
                    <fileset>
                      <directory>node_modules</directory>
                    </fileset>
                  </filesets>
                </configuration>
              </plugin>

              <plugin>
                <artifactId>exec-maven-plugin</artifactId>
                <groupId>org.codehaus.mojo</groupId>
                <executions>
                  <execution>
                    <id>npm install</id>
                    <goals>
                      <goal>exec</goal>
                    </goals>
                    <phase>generate-resources</phase>
                    <configuration>
                      <executable>npm</executable>
                      <arguments>
                        <argument>install</argument>
                      </arguments>
                    </configuration>
                  </execution>

                  <execution>
                    <id>angular-cli build</id>
                    <goals>
                      <goal>exec</goal>
                    </goals>
                    <phase>compile</phase>
                    <configuration>
                      <executable>ng</executable>
                      <arguments>
                        <argument>build</argument>
                        <argument>--prod</argument>
                        <argument>--output-path</argument>
                        <argument>${project.build.outputDirectory}/META-INF/resources/webjars/${project.artifactId}/${project.version}</argument>
                      </arguments>
                    </configuration>
                  </execution>
                </executions>
              </plugin>
            </plugins>
          </build>
        </project>


 7. Use maven to build the frontend node_modules
    unix> cd ~/intellijProjects/angularApp1/frontend
    unix> mvn clean install
    -- You should see the frontend/node_modules/ directory


 8. Verify the frontend works
    a. Configure the Angular CLI Server so it knows that the package.json is located in fronend/package.json
       Pull Run / Edit Configurations
       Select NPM -> Angular CLI Server
       Package.json:   ~/intellijProjects/angularApp1/frontend/package.json
       Press Apply

    b. Pull Run -> Angular CLI Server

    c. Open a browser and connect
    d. Go to http://localhost:4200
          -- You should see your webapp

    e. Pull Run -> Stop



Part 2:  Configure Spring Boot (within the "backend" maven module)
------------------------------------------------------------------
 1. Create this Maven module:  backend
    NOTE:  This maven module will hold all of the Java/SpringBoot code
    a. Right-click on angularApp1 -> New Module:

        On the left, select Maven
        Click "Create from archetype"
        Select maven-archetype-quickstart
        Press "Next"

        ArtifactId:  backend
        Press "Next"

        Module name:  backend



 2. Create these directories:
    angularApp1/backend/src/main/resources
    angularApp1/backend/src/test/resources


 3. Add Spring Boot and Logback Dependencies to the backend/pom.xml

    a. Replace the contents of the backend/pom.xml with this:

           <?xml version="1.0" encoding="UTF-8"?>

           <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
             <modelVersion>4.0.0</modelVersion>

             <groupId>com.lessons</groupId>
             <artifactId>backend</artifactId>
             <version>1.0-SNAPSHOT</version>

             <name>backend</name>

             <dependencyManagement>
               <!-- Set Spring Boot Dependencies -->
               <dependencies>
                 <dependency>
                   <groupId>org.springframework.boot</groupId>
                   <artifactId>spring-boot-dependencies</artifactId>
                   <version>2.2.1.RELEASE</version>
                   <type>pom</type>
                   <scope>import</scope>
                 </dependency>
               </dependencies>
             </dependencyManagement>

             <dependencies>

               <dependency>
                 <!-- Spring Boot Web -->
                 <groupId>org.springframework.boot</groupId>
                 <artifactId>spring-boot-starter-web</artifactId>

                 <exclusions>
                   <exclusion>
                     <!-- Remove Tomcat from Spring Boot -->
                     <groupId>org.springframework.boot</groupId>
                     <artifactId>spring-boot-starter-tomcat</artifactId>
                   </exclusion>

                   <exclusion>
                     <!-- Remove logging from spring as we will use logback -->
                     <groupId>org.springframework.boot</groupId>
                     <artifactId>spring-boot-starter-logging</artifactId>
                   </exclusion>
                 </exclusions>
               </dependency>

               <dependency>
                 <!-- Add Dependency for the Undertow App Server -->
                 <groupId>org.springframework.boot</groupId>
                 <artifactId>spring-boot-starter-undertow</artifactId>

                 <exclusions>
                   <exclusion>
                     <!-- Remove logging from undertow as we will use logback -->
                     <groupId>org.springframework.boot</groupId>
                     <artifactId>spring-boot-starter-logging</artifactId>
                   </exclusion>
                 </exclusions>
               </dependency>

               <dependency>
                 <!-- Send logging from Java Common Logging to SLF4J -->
                 <groupId>org.slf4j</groupId>
                 <artifactId>jcl-over-slf4j</artifactId>
                 <version>1.7.5</version>
               </dependency>

               <dependency>
                 <!-- SLF4J will use Logback-classic as its logging implementation -->
                 <groupId>ch.qos.logback</groupId>
                 <artifactId>logback-classic</artifactId>
                 <version>1.2.3</version>
               </dependency>

               <dependency>
                 <groupId>junit</groupId>
                 <artifactId>junit</artifactId>
                 <version>4.12</version>
                 <scope>test</scope>
               </dependency>
             </dependencies>

           </project>


 4. Setup logback in the springboot application
    a. Right-click on angularApp1/backend/src/main/resources -> New -> File
       filename:  logback.xml
       Press OK

    b. Copy this into your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

            <?xml version="1.0" encoding="windows-1252" ?>
            <configuration debug="false">
                <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                    <encoder>
                        <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                    </encoder>
                </appender>

                <logger name="org.springframework" level="DEBUG" additivity="false">
                    <appender-ref ref="CONSOLE"/>
                </logger>

                <logger name="org.springframework.core.env.PropertySourcesPropertyResolver" level="INFO" additivity="false">
                    <appender-ref ref="CONSOLE"/>
                </logger>

                <logger name="com.lessons" level="DEBUG" additivity="false">
                    <appender-ref ref="CONSOLE"/>
                </logger>

                <root level="DEBUG">
                    <appender-ref ref="CONSOLE"/>
                </root>
            </configuration>


 5. Delete the App.java
    a. Right-click on backend/src/main/java/com/lessons/App -> Delete

 6. Create the Application.java class with a logger
    a. Right-click on backend/src/main/java/com/lessons -> New Java Class
       Class Name:  Application

    b. Replace the contents of Application.java with this:

        package com.lessons;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;

        /**
         * Main Application
         **/
        public class Application {
          private static final Logger logger = LoggerFactory.getLogger(Application.class);

          public static void main(String[] args)
          {
            logger.debug("main() started.");

            logger.debug("main() finished.");
          }
        }


 7. Verify logging is working
    a. Set a breakpoint in your logger.debug() line by clicking in the margin
    b. Right-click on main() -> Debug 'App.main'
    c. Press F9 to continue
       You should see this in the console
        02/02/2018 22:45:22 DEBUG com.lessons.Application main() started.
        02/02/2018 22:45:22 DEBUG com.lessons.Application main() finished.


 8. Update the Application.java class so it starts a Spring-Boot webapp
    a. Replace the Application.java contents with this:

        package com.lessons;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.boot.SpringApplication;
        import org.springframework.boot.autoconfigure.SpringBootApplication;

        /**
         * Main Application
         **/
        @SpringBootApplication
        public class Application
        {
            private static final Logger logger = LoggerFactory.getLogger(Application.class);


          /**
           * Web Application Starts Here
           **/
           public static void main( String[] args )
            {
                logger.debug("main() started.");

                // Start up Spring Boot
                SpringApplication.run(Application.class, args);

                logger.debug("WebApp is Up.");
            }
        }


    b. Create this file:  application.yaml
       1) Right-click on angularApp1/backend/src/main/resources -> New -> File
          Filename:  application.yaml

       2) Copy this to your new file:
            ##########################################################
            # application.yaml   (used for development purposes)
            ##########################################################
            name: app1
            server.servlet.context-path: /app1
            server.port: 8080

           NOTE:  Make sure there are no leading spaces on any of these lines



 9. Add these dependencies to your backend/pom.xml

         <dependency>
             <groupId>org.springframework</groupId>
             <artifactId>spring-jdbc</artifactId>
             <version>5.2.1.RELEASE</version>
         </dependency>

         <dependency>
             <groupId>org.springframework</groupId>
             <artifactId>spring-web</artifactId>
             <version>5.2.1.RELEASE</version>
         </dependency>

         <dependency>
             <!-- Implementation for converting objects to JSON -->
             <groupId>com.fasterxml.jackson.core</groupId>
             <artifactId>jackson-databind</artifactId>
             <version>2.9.3</version>
         </dependency>




10. Create this file:  BogusController
      a. Right-click on backend/src/main/java/com/lessons -> New Package
         Package Name:  controllers

      b. Right-click on backend/src/main/java/com/lessons/controllers -> New Java Class
         Name: BogusController

      c. Copy this to your new class

             package com.lessons.controllers;


             import org.slf4j.Logger;
             import org.slf4j.LoggerFactory;
             import org.springframework.http.HttpStatus;
             import org.springframework.http.MediaType;
             import org.springframework.http.ResponseEntity;
             import org.springframework.stereotype.Controller;
             import org.springframework.web.bind.annotation.RequestMapping;
             import org.springframework.web.bind.annotation.RequestMethod;
             import java.text.DateFormat;
             import java.text.SimpleDateFormat;
             import java.util.Date;

             @Controller("com.lessons.controllers.BogusController")
             public class BogusController {
               private static final Logger logger = LoggerFactory.getLogger(BogusController.class);


               /*************************************************************************
                * REST endpoint /api/time
                *
                * @return a plain-old string with the system time (not JSON)
                *************************************************************************/
               @RequestMapping(value = "/api/time", method = RequestMethod.GET, produces = "application/json")
               public ResponseEntity<?> getDateTime() {
                 logger.debug("getDateTime() started.");

                 // Get the date/time
                 DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                 Date date = new Date();
                 String dateTime = dateFormat.format(date);

                 // Return the date/time string as plain-text
                 return ResponseEntity
                   .status(HttpStatus.OK)
                   .contentType(MediaType.TEXT_PLAIN)
                   .body(dateTime);
               }
             }



11. Verify the web app runs in Intellij
    a. Go to your Application class
    b. Right-click on main() -> Debug 'Application.main()'
    c. Open a browser
    d. Connect to http://localhost:8080/app1/api/time
       -- You should see the current time
    e. Stop the app in Intellij (as it is bound to port 8080)


