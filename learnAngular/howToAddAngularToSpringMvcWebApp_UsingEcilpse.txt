How to Add Angular to Spring MVC Web App Using Eclipse
------------------------------------------------------

Assumptions:  
 A) You have Eclipse installed
 B) You have Maven installed
 C) You want to add Angular to a Spring MVC Web App
 


Notes about Eclipse Warnings
----------------------------
Eclipse will give you warnings in your jsp or html pages about angular attributes
You have a few choices about it:
 1) Ignore the warnings
 
 2) Turn off the warnings
    properties>>validation>>html syntax>>attributes>>ignore undefined attribute names.

 3) Change the angular attributes by adding data- to them
    
    For example:  
      <html lang="en" ng-app="myApp">        <!-- Eclipse shows a warning about this -->
    
    Gets converted to this:
      <html lang="en" data-ng-app="myApp">   <!-- Eclipse does not show any warnings -->
 
    HTML5 allows attributes to start with data-
    And, so these will be accepted as valid HTML by the Eclipse HTML5 validator
    




Procedures
----------
 1. Follow the steps in howToCreateSpringMvcWebApp_usingEclipseMaven.txt


 2. Make sure this entry is found in your spring dispatch-servlet.xml
    NOTE:  This tells spring that any paths to /<webapp-name>/resources --> src/main/webapp/resources/ 
   
        <!-- Map the relative address for certain locations -->
        <mvc:resources  mapping="/resources/**"  location="/resources/" />
    



3.  Download Angular
    a. Go to https://angularjs.org/
    b. Click the Download button
       1) Click on the branch that is stable  (1.3 at the time)
       2) Click "Minified"
       3) Press "Download"
          https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js
          
          -- The Angular javascript file appears on the p
       4) Pull File / Save Page As....
          Save to here:  c:\vault\angular.min.js
          
          
          
          

 4. Add Angular to your web app  
    a. Open your Eclipse Project
    b. Create a directory here:
          src/main/webapp/resources/angular
          
          Right-click on src/main/webapp/resources -> New -> Folder "angular-1.3.16"
          
    c. Drag & Drop the angular.min.js  to  your   src/main/webapp/resources/angular-1.3.16/ 
    d. Eclipse will prompt you to select mode, press OK
    


 5. Adjust the welcome.jsp page to use Angular

    ASSUMPTION:  
       You have this contextPath variable set (in your stdJspIncludes.jsp page)
       <c:set var="contextPath" value="${pageContext.request.contextPath}" />

    Change your welcome.jsp page to look like this:
   




    <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>  
    <!DOCTYPE HTML>
    
    <html lang="en" data-ng-app="myApp">
    
    <head>
        <title>Welcome Page</title>
    </head>
    
    <body data-ng-controller="PhoneListCtrl">
       
        <%-- S T A N D A R D       H E A D E R  --%>
        <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
      
        <h2>welcome.jsp</h2>
       
        
          <ul>
            <li data-ng-repeat="phone in phones">
              <span>{{phone.name}}</span>
              <p>{{phone.snippet}}</p>
            </li>
          </ul>
            
            
         <p>Nothing here {{'yet' + '!'}}</p>
         
         <p>1 + 2 = {{ 1 + 2 }}</p>
         
        <br/>
        
        Hello ${userInfo.userName} <br/>
        Are you an administrator: ${userInfo.isAdministrator }
           
        <br/>
        <br/>    
    
        <%-- S T A N D A R D       F O O T E R  --%>
        <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
        

        <%-- Load Angular --%>
        <script src="${contextPath}/resources/angular-1.3.16/angular.min.js" type="text/javascript"></script>
       
        <script type="text/javascript">
            var phonecatApp = angular.module('myApp', []);
        
            phonecatApp.controller('PhoneListCtrl', function ($scope) 
            {
              $scope.phones = [
                {'name': 'Nexus S',
                 'snippet': 'Fast just got faster with Nexus S.'},
                {'name': 'Motorola XOOM™ with Wi-Fi',
                 'snippet': 'The Next, Next Generation tablet.'},
                {'name': 'MOTOROLA XOOM™',
                 'snippet': 'The Next, Next Generation tablet.'}
              ];
            });
            
        </script>
    </body>
    </html>
    
    
    