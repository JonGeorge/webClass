Lesson #5:  How to Add the Timer to a Page
------------------------------------------

Assumptions:  
 A) You have IntelliJ installed
 B) You have Maven installed
 
 
References
----------
https://siddii.github.io/angular-timer/


Procedures
----------
 1. Create a SpringMvcAngular Web App
    Follow the steps in howToCreateSpringMvcWebApp_usingIntellijMaven_cargoPlugin.txt
    NOTE:  Call the project:   springMvcAngular
     
    
 2. Download & Install  angular-timer-1.3.3
    a. Download angular-timer-1.3.3
       1) Go to https://github.com/siddii/angular-timer/archive/master.zip
       2) Save angular-timer-master.zip to your c:\vault\
       3) Right-click on c:\vault\angular-timer-master.zip\ -> 7zip -> Extract Here
       4) Get the version number from the c:\vault\angular-timer-master\package.json
          In this case, the version number is 1.3.3
    
    b. Install angular-timer-1.3.3     
       1) Right-click on /src/main/webapp/resources/ -> New Directory
          Directory Name:  angular-timer-1.3.3
       2) Highlight all files and directories under C:\vault\angular-timer-master\dist\ 
          and select Copy
       3) Right-click on /src/main/webapp/resources/angular-timer-1.3.3/  -> Paste
          Now, you should have these directories:
              /src/main/resources/angular-timer-1.3.3/assets/css/angular-timer-bower.css
              /src/main/resources/angular-timer-1.3.3/assets/js/angular-timer-all.min.js
              /src/main/resources/angular-timer-1.3.3/assets/js/angular-timer-bower.js
              
       4) Delete this directory
              /src/main/resources/angular-timer-1.3.3/examples/
   
       5) Delete these files:
              /src/main/resources/angular-timer-1.3.3/navbar.html
              /src/main/resources/angular-timer-1.3.3/examples.html
   
   
 
 3. Add a generic controller to your WelcomeController
 
     /**********************************************************************
     * showExamplePage()
     ***********************************************************************/
    @RequestMapping("/example/{aViewName}")
    public ModelAndView showExamplePage(@PathVariable String aViewName, Model aModel )
    {
        // Create a modelAndView object
        String sViewName = aViewName + ".jsp";
        ModelAndView mav = new ModelAndView(sViewName);

        // Create a userInfo object
        UserInfo userInfo = new UserInfo();
        userInfo.setUserName("Adam");
        userInfo.setIsAdministrator(true);

        // Add the userInfo information to the view
        mav.addObject("userInfo", userInfo);

        return mav;
    }
    
 
 
 4. Add this link to your welcome.jsp page
  
     <a href="${contextPath}/example/angular4">Angular example #4 - page with a timer</a> <br/>
    
 
 
 5. Create this file:  angular4.jsp
    a. Right-click on /src/main/webapp/WEB-INF/jsp -> New File
       Filename:  angular4.jsp
        
    b. Copy this to your file:
		     
        <%@ include file="/WEB-INF/jsp/stdJspIncludes.jsp" %>
        <!DOCTYPE HTML>
        
        <html lang="en" data-ng-app="myApp">
        
        <head>
            <title>Angular #4</title>
        
            <%-- Load select2 CSS --%>
            <link href="${contextPath}/resources/select2-3.5.4/select2.css" rel="stylesheet">
        
            <!-- Load angular-timer CSS -->
            <link rel="stylesheet" type="text/css" href="${contextPath}/resources/angular-timer-1.3.3/assets/css/angular-timer-bower.css" />
        </head>
        
        <body data-ng-controller="PhoneListCtrl as ctrl">
        
        <%-- S T A N D A R D       H E A D E R  --%>
        <%@ include file="/WEB-INF/jsp/stdHeader.jsp" %>
        
        <h2>angular4.jsp</h2>
        
        
        
        
        
        <%--   T I M E R     I S    H E R E  --%>
        Timer starts here<br/>
        <timer interval="1000" countdown="ctrl.countdownVal">{{countdown}}</timer> <br/>
        Timer finishes here<br/><br/>
        
        <button ng-disabled="! ctrl.showStopButton()"   ng-click="ctrl.stopTimer()">Stop Timer</button>
        <button ng-disabled="! ctrl.showStartButton()"    ng-click="ctrl.startTimer()">Start Timer</button>
        <button ng-click="ctrl.resetTimerAndStop()">Reset Timer</button>
        <br/><br/>
        
        ctrl.timerRunning={{ctrl.timerRunning}}<br/>
        ctrl.timerCountIsPositive={{ctrl.timerCountIsPositive}}<br/>
        <br/>
        
        <%-- S T A N D A R D       F O O T E R  --%>
        <%@ include file="/WEB-INF/jsp/stdFooter.jsp" %>
        
        <%-- Load jQuery --%>
        <script src="${contextPath}/resources/jquery-1.11.3/jquery-1.11.3.min.js"></script>
        
        <%-- Load Angular --%>
        <script src="${contextPath}/resources/angular-1.3.16/angular.js" type="text/javascript"></script>
        
        <%-- Load angular-timer JS --%>
        <script src="${contextPath}/resources/angular-timer-1.3.3/assets/js/angular-timer-all.min.js" type="text/javascript"></script>
        
        
        <script type="text/javascript">
        
            // CRUCIAL:  Pass-in the 'timer' module into your angular page
            var myApp = angular.module('myApp', ['timer'], function() {
                // Angular App Initialization
                console.log('App Initialization started');
             });
        
            myApp.controller('PhoneListCtrl', [ '$log', '$scope', function ($log, $scope)
            {
                var self = this;
        
                self.timerRunning = true;
                self.timerCountIsPositive = true;
                self.countdownVal = 15;              // Countdown is 15 seconds
        
                // -----------------------------------------------------------------------
                // Handle 'timer-stopped' event
                //   Case #1:  The timer expired and it called this
                //   Case #2:  The user pressed the "Stop" button
                // -----------------------------------------------------------------------
                $scope.$on('timer-stopped', function(event, data){
                    console.log('Timer Stopped.  data=', data);
        
                    if (data.millis == 0)
                    {
                        // The timer stopped because it's out of time
                        console.log('case #1:  Times is up!!');
        
                        // Because the timer module called this, I need to apply these changes manually here
                        $scope.$apply( function () {
                            self.timerRunning = false;
                            self.timerCountIsPositive = false;
                        })
                    }
                    else
                    {
                        // User pressed stop
                        console.log('case #2:  Ures pressed stop.');
                    }
        
                    console.log('Timer Stopped event finished.');
                });
        
        
                self.startTimer = function()
                {
                    console.log('startTimer() called');
                    self.timerRunning = true;
                    $scope.$broadcast('timer-start');
        
                };
        
                self.stopTimer = function()
                {
                    console.log('stopTimer() called');
                    self.timerRunning = false;
                    $scope.$broadcast('timer-stop');
                };
        
                self.resetTimerAndStop = function()
                {
                    console.log('restartTimer() called');
                    self.timerRunning = false;
                    self.timerCountIsPositive = true;
                    $scope.$broadcast('timer-reset');
                };
        
        
                self.showStartButton = function()
                {
                    if ((self.timerRunning == false) && (self.timerCountIsPositive))
                    {
                        // The timer is not running and the timer count is positive -- so enable the start button
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                };
        
                self.showStopButton = function()
                {
                    if (self.timerRunning)
                    {
                        // The timer is actively running -- so enable the stop button
                        return true;
                    }
                    else
                    {
                        // the timer is not actively running -- so disable the stop button
                        return false;
                    }
                };
        
            }]);
        
        
        </script>
        </body>
        </html>
        