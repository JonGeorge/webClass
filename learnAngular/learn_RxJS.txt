Concept:  Understanding RxJS (Reactive Extensions for JavaScript)
-----------------------------------------------------------------

In the reactive style of coding, the changes in data drive the invocation of your code
Reactive programming is about creating responsive, event-driven applications.
-- Wehere an event stream is pushed to subscribers (who observe and handle the events)


Main Players in RxJS
--------------------
 1. Observable:  Data stream that pushes data over time
 
 2. Observer:  Consumer of an observable stream
 
 3. Subscriber: Connections observer with observable
 
 4. Operator:  Function for en route data transformation
 
 
          j                                  Subscriber 1
 Data Provider --> Observables --> Push --> |-------------|
                                            |  Observer   |
                                            |-------------|
                                            
                                        --> Subscriber 2
                                            |-------------|
                                            |  Observer   |
                                            |-------------|
                                         
 Observable, Observer, and Subscriber
 ------------------------------------
  Observable gets data from a data source -- e.g., UI events, a socket -- one element at a time
  Observable can do 3 things:
   1) Emit the next element to the observer
   2) Throw an error on the observer
   3) Inform the observer that the stream is over
   
 
 Observer provides 3 callbacks
   1) The function to handle the next element (emitted by the observable)
   2) The function to handle errors (thrown by the observable)
   3) The function to handle the end of a stream
   
 
 The Subscriber connects an observable and observer by invoking the subscribe() method and disconnects with unsubscribe()
   let mySubscription: Subscription = someObservable.subscribe(myObserver);
   
   
 To cancel the subscription:
   mySubscription.unsubscribe();
   
  
How can observable communicate with the observer?  
  next()  to push the next data element to the observer
  error() to push the error message to the observer
  complete() to send a signal to the observer about the end of the stream
  

Creating Observables
--------------------
 of(1,2,3)                     Turns the sequence of numbers into an Observable
 Observable.create(myObserver) Returns an observable that can invoke methods on myObserver
 from(myArray):                Converts an array into an observable.  You can use any iterable data collection.
 fromEvent(myInput, 'keyup'    Converts the keyup event from an HTML element into an Observable
 interval(1000)                Emits a sequential integer (0,1,2,3...) every 1000 milliseconds
 
 
 
   
                                         
