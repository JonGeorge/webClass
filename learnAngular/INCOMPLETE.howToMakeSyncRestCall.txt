How to Make a Synchronous REST Call
-----------------------------------
Problem:  The default $http angular service makes asychronous calls
          But, you need to make a call and WAIT

Solution: Use $q service


Example:  You want to wait for a REST call to finish when your controller is destroyed
--------------------------------------------------------------------------------------

 1. Suppose you have this code

        // Listen for when this controller is destroyed
        $scope.$on('$destroy', function () {
            console.log("Detected destroy event!");

            // Make REST call to clear out temp data
            makeRestCallToClear();
        });


        // Make async call to clear temp data
        function clearTempData()
        {
          $http.delete('/mysite/clear/data');
        }

 
 2. Modify clearTempData() to this 




Factory
-------
(function(){
  angular.module('sunset')
    .factory('WaitForCleanupFactory', ['q', Callback]);

  function Callback(q){
    console.log("WaitForCleanupFactory started.");

    var WaitForCleanupFactory = {};

      var WaitForCleanupFactory = {
          started: started,
          finished: finished,
          isInProgress:  isInProgress
      };

      WaitForCleanupFactory.state=0;

      return WaitForCleanupFactory;


      function started()
      {
          console.log("started() called.");
          WaitForCleanupFactory.state=1;
      }

      function finished()
      {
        console.log("finished() called.");
          WaitForCleanupFactory.state=0;
      }

      function isInProgress()
      {
          console.log("isInProgress() called.");
        if (WaitForCleanupFactory.state==1)
        {
          return true;
        }
        else
        {
          return false;
        }
      }

  }
})();



      function deleteItemSync(aFileItemId) {
          console.log('deleteItemSync() started.  aFileItemId='+aFileItemId);
          var deferred = $q.defer();

          $http.delete('./do-some-rest-call/' + aFileItemId)
              .then(function (data, status, headers, config) {
                  console.log("deleteItemSync() REST call returned success.  Stop waiting")
                  deferred.resolve(data);
              })
              .catch(function(data, status, headers, config)
              {
                  console.log("deleteItemSync() REST call had an error. Stop waiting.");
                    deferred.reject(status);
              });

            console.log("deleteItemSync() finished.  Returned deferred promise");
            return deferred.promise;
        }
