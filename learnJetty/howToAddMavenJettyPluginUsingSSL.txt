How to Make Quick Webapp Updates with the Maven Jetty Plugin (using SSL)
------------------------------------------------------------------------

Assumptions:
 A) You have Maven Installed
 B) You are using Intellij Community Edition to debug your webapp
 C) You have already created a Java Keystore and Trust
    and they are located here:
       c:/tools/certs/keystore.jks 
       c:/tools/certs/myTruststore.jks
       
       
 
References
----------
https://www.eclipse.org/jetty/documentation/9.1.5.v20140505/jetty-maven-plugin.html
http://juplo.de/configure-https-for-jetty-maven-plugin-9-0-x/


 
Procedures
----------
 1. Add this file:  jetty.xml
	a. Create an empty file here:   c:\tools\certs\jetty.xml
	b. Copy this to that file:
		 
		<?xml version="1.0"?>
		<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">
		 
		<!-- ============================================================= -->
		<!-- Configure the Http Configuration                              -->
		<!-- ============================================================= -->
		<Configure id="httpConfig" class="org.eclipse.jetty.server.HttpConfiguration">
		  <Set name="secureScheme">https</Set>
		  <Set name="securePort"><Property name="jetty.secure.port" default="8443" /></Set>
		  <Set name="outputBufferSize">32768</Set>
		  <Set name="requestHeaderSize">8192</Set>
		  <Set name="responseHeaderSize">8192</Set>
		  <Set name="sendServerVersion">true</Set>
		  <Set name="sendDateHeader">false</Set>
		  <Set name="headerCacheSize">512</Set>
		 
		  <!-- Uncomment to enable handling of X-Forwarded- style headers
		  <Call name="addCustomizer">
		    <Arg><New class="org.eclipse.jetty.server.ForwardedRequestCustomizer"/></Arg>
		  </Call>
		  -->
		</Configure>

			

 
 2. Create this file:  jetty-http.xml
    a. Create an empty file here:   c:\tools\certs\jetty-http.xml
    b. Copy this to that file:
 
		<?xml version="1.0"?>
		<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">
		 
		<!-- ============================================================= -->
		<!-- Configure the Jetty Server instance with an ID "Server"       -->
		<!-- by adding a HTTP connector.                                   -->
		<!-- This configuration must be used in conjunction with jetty.xml -->
		<!-- ============================================================= -->
		<Configure id="Server" class="org.eclipse.jetty.server.Server">
		 
		  <!-- =========================================================== -->
		  <!-- Add a HTTP Connector.                                       -->
		  <!-- Configure an o.e.j.server.ServerConnector with a single     -->
		  <!-- HttpConnectionFactory instance using the common httpConfig  -->
		  <!-- instance defined in jetty.xml                               -->
		  <!--                                                             -->
		  <!-- Consult the javadoc of o.e.j.server.ServerConnector and     -->
		  <!-- o.e.j.server.HttpConnectionFactory for all configuration    -->
		  <!-- that may be set here.                                       -->
		  <!-- =========================================================== -->
		  <Call name="addConnector">
		    <Arg>
		      <New class="org.eclipse.jetty.server.ServerConnector">
		        <Arg name="server"><Ref refid="Server" /></Arg>
		        <Arg name="factories">
		          <Array type="org.eclipse.jetty.server.ConnectionFactory">
		            <Item>
		              <New class="org.eclipse.jetty.server.HttpConnectionFactory">
		                <Arg name="config"><Ref refid="httpConfig" /></Arg>
		              </New>
		            </Item>
		          </Array>
		        </Arg>
		        <Set name="host"><Property name="jetty.host" /></Set>
		        <Set name="port"><Property name="jetty.port" default="8080" /></Set>
		        <Set name="idleTimeout"><Property name="http.timeout" default="30000"/></Set>
		      </New>
		    </Arg>
		  </Call>
		 
		</Configure>
 
 
 
 3. Create this file:  jetty-ssl.xml
    WARNING:  The default path of the keystore is here:    c:/tools/certs/keystore.jks 
    WARNING:  The default path of the trust store is here: c:/tools/certs/myTruststore.jks
              If this is not true, then update the 
                 <Set name="KeyStorePath">...</Set>
                 <Set name="TrustStorePath">...</Set>
                 
    a. Create an empty file here:   c:\tools\certs\jetty-ssl.xml
    b. Copy this to that file:
	
		<?xml version="1.0"?>
		<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">
		 
		<!-- ============================================================= -->
		<!-- Configure a TLS (SSL) Context Factory                         -->
		<!-- This configuration must be used in conjunction with jetty.xml -->
		<!-- and either jetty-https.xml or jetty-spdy.xml (but not both)   -->
		<!-- ============================================================= -->
		<Configure id="sslContextFactory" class="org.eclipse.jetty.util.ssl.SslContextFactory">
		  <Set name="KeyStorePath"><Property name="jetty.base" default="." />/<Property name="jetty.keystore" default="c:/tools/certs/keystore.jks"/></Set>
		  <Set name="KeyStorePassword"><Property name="jetty.keystore.password" default="changeit"/></Set>
		  <Set name="KeyManagerPassword"><Property name="jetty.keymanager.password" default="changeit"/></Set>
		  <Set name="TrustStorePath"><Property name="jetty.base" default="." />/<Property name="jetty.truststore" default="c:/tools/certs/myTruststore.jks"/></Set>
		  <Set name="TrustStorePassword"><Property name="jetty.truststore.password" default="changeit"/></Set>
		  <Set name="EndpointIdentificationAlgorithm"></Set>
		  <Set name="ExcludeCipherSuites">
		    <Array type="String">
		      <Item>SSL_RSA_WITH_DES_CBC_SHA</Item>
		      <Item>SSL_DHE_RSA_WITH_DES_CBC_SHA</Item>
		      <Item>SSL_DHE_DSS_WITH_DES_CBC_SHA</Item>
		      <Item>SSL_RSA_EXPORT_WITH_RC4_40_MD5</Item>
		      <Item>SSL_RSA_EXPORT_WITH_DES40_CBC_SHA</Item>
		      <Item>SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</Item>
		      <Item>SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</Item>
		    </Array>
		  </Set>
		 
		  <!-- =========================================================== -->
		  <!-- Create a TLS specific HttpConfiguration based on the        -->
		  <!-- common HttpConfiguration defined in jetty.xml               -->
		  <!-- Add a SecureRequestCustomizer to extract certificate and    -->
		  <!-- session information                                         -->
		  <!-- =========================================================== -->
		  <New id="sslHttpConfig" class="org.eclipse.jetty.server.HttpConfiguration">
		    <Arg><Ref refid="httpConfig"/></Arg>
		    <Call name="addCustomizer">
		      <Arg><New class="org.eclipse.jetty.server.SecureRequestCustomizer"/></Arg>
		    </Call>
		  </New>
		 
		</Configure>
  
  
 
 4. Create this file:  jetty-https.xml
    a. Create an empty file here:   c:\tools\certs\jetty-https.xml
    b. Copy this to that file:
 
		<?xml version="1.0"?>
		<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">
		 
		<!-- ============================================================= -->
		<!-- Configure a HTTPS connector.                                  -->
		<!-- This configuration must be used in conjunction with jetty.xml -->
		<!-- and jetty-ssl.xml.                                            -->
		<!-- ============================================================= -->
		<Configure id="Server" class="org.eclipse.jetty.server.Server">
		 
		  <!-- =========================================================== -->
		  <!-- Add a HTTPS Connector.                                      -->
		  <!-- Configure an o.e.j.server.ServerConnector with connection   -->
		  <!-- factories for TLS (aka SSL) and HTTP to provide HTTPS.      -->
		  <!-- All accepted TLS connections are wired to a HTTP connection.-->
		  <!--                                                             -->
		  <!-- Consult the javadoc of o.e.j.server.ServerConnector,        -->
		  <!-- o.e.j.server.SslConnectionFactory and                       -->
		  <!-- o.e.j.server.HttpConnectionFactory for all configuration    -->
		  <!-- that may be set here.                                       -->
		  <!-- =========================================================== -->
		  <Call id="httpsConnector" name="addConnector">
		    <Arg>
		      <New class="org.eclipse.jetty.server.ServerConnector">
		        <Arg name="server"><Ref refid="Server" /></Arg>
		          <Arg name="factories">
		            <Array type="org.eclipse.jetty.server.ConnectionFactory">
		              <Item>
		                <New class="org.eclipse.jetty.server.SslConnectionFactory">
		                  <Arg name="next">http/1.1</Arg>
		                  <Arg name="sslContextFactory"><Ref refid="sslContextFactory"/></Arg>
		                </New>
		              </Item>
		              <Item>
		                <New class="org.eclipse.jetty.server.HttpConnectionFactory">
		                  <Arg name="config"><Ref refid="sslHttpConfig"/></Arg>
		                </New>
		              </Item>
		            </Array>
		          </Arg>
		          <Set name="host"><Property name="jetty.host" /></Set>
		          <Set name="port"><Property name="https.port" default="8443" /></Set>
		          <Set name="idleTimeout"><Property name="https.timeout" default="30000"/></Set>
		        </New>
		    </Arg>
		  </Call>
		</Configure>
  
 
 
 5. Add this to your webapp's pom.xml
    NOTE:  Do not add carriage returns between the comma-separated list of files in <jettyXml>...</jettyXml>
    NOTE:  The *ORDER* of the xml files is IMPORTANT.  Do not change the order casually.
    
      <plugin>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>

        <!-- NOTE:  The jetty 9.4.6.v20170531 requires Java 1.8 -->
        <version>9.4.6.v20170531</version>

        <configuration>
          <webApp>
            <contextPath>/${project.artifactId}</contextPath>
          </webApp>
          <scanIntervalSeconds>10</scanIntervalSeconds>


          <jettyXml>
             c:/tools/certs/jetty.xml,c:/tools/certs/jetty-http.xml,c:/tools/certs/jetty-ssl.xml,c:/tools/certs/jetty-https.xml
          </jettyXml>
        </configuration>
      </plugin>
            
            
 6. Run your maven webapp using this command  [if you are just doing html/js/css changes only]
      DOS> cd /d c:\tools\intellij\workspace\springMvcWebApp
      DOS> mvn jetty:run
    
    *OR*
    
    Run your maven webapp in debug mode using a DOS console
      DOS> set MAVEN_OPTS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y
      DOS> cd /d c:\tools\intellij\workspace\springMvcWebApp
      DOS> mvn jetty:run

    Or, run your maven webapp in debug mode using a CYGWIN console
      CYGWIN> cd /cygdrive/c/tools/intellij/workspace/springMvcWebApp
      CYGWIN> export MAVEN_OPTS="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y"
      CYGWIN> mvn jetty:run
 
 
 
 7. Make a change to your JSP
    -- The maven-jetty-plugin will pick it up within 10 seconds
    
    
    
 8. Open your web page
    http://localhost:8080/ <artifactId> / welcome
    
 NOTE:  By default, the jetty plugin uses the artifactId as the webapp name
    
 This is *alot* faster than having to redeploy the webapp 
 
