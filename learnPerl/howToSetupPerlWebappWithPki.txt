How to Setup Perl Web App with PKI Authentication on Centos 6
-------------------------------------------------------------

Assumptions:
 A) You have an Apache http service already installed
 B) You have perl installed already

 
References
----------
https://www.dwheeler.com/essays/apache-cac-configuration.html

INCOMPLETE

 
Chapter 1:  Setup Apache Httpd to run Perl scripts on port 8080
---------------------------------------------------------------
 1. Configure httpd to run perl web apps
    a. Open the file for editing
       unix> vi /etc/httpd/conf/httpd.conf 
       
    a. Find this line
          Options Indexes FollowSymLinks
       Replace with this line
          Options Indexes FollowSymLinks ExecCGI
 
    c. Find this line
          #AddHandler cgi-script .cgi
       Replace with this line
          AddHandler cgi-script .cgi .pl 
    
    d. Add this to the end of the httpd.conf file
    
          <VirtualHost *:8080>
             ServerAdmin webmaster@dummy-host.example.com
             DocumentRoot /var/www/html
             ServerName myCentos
             ErrorLog logs/error_log 
             CustomLog logs/access_log common
          </VirtualHost>
     
    e. Find this line within httpd.conf 
          Listen 80
       Replace with this line
          Listen 8080


 2. Make sure apache:apache owns the /etc/httpd directory
    unix> sudo -s
    unix> chown apa-R /etc/httpd
    
 3. Restart the httpd service
    unix> sudo service httpd restart
    
 4. Create a test perl script to run within httpd
    unix> vi /var/www/html/bogus.pl
    
      #!/usr/bin/perl
      print "Content-type: text/html; charset=iso-8859-1\n\n";
      print "<phtml>";
      print "<body>";
      print "Test Page";
      print "</body>";
      print "</html>";

 5. Give this new file execute permission
    unix> chown apache:apache /var/www/html/bogus.pl
    unix> chmod ugo+x /var/www/html/bogus.pl
    
 6. Attempt to connect to Apache httpd using port 8080
    a. Open a browser
    b. Go to http://localhost:8080/bogus.pl
    -- You should see "Test Page"
    
  

Chapter 2:  Add SSL to the Apache Httpd listening on port 8443
--------------------------------------------------------------
 1. Generate SSL Server Cert
    NOTE:  When complete, you should have these files:
           /tmp/server.crt
           /tmp/rsa.key
           
 2. Allow Apache httpd SELinux access to the server.crt and rsa.key  (with SELinux enforcement)
    NOTE:  I had problems with Centos.  Here's my fix:
    unix> sudo -s
    unix> chcon unconfined_u:object_r:httpd_config_t:s0 /tmp/rsa.key
    unix> chcon unconfined_u:object_r:httpd_config_t:s0 /tmp/server.crt
    
    How do you know the context?  Look in the /etc/httpd/logs/error_log
    You should see this:
      [Tue Oct 03 21:50:33 2017] [notice] SELinux policy enabled; httpd running as context unconfined_u:system_r:httpd_t:s0
      [Tue Oct 03 21:50:33 2017] [notice] suEXEC mechanism enabled (wrapper: /usr/sbin/suexec)
      [Tue Oct 03 21:50:33 2017] [error] (13)Permission denied: Init: Can't open server certificate file /tmp/server.crt
  
   This tells you that the context is unconfined_u:system_r:httpd_t:s0
   
   
 
 3. Change apache httpd so it listens on port 8443 and enable SSL
    unix> vi /etc/httpd/conf/httpd.conf 

   a. Tell Apache to lod mod_ssl
       Add this line at the top:
          LoadModule ssl_module modules/mod_ssl.so

   b. Find this line within httpd.conf 
          Listen 8080
       Replace with this line
          Listen 8443
    
   c. Remove this section
          <VirtualHost *:8080>
             ServerAdmin webmaster@dummy-host.example.com
             DocumentRoot /var/www/html
             ServerName myCentos
             ErrorLog logs/error_log 
             CustomLog logs/access_log common
          </VirtualHost>
  
    e. Add this section
         <VirtualHost *:8443>
             ServerAdmin webmaster@dummy-host.example.com
             DocumentRoot /var/www/html
             ServerName myCentos
             ErrorLog logs/error_log
             CustomLog logs/access_log common
 
             SSLEngine on
             SSLCertificateFile    "/tmp/server.crt"
             SSLCertificateKeyFile "/tmp/rsa.key"
             SSLVerifyClient none
             SSLVerifyDepth 1
         </VirtualHost>t

 4. Restart the httpd service
    unix> sudo service httpd restart
    
 5. Attempt to connect to Apache httpd using SSL on port 8443
    a. Open a browser
    b. Go to https://localhost:8443/bogus.pl
    -- You should see "Test Page"
 
    
    
Chapter 3:  Change Apache Httpd to require a PKI Client be sent
---------------------------------------------------------------
 1. Generate a PKI Client Cert (client.p12) and get the ca.crt
    NOTE:  The /tmp/ca.crt is the root-ca/public/root.pem file
    
 2. Allow Apache httpd SELinux access to the server.crt and rsa.key  (with SELinux enforcement)
    unix> sudo -s
    unix> chcon unconfined_u:object_r:httpd_config_t:s0 /tmp/ca.crt
    
 3. Change Apache httpd to require a PKI Client Certificate
    a. Edit the httpd.conf
       unix> vi /etc/httpd/conf/httpd.conf 
   
    b. Change this line:
         SSLVerifyClient none
       To this line:
         SSLVerifyClient require

    c. Add this line
         SSLCACertificateFile  "/tmp/ca.crt"


    When completed, your virtualhost section should look like this:
        <VirtualHost *:8443>
            ServerAdmin webmaster@dummy-host.example.com
            DocumentRoot /var/www/html
            ServerName myCentos
            ErrorLog logs/error_log
            CustomLog logs/access_log common

            SSLEngine on
            SSLCertificateFile    "/tmp/server.crt"
            SSLCertificateKeyFile "/tmp/rsa.key"
            SSLCACertificateFile  "/tmp/ca.crt"
            SSLVerifyClient require
            SSLVerifyDepth 1
        </VirtualHost>
    
    
    
 4. Restart the httpd service
    unix> sudo service httpd 
  
    
 5. Import the PKI Client Cert (client.p12) into your browser
 
 5. Import the public CA (/tmp/ca.crt) into your browser as a trusted authority
 
 6. Attempt to connect to Apache httpd using your PKI Client with SSL on port 8443
    a. Open a browser
    b. Go to https://localhost:8443/bogus.pl
    -- You sohuld be prompted to select a certificate, press OK
    -- You should see "Test Page" 
 
 
    
Chapter 4:  Setup nginx as the proxy listening on port 443
----------------------------------------------------------
 1. Install nginx on centos 6
    [see learnNginx / howToInstallNginx.txt]

 2. Modify nginx.conf to forward requests to the apache httpd listening on port 8443
    unix> sudo vi /etc/nginx/nginx.conf
    
    Change it to this:
    
        user  nginx;
        worker_processes  1;

        # error_log  /var/log/nginx/error.log debug;
        pid        /var/run/nginx.pid;


        events {
            worker_connections  1024;
        }

        http {

            # enable reverse proxy
            proxy_redirect              off;
            proxy_set_header            Host            $http_host;
            proxy_set_header            X-Real-IP       $remote_addr;
            proxy_set_header            X-Forwared-For  $proxy_add_x_forwarded_for;
            proxy_ssl_session_reuse off;

            upstream streaming_example_com
            {
                  server 127.0.0.1:8443;
            }

            server
            {
                listen       443 default ssl;
                server_name  mycentos;
                access_log   /var/log/nginx/access.log;
                error_log    /var/log/nginx/error.log debug;

                ssl_certificate        /tmp/server.crt;
                ssl_certificate_key    /tmp/rsa.key;
                ssl_client_certificate /tmp/ca.crt;
                ssl_verify_client optional;


                ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
                ssl_prefer_server_ciphers on;
                ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
                ssl_session_timeout 30m;
                ssl_session_cache shared:SSL:50m;
                add_header Strict-Transport-Security max-age=15768000;


                location /myapp
                {
                    proxy_set_header Host $http_host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-Ssl on;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header X-Frame-Options  SAMEORIGIN;
                    proxy_set_header X-Forwarded-Host $http_host;
                    proxy_set_header X-Forwarded-Server $http_host;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-UA-Compatible IE=Edge;

                    # Clear out the SSL headers
                    proxy_set_header SSL_CLIENT_S_DN "";
                    proxy_set_header SSL_CLIENT_I_DN "";
                    proxy_set_header SSL_CLIENT_VERIFY "";
                    proxy_set_header SSL_CLIENT_CERT "";

                    # Set SSL Headers for C3 Security
                    proxy_set_header SSL_CLIENT_S_DN $ssl_client_s_dn;
                    proxy_set_header SSL_CLIENT_CERT $ssl_client_cert;

                    proxy_set_header X-Forwarded-Host $host;
                    proxy_set_header X-Forwarded-Server $host;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_pass  https://streaming_example_com;
                }
            }
        }


    
 4. Restart nginx
    unix> sudo service nginx restart 
    
 5. Verify that https://localhost/myapp/bogus.pl  forwards you to https://localhost:8443/bogus.pl
    a. Open a browser
    b. Connect to https://localhost/myapp/bogus.pl
       -- You should see the welcome page
       
       
    
 


