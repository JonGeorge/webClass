How to Install StreamParse (to Run Apache Storm using Python bolts and spouts)
------------------------------------------------------------------------------
Streamparse lets you create Apache Storm bolts and spouts using Python

The lein build tool is used to
  + resolve dependencies to Storm itself
  + install it locally
  + run Storm topologies locally
  + add dependencies for community-supported JVM-based Spout implementations
  + offer an interactive debugging REPL
  + package your topologies as an "uberjar" for submission to a production Storm cluster. All of this is scripted under the hood using a small command-line Clojure program that is included with streamparse.

The Clojure DSL is essentially just a lightweight configuration file format that happens to be written in Clojure.


References
----------
https://github.com/Parsely/streamparse
https://streamparse.readthedocs.io/en/master/quickstart.html
https://github.com/technomancy/leiningen#leiningen
http://blog.zymr.com/apache-storm-streamparse-python
http://blog.zymr.com/introduction-to-apache-storm
http://hackersome.com/p/mbijon/streamparse


Assumptions
 A) You have gcc installed on your box
 B) You have a Java JDK (to run lein) installed on your box
 C) You have python headers installed (python dev package) to compile pycrypto
    
 
Procedure
---------
 1. Install lein
    a. Download the lein unix script and put is in a place that's in the path -- e.g., /sbin
       unix> sudo -s
       unix> cd /sbin
       unix> wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
       unix> chmod ugo+x ./lein
       
    b. Run lein
       NOTE:  You need to havea java in your PATH
       unix> lein
       Downloading Leiningen to /home/adam/.lein/self-installs/leiningen-2.6.1-standalone.jar now...
       
    c. Verify that lein is up to date
       unix> lein version
       Leiningen 2.6.1 on Java 1.8.0_73 Java HotSpot(TM) 64-Bit Server VM


 2. Install Anaconda2
    NOTE:  This will install python 2.7.11 and 250+ data science modules into the /opt/anaconda2 directory
    [see howToInstallAnacondaLibsOnCentos.txt]
   
  
 3. Use pip to install streamparse
    NOTE:  Make sure you use the pip that comes with anaconda2
    unix> which pip
    /opt/anaconda2/bin/pip
   
    unix> sudo /opt/anaconda2/bin/pip install streamparse
          Collecting streamparse
          . . .
          Building wheels for collected packages: streamparse, prettytable, simplejson
            Running setup.py bdist_wheel for streamparse ... done
            Stored in directory: /root/.cache/pip/wheels/d6/de/1a/a6c86edaed19447f2a50148fd6f56986611f1e01b4ad20d8b0
            Running setup.py bdist_wheel for prettytable ... done
            Stored in directory: /root/.cache/pip/wheels/b6/90/7b/1c22b89217d0eba6d5f406e562365ebee804f0d4595b2bdbcd
            Running setup.py bdist_wheel for simplejson ... done
            Stored in directory: /root/.cache/pip/wheels/e4/32/71/60b361b0d05433eb9d1dd3d47619931c08cc4e387dc494ad3c
          Successfully built streamparse prettytable simplejson
          Installing collected packages: invoke, ecdsa, paramiko, fabric, prettytable, simplejson, contextlib2, streamparse
          Successfully installed contextlib2-0.5.3 ecdsa-0.13 fabric-1.11.1 invoke-0.12.2 paramiko-1.17.0 prettytable-0.7.2 simplejson-3.8.2 streamparse-2.1.4


 4. Use pip to install some *additional* stremaing-analytic python packages
    unix> sudo /opt/anaconda2/bin/pip install proton
    unix> sudo /opt/anaconda2/bin/pip install stomp.py      # Yes, this is the correct name
    unix> sudo /opt/anaconda2/bin/pip install expiringdict
    unix> sudo /opt/anaconda2/bin/pip install python-qpid-proton   
 
 
 5. Verify that the python packages were all installed
    unix> conda list | grep -i -E 'expiring|stomp|proton|streamparse|qpid'
          expiringdict              1.1.3                     <pip>
          proton                    0.8.8                     <pip>
          python-qpid-proton        0.12.2                    <pip>
          stomp.py                  4.1.11                    <pip>
          streamparse               2.1.4                     <pip>

 
 6. Try out the wordcount project
    a. Verify that sparse is in your PATH
       unix> sparse --version
       sparse 2.1.4

    b. Create the wordcount project
       unix> sparse quickstart wordcount
    
    c. Run the wordcount project
       unix> cd wordcount
       unix> sparse run
       
  
 7. Add logging to wordcount
     -- The Bolt and Spout classes have an embedded logger
     -- So, call self.log(message, level=None)
     
     
          from __future__ import absolute_import, print_function, unicode_literals
          
          from collections import Counter
          from streamparse.bolt import Bolt
          
          
          class WordCounter(Bolt):
          
              def initialize(self, conf, ctx):
                  self.log("WordCounter.initialize() called")
                  self.counts = Counter()
          
              def process(self, tup):
                  word = tup.values[0]
                  self.counts[word] += 1
                  self.emit([word, self.counts[word]])
                  self.log('%s: %d' % (word, self.counts[word]))



     
     
