Logback Tricks
--------------

1. If you are building your own Java JAR, then do *NOT* include any logging implementation
   Instead, use SLF4j.  This serves as a simple facade or abstraction for various logging frameworks 
   
   Advantages:  This allows allowing the end user to plug in the desired logging framework at deployment time.
   There are many implementations of logging
          a) log4j
          b) logback-classic
          c) java-util logging
          d) jakara commons logging         
   You do not know which one your end user will use.  So, give the user the option.
   
   
   So, in your pom.xml
    <dependency>
        <!-- You have SLF facade setup -- but there is no implementation -->
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>1.7.5</version>
    </dependency>
   
   
   Then, you package up your java jar file.  Now, anyone can plug-in their logging implementation
   
   
   
   How to use my jar with an existing project configured with log4j
   ----------------------------------------------------------------
   Suppose your project is using log4j and it has a log4j.xml or log4j.properties.
   Here's how you set it up:
   
     <dependency>
        <!-- Include the dependency for your special java JAR that has no logging implementation -->
        <groupId>whatever</groupId>
        <artifactId>myFancyJar</artifactId>
        <version>1.0.0</version>
    </dependency>   
   
    <dependency>
        <!-- Tell slf4j to send all logging to my log4j -->
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
        <version>1.7.12</version>
    </dependency>

  
  
  
   
   How to use my jar with an existing project configured with Logback
   ------------------------------------------------------------------
   Suppose your project is using logback and it has a logback.xml.  
   Here's how you set it up:

     <dependency>
        <!-- Include the dependency for your special java JAR that has no logging implementation -->
        <groupId>whatever</groupId>
        <artifactId>myFancyJar</artifactId>
        <version>1.0.0</version>
    </dependency>   
   
    <dependency>
         <!-- Tell slf4j to send all logging to my logback -->
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.1.3</version>
    </dependency>


   
   
   How to use my jar with an existing project configured with slf4j-simple
   -----------------------------------------------------------------------
   Suppose your project is using slf4j-simple and no resource file.
   Log4j-simple does not require a resource file
   Only messages of level INFO and higher are printed. 
   All messages of level DEBUG are ignored
   Here's how to cause the myFancyJar dependency to use the project's slf4j-simple implementation:
   
     <dependency>
        <!-- Include the dependency for your special java JAR that has no logging implementation -->
        <groupId>whatever</groupId>
        <artifactId>myFancyJar</artifactId>
        <version>1.0.0</version>
    </dependency>   
   
    <dependency>
        <!-- Tell slf4j to send all logging to my slf4j-simple -->
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-simple</artifactId>
        <version>1.7.12</version>
    </dependency>
   
   
   
 