How to Setup Logback for Running Tests in your Java JAR Project
---------------------------------------------------------------

ASSUMPTIONS:
 1) You have Maven installed
 2) You have the mvn command in your PATH
 
 
Procedures
----------
1) Create a simple Mavan Java JAR projet in Eclipse
   
   a) Startup Eclipse
      
   b) Pull File / New Project... / Java Project
      Press <next>
      
   c) In the "Create a Java Project"
      Project Name:  playWithLogback
      Press <Finish>
    

    
2) Convert the Eclipse Project to a Maven Project
   a) Right-click on "playWithLogback" -> Configure -> Convert to Maven Project
   b) In the "Maven POM" popup
      Group Id:     playWithLogback
      Artifact ID:  playWithLogback
      Version:      0.0.1-SNAPSHOT
      Packaging:    jar
      Press <Finish>

  

3) Setup the standard Maven directories to your Eclipse project
   NOTE:  Eclipse projects put java source code here:
              src/
              
          But, Maven uses this directory sturcture
              src/main/
              src/main/java/
              src/main/resources/
              src/test/
              src/test/java
              src/test/resources/
 
    So, we need to create these directories and tell Eclipse to use them
    
    
 
   a) Remove this line from your pom.xml
          <sourceDirectory>src</sourceDirectory>
   
   
 
   So, we need to Tell Eclipse to look for java code in these directories

   b) Right-click on the src -> Build Path -> Remove from Build Path
      NOTE:  This tells Eclipse to treat src/ as a regular directory
      
   c) Right-click on "src" -> New -> Folder:   main
   d) Right-click on "main" -> New -> Folder:    java
   e) Right-click on "main" -> New -> Folder:    resources
  
   f) Right-click on "src" -> New -> Folder:   test
   g) Right-click on "test" -> New -> Folder:    java
   h) Right-click on "test" -> New -> Folder:    resources

   Now, you should have this directory structure
      src/
      src/main/
      src/main/java/
      src/main/resources/
      src/test/
      src/test/java
      src/test/resources/
    
   i) Right-click on src/main/java -> Build Path -> Use as Source Folder
   j) Right-click on src/main/resources -> Build Path -> Use as Source Folder
   k) Right-click on src/test/java -> Build Path -> Use as Source Folder
   l) Right-click on src/test/resources -> Build Path -> Use as Source Folder



   
4) Add logback dependencies
   a) Right-click on "playWithLogback" -> Maven -> Add Dependency
      Add this dependency
      
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
        </dependency>
        
        Now, look at what Maven added to your project:
        Browse to playWithLogback -> Maven Dependencies
        -- You should see these 3 jar files
           1) logback-classic-1.0.13.jar
           2) logback-core-1.0.13.jar
           3) slf4j-api-1.7.5.jar
           
           
           
5) Create a sample class called Stuff
   Right-click on src/main/java -> new -> Class 
     Name:  Stuff
     Check the checkbox "public static void main(String[] args)
     Press <Finish>
    
    You should see this in your Stuff.java:
    
        package playWithLogback;

        public class Stuff {

            public static void main(String[] args)
            {
                // TODO Auto-generated method stub

            }
        }

    
    
    
6) Change your class so that it looks this:

        package playWithLogback;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;

        public class Stuff 
        {
            private static final Logger logger = LoggerFactory.getLogger(Stuff.class);
            
            public static void main(String[] args) 
            {
                logger.debug("main() started:  args.length={}", args.length );

                logger.debug("main() finished");
            }

        }

      
      
      
7) Create a logback.xml in your resources/ directory
   a) Right-click on "src/main/resources" -> New -> Other.... -> File
      Press <Next>

   b) File Name:  logback.xml
      Press <Finish>

   c) Copy this text to your logback.xml file
      WARNING:  There can be no loading spaces before <?xml....>
      
        <?xml version="1.0" encoding="windows-1252" ?>
        <configuration debug="false">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %c %m%n</pattern>
                </encoder>
            </appender>
            

            <logger name="playWithLogback" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>   
         
            
            <root level="DEBUG">
                <appender-ref ref="CONSOLE"/>
            </root>
            
        </configuration>   
           
      
      
      
8) Set a break point in your main and step through it
   a) Set a breakpoint in the main() of Stuff.java
   
   b) Right-click on Stuff.java -> Debug As -> Java Application
   
      You should see this in your console
        22:49:37,524 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy]
        22:49:37,524 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml]
        22:49:37,524 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback.xml] at [file:/C:/tools/eclipse_kepler/workspace/playWithLogback/target/classes/logback.xml]
        22:49:37,602 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
        22:49:37,602 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [CONSOLE]
        22:49:37,618 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
        22:49:37,633 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [playWithLogback] to DEBUG
        22:49:37,633 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting additivity of logger [playWithLogback] to false
        22:49:37,633 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [CONSOLE] to Logger[playWithLogback]
        22:49:37,633 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to DEBUG
        22:49:37,633 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [CONSOLE] to Logger[ROOT]
        22:49:37,633 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
        22:49:37,649 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@37f0c4d2 - Registering current configuration as safe fallback point
        06/21/2015 16:24:25 playWithLogback.Stuff main() started:  args.length=0
        06/21/2015 16:24:26 playWithLogback.Stuff main() finished

        
     NOTE:  If you want to reduce the logback debugging, change this line in your logback.xml to this
              <configuration debug="false">
                          
                          
                          
        
9) Add a logback-test.xml file to your src/test/resources/ directory
   NOTE:  This logback-test.xml will only be applied on Unit Tests
   
    <?xml version="1.0" encoding="windows-1252" ?>
        <configuration debug="false">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %c %m%n</pattern>
                </encoder>
            </appender>
            

            <logger name="playWithLogback" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>   
         
            
            <root level="DEBUG">
                <appender-ref ref="CONSOLE"/>
            </root>
            
        </configuration>   


10) Add JUnit 4 dependency -- but only in the "test" scope
    Add this to your pom.xml
    
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
        <scope>test</scope> 
    </dependency>
    

11) Create a JUnit Test class
    a) Right-click on "src/test/java" -> New -> Other....
       Type-in junit
       Select JUnit Test Case and press <Next>
    
    b) In the "Junit Test Case" screen
       package:  playWithLogback
       name:     StuffTest
       Press <Finish>
      
       You should now have a StuffTest.java class that looks like this:
    
            package playWithLogback;

            import static org.junit.Assert.*;

            import org.junit.Test;

            public class StuffTest {

                @Test
                public void test() {
                    fail("Not yet implemented");
                }

            }

    c) Change the class to look like this
    
            package playWithLogback;

            import org.junit.Test;
            import org.slf4j.Logger;
            import org.slf4j.LoggerFactory;

            public class StuffTest {

                private static final Logger logger = LoggerFactory.getLogger(StuffTest.class);

                
                @Test
                public void test()
                {
                    logger.debug("test() started.");
                
                    Stuff stuff = new Stuff();
                    stuff.doSomething();
                    
                    logger.debug("test() finished.");
                }

            }

    
    d) Add this method to your Stuff.java class
        public void doSomething()
        {
          logger.debug("doSomething() started");
          
          logger.debug("doSomething() finished");
        }
    
    
12) Use Eclipse to run your JUnit Test
    a) Set a breakpoint in StuffTest.java
    b) Right-click on StuffTest.java -> Debug As -> JUnit Test  
    
    You should see this in your console
    06/21/2015 23:02:49 playWithLogback.StuffTest test() started.
    06/21/2015 23:02:52 playWithLogback.Stuff doSomething() started
    06/21/2015 23:02:52 playWithLogback.Stuff doSomething() finished
    06/21/2015 23:02:53 playWithLogback.StuffTest test() finished.

    
    
13) Use the mvn command-line to run your test
    a) Open a DOS window by pressing <Start><Run>CMD
       DOS> cd /d c:\tools\eclipse\workspace\playWithLogback
       DOS> mvn clean test
       
       You should see this in your DOS window
       
       06/21/2015 23:04:23 playWithLogback.StuffTest test() started.
       06/21/2015 23:04:23 playWithLogback.Stuff doSomething() started
       06/21/2015 23:04:23 playWithLogback.Stuff doSomething() finished
       06/21/2015 23:04:23 playWithLogback.StuffTest test() finished.