Into to SLF4J and Logback
-------------------------


SLF4J
-----
The Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction for various logging frameworks (e.g. java.util.logging, logback, log4j) allowing the end user to plug in the desired logging framework at deployment time. 


Log4j
-----
Log4j is a logging implementation.


Logabck
-------
Logback is a Logging Implementation written by the same author as Log4j.  It has many improvements over Log4j.



So, the trick is that your code always uses the slf4j logger


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
  
public class WelcomeController 
 {
    private final static Logger logger = LoggerFactory.getLogger(WelcomeController.class);
  
    public void doSomething()
     {
        logger.debug("Log something");
        
        int x=5;
        logger.debug("x={}", x);
     }   
 }







Using SLF4j with Logback in your project
--------------------------------------
If you wish to use Logback as the underlying logging framework, all you need to do is to declare this dependency:

    <dependency> 
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.0.13</version>
    </dependency>

Then, add logback.xml into your resources/ directory, and SLF4J will find it and use it.

NOTES:
 1) This will also pull logback-classic-1.0.13.jar, slf4j-api-1.7.12.jar, and logback-core-1.0.13.jar into your project.
 2) Explicitly declaring a dependency on logback-core-1.0.13 or slf4j-api-1.7.12.jar is not wrong and may be necessary to impose the correct version of said artifacts by virtue of Maven's "nearest definition" dependency mediation rule.







Using SLF4j with Log4j in your project
--------------------------------------
If you wish to use log4j as the underlying logging framework, all you need to do is to declare this dependency:

    <dependency> 
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
        <version>1.7.12</version>
    </dependency>

Then, add log4j.properties or log4j.xml into your resources/ directory, and SLF4J will find it and use it.

NOTES:
 1) This will also pull the slf4j-api-1.7.12.jar and log4j-1.2.17.jar into your project
 2) Explicitly declaring a dependency on log4j-1.2.17.jar or slf4j-api-1.7.12.jar is not wrong and may be necessary to impose the correct version of said artifacts by virtue of Maven's "nearest definition" dependency mediation rule.


