How to Make Quick Webapp Updates with the Maven Jetty Plugin (using SSL)
------------------------------------------------------------------------

Assumptions:
 A) You have Maven Installed
 B) You are using Intellij Community Edition to debug your webapp
 
 
References
----------
http://www.eclipse.org/jetty/documentation/9.1.5.v20140505/configuring-ssl.html


INCOMPLETE -- does not work

 
Procedures
----------
 1. Add this file:  jetty-ssl.xml
 
	    <?xml version="1.0"?>
		<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_3.dtd">
		
		<!-- ============================================================= -->
		<!-- Base SSL configuration                                        -->
		<!-- This configuration needs to be used together with 1 or more   -->
		<!-- of jetty-https.xml or jetty-http2.xml                         -->
		<!-- ============================================================= -->
		<Configure id="Server" class="org.eclipse.jetty.server.Server">
		
		  <!-- =========================================================== -->
		  <!-- Add a SSL Connector with no protocol factories              -->
		  <!-- =========================================================== -->
		  <Call  name="addConnector">
		    <Arg>
		      <New id="sslConnector" class="org.eclipse.jetty.server.ServerConnector">
		        <Arg name="server"><Ref refid="Server" /></Arg>
		        <Arg name="acceptors" type="int"><Property name="jetty.ssl.acceptors" deprecated="ssl.acceptors" default="-1"/></Arg>
		        <Arg name="selectors" type="int"><Property name="jetty.ssl.selectors" deprecated="ssl.selectors" default="-1"/></Arg>
		        <Arg name="factories">
		          <Array type="org.eclipse.jetty.server.ConnectionFactory">
		            <!-- uncomment to support proxy protocol
		            <Item>
		              <New class="org.eclipse.jetty.server.ProxyConnectionFactory"/>
		            </Item>-->
		          </Array>
		        </Arg>
		
		        <Set name="host"><Property name="jetty.ssl.host" deprecated="jetty.host" /></Set>
		        <Set name="port"><Property name="jetty.ssl.port" deprecated="ssl.port" default="8443" /></Set>
		        <Set name="idleTimeout"><Property name="jetty.ssl.idleTimeout" deprecated="ssl.timeout" default="30000"/></Set>
		        <Set name="soLingerTime"><Property name="jetty.ssl.soLingerTime" deprecated="ssl.soLingerTime" default="-1"/></Set>
		        <Set name="acceptorPriorityDelta"><Property name="jetty.ssl.acceptorPriorityDelta" deprecated="ssl.acceptorPriorityDelta" default="0"/></Set>
		        <Set name="acceptQueueSize"><Property name="jetty.ssl.acceptQueueSize" deprecated="ssl.acceptQueueSize" default="0"/></Set>
		      </New>
		    </Arg>
		  </Call>
		
		  <!-- =========================================================== -->
		  <!-- Create a TLS specific HttpConfiguration based on the        -->
		  <!-- common HttpConfiguration defined in jetty.xml               -->
		  <!-- Add a SecureRequestCustomizer to extract certificate and    -->
		  <!-- session information                                         -->
		  <!-- =========================================================== -->
		  <New id="sslHttpConfig" class="org.eclipse.jetty.server.HttpConfiguration">
		    <Arg><Ref refid="httpConfig"/></Arg>
		    <Call name="addCustomizer">
		      <Arg>
		        <New class="org.eclipse.jetty.server.SecureRequestCustomizer">
		          <Arg name="sniHostCheck" type="boolean"><Property name="jetty.ssl.sniHostCheck" default="true"/></Arg>
		          <Arg name="stsMaxAgeSeconds" type="int"><Property name="jetty.ssl.stsMaxAgeSeconds" default="-1"/></Arg>
		          <Arg name="stsIncludeSubdomains" type="boolean"><Property name="jetty.ssl.stsIncludeSubdomains" default="false"/></Arg>
		        </New>
		      </Arg>
		    </Call>
		  </New>
		
		</Configure>
 
 
 
 2. Add this file:  jetty-ssl-context.xml

		<?xml version="1.0"?>
		<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_3.dtd">
		
		<!-- ============================================================= -->
		<!-- SSL ContextFactory configuration                              -->
		<!-- ============================================================= -->
		<Configure id="sslContextFactory" class="org.eclipse.jetty.util.ssl.SslContextFactory">
		  <Set name="KeyStorePath">c:/tools/certs/keystore.jks</Set>
		  <Set name="KeyStorePassword">changeit</Set>
		  <Set name="KeyStoreType">JKS</Set>
		  <Set name="KeyStoreProvider"><Property name="jetty.sslContext.keyStoreProvider"/></Set>
		  <Set name="KeyManagerPassword">changeit</Set>
		  <Set name="TrustStorePath">c:/tools/certs/myTruststore.jks</Set>
		  <Set name="TrustStorePassword">changeit</Set>
		  <Set name="TrustStoreType">JKS</Set>
		  <Set name="TrustStoreProvider"><Property name="jetty.sslContext.trustStoreProvider"/></Set>
		  <Set name="EndpointIdentificationAlgorithm"></Set>
		  <Set name="NeedClientAuth"><Property name="jetty.sslContext.needClientAuth" deprecated="jetty.ssl.needClientAuth" default="false"/></Set>
		  <Set name="WantClientAuth"><Property name="jetty.sslContext.wantClientAuth" deprecated="jetty.ssl.wantClientAuth" default="false"/></Set>
		  <Set name="ExcludeCipherSuites">
		   <Array type="String">
		    <Item>SSL_RSA_WITH_DES_CBC_SHA</Item>
		    <Item>SSL_DHE_RSA_WITH_DES_CBC_SHA</Item>
		    <Item>SSL_DHE_DSS_WITH_DES_CBC_SHA</Item>
		    <Item>SSL_RSA_EXPORT_WITH_RC4_40_MD5</Item>
		    <Item>SSL_RSA_EXPORT_WITH_DES40_CBC_SHA</Item>
		    <Item>SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</Item>
		    <Item>SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</Item>
		   </Array>
		  </Set>
		  <Set name="useCipherSuitesOrder"><Property name="jetty.sslContext.useCipherSuitesOrder" default="true"/></Set>
		</Configure>
		 
 
 
 
 3. Add this to your webapp's pom.xml
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>

                <!-- NOTE:  The jetty 9.1.5.v2014050 version works with Java 1.7 -->
                <version>9.1.5.v20140505</version>

                <configuration>
                    <webApp>
                        <contextPath>/${project.artifactId}</contextPath>
                    </webApp>
                    <scanIntervalSeconds>10</scanIntervalSeconds>
                    
                    <jettyXml>c:/tools/certs/jetty-ssl.xml,c:/tools/certs/jetty-ssl-context.xml</jettyXml>
                     
                </configuration>
            </plugin>
            
 4. Run your maven webapp using this command  [if you are just doing html/js/css changes only]
      DOS> cd /d c:\tools\intellij\workspace\springMvcWebApp
      DOS> mvn jetty:run
    
    *OR*
    
    Run your maven webapp in debug mode using a DOS console
      DOS> set MAVEN_OPTS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y
      DOS> cd /d c:\tools\intellij\workspace\springMvcWebApp
      DOS> mvn jetty:run

    Or, run your maven webapp in debug mode using a CYGWIN console
      CYGWIN> cd /cygdrive/c/tools/intellij/workspace/springMvcWebApp
      CYGWIN> export MAVEN_OPTS="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y"
      CYGWIN> mvn jetty:run
 
 
 5. Make a change to your JSP
    -- The maven-jetty-plugin will pick it up within 10 seconds
    
 6. Open your web page
    http://localhost:8080/ <artifactId> / welcome
    
 NOTE:  By default, the jetty plugin uses the artifactId as the webapp name
    
 This is *alot* faster than having to redeploy the webapp 
 