How to Setup IntelliJ and Debug a Grails 2.4.4 Web App
------------------------------------------------------
IntelliJ allows you to debug Grails web applications without any special settings.


ASSUMPTIONS:
 1) You are running a 64-bit version of Windows  (Windows Vista, Windows 7, Windows 8 or later)
 2) You want to install the community edition of IntelliJ
 3) You have Java JDK 1.7.75 already installed
 4) You have Maven already installed
 5) You want to call your webapp:  grailsWebApp1


Procedures
----------
 1. Install IntelliJ Community Edition 14.1.4
    a. Download IntelliJ Community Edition
       1) Go to http://www.jetbrains.com/idea/download/index.html
       2) Click the "Download Community" button 
       3) Save ideaIC-14.1.4.exe  c:\vault\
   
    b. Install IntelliJ
       1) Run this program:  c:\vault\ideaIC-14.1.4.exe

       2) In the "Welcome to Intellij IDEA" screen, press Next
      
       3) In the "Choose Install Location" screen,  
          Set the destination directory to be:
            c:\tools\intellij
            Press Next
            
       4) In the "Installation Options" screen
          Check "Create Desktop Shortcut"
          Press Next
         
       5) In the "Choose Start Menu Folder", screen
          go with the default name 
          Press Install
      
       6) In the "Completing Intellij IDEA community edition", screen
          Press FInish
   
         
 2. Configure Intellij
    a. Run IntelliJ  (there should be a shortcut on your desktop)
       Or click on C:\tools\intellij\bin\idea.exe
         
    b. You may be asked if you wan to import your settings
       select "I do not have a previous version Of IntelliJ IDEA"
       Press OK
        
    c. In the "Set UI Theme"
       select "IntelliJ" and press "Next: Default Plugins"
        
    d. In the "Tune IDEA to your tasks"
       select "Next: Feature plugins"
        
    e. In the "Download feature plugins"
       select "Start using Intellij IDEA"
        
    f. Close Intellij
    
    g. Make sure Intellij is using your Maven settings.xml
       1) Pull File / Settings
       2) Search for Maven
       3) Under Build, Execution, Deployment -> Build Tools -> Maven
          -- Maven home directory:  C:\tools\apache-maven-3.2.3
          -- User settings file:    C:\tools\apache-maven-3.2.3\conf\settings.xml
       
    h. Create a workspace directory
       Create this directory:   c:\tools\intellij\workspace

         

 3. Install Grails 2.4.4
    a. Download Grails
       1) Go to https://github.com/grails/grails-core/releases/download/v2.4.4/grails-2.4.4.zip
       2) Save grails-2.4.4.zip to your c:\vault directory
         
         
    b. Install Grails
       1) Right-click on c:\vault\grails-2.4.4.zip  -> 7zip -> Extract Files....
       2) In the "Extract To" directory, type-in  c:\tools 
          Press OK
         
         Now, you have grails installed to here:
            c:\tools\grails-2.4.4
            
       3) Set your GRAILS_HOME environment variable to be c:\tools\grails-2.4.4
          a) Open the Environment Variables in Windows by pressing <Start><Run>environment
          b) Under "User variables for..." [on the top of this popup], 
             Click "New..."
                  Variable name:  GRAILS_HOME
                  Variable value: c:\tools\grails-2.4.4
         
             NOTE:  You have to open a *NEW* dos window to see environment variable changes
            
            
       4) Add the c:\tools\grails-2.4.4\bin directory to your path
          a) Open the Environment Variables in Windows by pressing <Start><Run>environment
          b) Under "User variables for..." [on the top of this popup], 
             Click "New..."  [if PATH already exists, then double-click on PATH and add a semicolon and append this to the end of the PATH]
                  Variable name:  PATH
                  Variable value: c:\tools\grails-2.4.4\bin
          
             NOTE:  You have to open a *NEW* dos window to see environment variable changes
    
        
    c. Verify Grails is instaled
       1) Press <Start><Run>CMD
          DOS> grails -version
      
          You should see the following:
          Grails version: 2.4.4
   

              
 4. Create a Grails Web Application with Maven integration
    NOTE:  These procedures will *NOT* work with Grails 3

    a. Create the grails app
       Open a DOS window by pressing <Start><Run>CMD
       DOS> cd /d c:\tools\intellij\workspace
       DOS> grails create-app grailsWebApp1   --plain-output 
            NOTE:  Now, you should have a grails app created here:
                   c:\tools\intellij\workspace\grailsWebApp1
                   
    b. Create the pom.xml for your grails app
       DOS> cd grailsWebApp1
       DOS> grails create-pom com.resnick  --plain-output 
       Now, you should have a pom.xml located here:
          c:\tools\intellij\workspace\grailsWebApp1\pom.xml
     
    c. Create an Intellij project file   
       DOS> grails integrate-with --intellij    --plain-output 
       Now, you should have Intellij files located here:
          c:\tools\intellij\workspace\grailsWebApp1\grailsWebApp1.iws
          c:\tools\intellij\workspace\grailsWebApp1\grailsWebApp1.ipr     <-- this is the file you can click on with Intellij
          c:\tools\intellij\workspace\grailsWebApp1\grailsWebApp1.iml
          
 
    d. Create a simple Domain class called Person
       DOS> grails create-domain-class demo.Person   --plain-output 
    
    e. Create the WelcomeController class
       DOS> grails create-controller Welcome   --plain-output 
 
 
 
 
 5. Create the web.xml template file
    DOS> grails install-templates
    -- Now, you should have this file:  src/templates/war/web.xml
 
 
 
    
    
 6. Open the project with Intellij
    a. Find the grailsWebApp1.ipr file
       Browse to C:\tools\intellij\workspace\grailsWebApp1
       Double-click on grailsWebApp1.ipr
       -- Intellij should open this project
          
    b. If you get a warning that says
          "The project has an older format"
       Press the Convert button
  
    c. Wait for Intellij to finish indexing
       
    d. Right-click on the pom.xml -> Add as Maven Project
       Wait for Intellij to finish resolving the maven dependencies
      
    e. Pull Run / Edit Configuration
       1) In the Run/Debug Configurations window
          press the "+" symbol
       2) Select Remote
       3) Enter these values:
          Name:           remote-grailsWebApp1
          Transport:      Socket
          Debugger Mode:  Attach
          Host:           localhost
          Port:           5005
              
       4) Press Apply
       5) Press OK
       
    f. Verify that your Intellij environment is using a Java 1.7 JDK
       1) Pull File /  Project Structure....
       2) Under Project SDK, select Java 1.7
          Press Apply
          Press OK
 
 
 
 7. Adjust Grail's settings so that all dependencies are stored in the Maven pom.xml
    a. Edit the grails-app/conf/BuildConfig.groovy
       -- In your buildConfig.groovy, make sure this exists:

        grails.project.dependency.resolution = {
            pom true
            
            . . .
        } 
        
    
    b. Remove everything from the dependencies section
    
         dependencies {
             // All dependencies are defined in the pom.xml
         }
    
    
    
    c. Remove everything from the plugins section
          plugins {
             // All plugins are defined in the pom.xml
         }
    
    
    
    
 8. Tell Maven to run grails in forked mode
    a. Edit the pom.xml
       Look for the grails-maven-plugin
           
       It should look seomthing like this:
    
              <plugin>
                <groupId>org.grails</groupId>
                <artifactId>grails-maven-plugin</artifactId>
                <version>2.4.4</version>
                <configuration>
                    <grailsVersion>${grails.version}</grailsVersion>

                    <!-- Whether to Fork a JVM to run Grails commands -->
                    <fork>true</fork>
                                        
                </configuration>
                <extensions>true</extensions>
            </plugin>
 
 
 
 9. Fix some defects with the generated pom.xml so that maven and grails work together well
    a. Add the version number fo the maven-surefire-plugin
        
       Inside the pom.xml, you should see this

             <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                . . .
             </plugin>
             
        Use the version 2.18.1.  So, this plugin looks like this:
             
             <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                . . .
             </plugin>                
    
    
    
    b. Update the version number of the maven-clean-plugin from 2.4.0 to 2.6.1
    
             <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>2.4.0</version>
                . . .
             </plugin>
               
                
      Change this version to 2.4.0 to 2.6.1 so this plugin looks like this:
    
              <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>2.6.1</version>
                . . .
             </plugin>
    
    
    
    c. Verify that this junit dependency exists in your pom.xml
       *IF* it is not found, then add it in
       
       This might already be present in your pom.xml  
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.11</version>
                <scope>test</scope>
            </dependency>      
    
    
    
10. Update the Asset Pipeline Plugin to a later version
    In the pom.xml update the version of the asset-pipeline to 2.5.1 (or the latest)
    
    If setting to version 2.5.1, it should look like this in your pom.xml
         <dependency>
            <groupId>org.grails.plugins</groupId>
            <artifactId>asset-pipeline</artifactId>
            <version>2.5.1</version>
            <scope>compile</scope>
            <type>zip</type>
        </dependency>
        
        
           
11. Fix the spock unit tests so they execute properly
    a. Browse to test/unit/grailsWebApp1/WelcomeControllerSpec
        
        Add this:
        
           void test()
             {
                  given: "test given"
                  System.out.println("WelcomeControllerSpec test finished")
             }

     b. Browse to test/unit/grailsWebApp1/PersonSpec
        Add this:
        
           void test()
             {
                 given: "test given"
                 System.out.println("PersonSpec test finished")
             }
         
        Now, the tests will run properly
      
 
 
12. Make sure your production datasource name is unique
    NOTE:  By default, you are setting-up an H2 database in memory with the name"prodDb"
           If you create 2 Grails webapps with the same H2 database name, then one will not deploy
           
    Edit the  DataSource.groovy
    Change "prodDb" to something unique
    
    
    You should see
    
    . . .
    
    production {
        dataSource {
            dbCreate = "update"
            url = "jdbc:h2:prodDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE"
    
    Change the "prodDb" within the url to something unique:
            url = "jdbc:h2:<PUT_UNIQUE_NAME_HERE>;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE"



13. Increase Logging
    a. Edit the Config.groovy
    
       Change the log4j configuration at the end to look like this:
           
		// log4j configuration
		log4j.main = {
		
		    appenders {
		        console name:'stdout',
		                layout:pattern(conversionPattern: '%d{MM/dd/yyyy HH:mm:ss} %-5p %c %m%n')
		    }
		
		    error  'org.codehaus.groovy.grails.web.servlet',        // controllers
		            'org.codehaus.groovy.grails.web.pages',          // GSP
		            'org.codehaus.groovy.grails.web.sitemesh',       // layouts
		            'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping
		            'org.codehaus.groovy.grails.web.mapping',        // URL mapping
		            'org.codehaus.groovy.grails.commons',            // core / classloading
		            'org.codehaus.groovy.grails.plugins',            // plugins
		            'org.codehaus.groovy.grails.orm.hibernate',      // hibernate integration
		            'net.sf.ehcache.hibernate'
		
		    info    'grails.app',
		            'org.hibernate'
		
		    debug   'org.springframework'
		    
		    root {
		        info 'stdout'
		        additivity = false
		    }
		}


14. Make sure asset pipeline is configured to show deferred scripts
    a. Add this to your views / layouts / main.gsp
    
        <asset:deferredScripts/>
          
          
    b. Verify it was added:
       After this change, your main.gsp should look like this:
       
        <!DOCTYPE html>
        <!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
        <!--[if IE 7 ]>    <html lang="en" class="no-js ie7"> <![endif]-->
        <!--[if IE 8 ]>    <html lang="en" class="no-js ie8"> <![endif]-->
        <!--[if IE 9 ]>    <html lang="en" class="no-js ie9"> <![endif]-->
        <!--[if (gt IE 9)|!(IE)]><!--> <html lang="en" class="no-js"><!--<![endif]-->
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
                <title><g:layoutTitle default="Grails"/></title>
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <link rel="shortcut icon" href="${assetPath(src: 'favicon.ico')}" type="image/x-icon">
                <link rel="apple-touch-icon" href="${assetPath(src: 'apple-touch-icon.png')}">
                <link rel="apple-touch-icon" sizes="114x114" href="${assetPath(src: 'apple-touch-icon-retina.png')}">
                <asset:stylesheet src="application.css"/>
                <asset:javascript src="application.js"/>
                <asset:deferredScripts/>
                <g:layoutHead/>
            </head>
            <body>
                <div id="grailsLogo" role="banner"><a href="http://grails.org"><asset:image src="grails_logo.png" alt="Grails"/></a></div>
                <g:layoutBody/>
                <div class="footer" role="contentinfo"></div>
                <div id="spinner" class="spinner" style="display:none;"><g:message code="spinner.alt" default="Loading&hellip;"/></div>
            </body>
        </html>
         
       
               
15. Modify the Person class
    a. Replace the grails-app/domain/demo/Person.groovy with this:
          
           package demo
           
           class Person 
           {
                 String firstName
                 String lastName
                 int age
            }

       
       
16. Modify the WelcomeController
    a. Replace the grails-app/controllers/grailsWebApp1/WelcomeController.groovy with this:
    
            package grailswebapp1
            
            import demo.Person
            
            class WelcomeController
            {
            
                def index()
                {
                    Person person = new Person(firstName: 'John', lastName:'Doe', age:55)
            
                    render view: "/welcome/index", model: [person: person]
                }
            
            }



17. Create the index.gsp view
    Create a file here:
         grailsWebApp1/grails-app/views/welcome/index.gsp
        
         Copy + Paste this into your index.gsp file
        
            <!DOCTYPE html>
            <html>
            <head>
                <meta name="layout" content="main"/>
                <title>Render Domain</title>
            </head>
            
            <body>
                Last Name: ${person.lastName} <br/>
                First Name: ${person.firstName} <br/>
                Age: ${person.age} <br/>
            </body>
            </html>
                
    
    
18. Run Application from the command-line
    DOS> cd /d c:\tools\intellij\workspace\grailsWebApp1
    DOS> grails run-app --plain-output
         or
    DOS> mvn grails:run-app
    
    You should see this output:
    |Loading Grails 2.4.4
    |Configuring classpath
    .
    |Environment set to development
    .................................
    |Packaging Grails application
    ...........
    |Compiling 4 source files
    .........................
    |Running Grails application
    |Server running. Browse to http://localhost:8080/grailsWebApp1
    
    
    
19. View the webapp in your web browser:
    a. Open a web browser
    b. Go to http://localhost:8080/grailsWebApp1
    c. Click on "grailsWebApp1.WelcomeController"
       -- You should see 
        Last Name: Doe
        First Name: John
        Age: 55 
         
         
    
20. Debug the Grails web app
    a. In Intellij, setup a breakpoint in the Hello Controller
       -- Press Shift-Shift
       -- Start typing in WelcomeController
       -- Select WelcomeController (grailsWebApp1)
       -- In the WelcomeController.groovy class, 
          Set a breakpoint on one of the lines in index()
        
     
    b. Open a DOS window by pressing <Start><Run>CMD
       In the DOS window type-in this:
       DOS> cd /d c:\tools\intellij\workspace\grailsWebApp1
       DOS> mvn grails:run-app -DforkDebug=true

        
    c. Wait for the DOS window to say this:
       Listening for transport dt_socket at address: 5005
        
        
    d. Back in Intellij, pull Run / Debug remote-grailsWebApp1
     
    e. Open a web browser and go to http://localhost:8080/grailsWebApp1
     
    f. Click on "grailsWebApp1.WelcomeController"
       -- Intellij should stop at your breakpoint in WelcomeController.groovy
       -- Press F9 to resume
      
    g. Press Control-C in your DOS window to kill your app server
     
     


How to solve the warning about maven-clean-plugin:jar:2.4.0 is missing
----------------------------------------------------------------------
[WARNING] The POM for org.apache.maven.plugins:maven-clean-plugin:jar:2.4.0 is missing, no dependency information a
vailable
[WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-clean-plugin:2.4.0: Plugin org.ap
ache.maven.plugins:maven-clean-plugin:2.4.0 or one of its dependencies could not be resolved: Failure to find org.a
pache.maven.plugins:maven-clean-plugin:jar:2.4.0 in https://repo.maven.apache.org/maven2 was cached in the local re
pository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced


Problem:  You are using the maven-clean-plugin version 2.4.0, but it is not found

PART 1:  Get the version of the maven-clean-plugin
  Solution:  Run this command to find the latest version
  DOS> cd /d c:\tools\intellij\workspace\grailsWebApp1
  DOS> mvn help:describe -DartifactId=maven-clean-plugin -DgroupId=org.apache.maven.plugins


  Name: Apache Maven Clean Plugin
  Description: The Maven Clean Plugin is a plugin that removes files generated at build-time in a project's directory.
  Group Id: org.apache.maven.plugins
  Artifact Id: maven-clean-plugin
  Version: 2.6.1
  Goal Prefix: clean


PART 2: Update the pom.xml by changing version 2.0 to version 2.6.1
   Inside the pom.xml, you should see this
  
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>2.4.0</version>
                . . .
                
             Change this version to 2.4.0 to 2.6.1 in this pom.xml
                



PART 3: Update the plugin dependencies
  DOS> mvn dependency:resolve-plugins



How to solve the warning  'build.plugins.plugin.version' for org.apache.maven.plugins:maven-surefire-plugin is missing
-----------------------------------------------------------------------------------------------------------
PART 1: Get the version of the maven-surefire-plugin
  DOS> cd /d c:\tools\intellij\workspace\grailsWebApp1
  DOS> mvn help:describe -DartifactId=maven-surefire-plugin -DgroupId=org.apache.maven.plugins

  Name: Maven Surefire Plugin
  Description: Surefire is a test framework project.
  Group Id: org.apache.maven.plugins
  Artifact Id: maven-surefire-plugin
  Version: 2.18.1
  Goal Prefix: surefire

PART 2: Update the pom.xml by setting the maven-surefire-plugin version to be 2.18.1
    Inside the pom.xml, you should see this

             <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                . . .
                
             The warning appears because the <version>...</version> is missing
             Add in the version, so it looke like this
             
             <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                . . .



PART 3: Update the plugin dependencies
  DOS> mvn dependency:resolve-plugins

  

How to solve this WARNING: Could not open/create prefs root node Software\JavaSoft\Prefs at root 0x80000002
----------------------------------------------------------------------------------------- 

