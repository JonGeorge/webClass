How to Setup an Apache Storm Topology Using TestData Spout, IP Normalizer, and ES bolts
---------------------------------------------------------------------------------------


Assumptions:
 A) You have Java JDK already installed
 B) You have Apache Storm installed [see howToSetupStormOnCentos.txt]
 C) You are Apache Storm on a CentOS unix server


References
----------
https://azure.microsoft.com/en-us/documentation/articles/hdinsight-storm-develop-java-topology/
https://github.com/davidkiss/storm-twitter-word-count
https://github.com/davidkiss/storm-twitter-word-count/blob/master/src/main/java/com/kaviddiss/storm/WordCounterBolt.java

 
Procedure
---------
 1. Verify that you have storm installed and in your path
    unix> storm version

    Running: /usr/java/jdk1.7.0_55/bin/java -client -Ddaemon.name= -Dstorm.options= -Dstorm.home=/opt/apache-storm-1.0.1 -Dstorm.log.dir=/opt/apache-storm-1.0.1/logs -Djava.library.path=/usr/local/lib:/opt/local/lib:/usr/lib -Dstorm.conf.file= -cp /opt/apache-storm-1.0.1/lib/kryo-3.0.3.jar:/opt/apache-storm-1.0.1/lib/reflectasm-1.10.1.jar:/opt/apache-storm-1.0.1/lib/minlog-1.3.0.jar:/opt/apache-storm-1.0.1/lib/clojure-1.7.0.jar:/opt/apache-storm-1.0.1/lib/log4j-core-2.1.jar:/opt/apache-storm-1.0.1/lib/servlet-api-2.5.jar:/opt/apache-storm-1.0.1/lib/log4j-slf4j-impl-2.1.jar:/opt/apache-storm-1.0.1/lib/log4j-over-slf4j-1.6.6.jar:/opt/apache-storm-1.0.1/lib/disruptor-3.3.2.jar:/opt/apache-storm-1.0.1/lib/slf4j-api-1.7.7.jar:/opt/apache-storm-1.0.1/lib/log4j-api-2.1.jar:/opt/apache-storm-1.0.1/lib/storm-core-1.0.1.jar:/opt/apache-storm-1.0.1/lib/storm-rename-hack-1.0.1.jar:/opt/apache-storm-1.0.1/lib/objenesis-2.1.jar:/opt/apache-storm-1.0.1/lib/asm-5.0.3.jar:/opt/apache-storm-1.0.1/conf org.apache.storm.utils.VersionInfo
    Storm 1.0.1
    URL https://git-wip-us.apache.org/repos/asf/storm.git -r b5c16f919ad4099e6fb25f1095c9af8b64ac9f91
    Branch (no branch)
    Compiled by tgoetz on 2016-04-29T20:44Z
    From source with checksum 1aea9df01b9181773125826339b9587e    
        
    
 2. Create the wordcount storm project
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project
       
    b. Press "Create New Project"
       1) In the "New Project" window, 
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java JDK:  C:\Program Files\Java\jdk1.7.0_60
                      -- Press OK
               
            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next

               
       2) In the next screen
          GroupId:     com.whatever
          ArtifactId:  stormWordCount    
          Version:     1.0-SNAPSHOT
          Press Next
          
          
       3) In the next screen,
          Maven home directory:  /opt/apache-maven-3.3.9
          User settings file:    Check the checkbox to "Override"
                                 /opt/apache-maven-3.3.9/conf/settings.xml
          Press Next                       
                                 
       
       4) Project Name:      stormWordCount
          Project Location:  /home/adam/intellijProjects/stormWordCount
          Press Finish
          
       5) If you get prompted that "/home/adam/intellijProjects/stormWordCount" does not exist
          It will be created by Intellij
          Press OK 
     
       6) If you get prompted 
          "New projects can either be opened in a new window or replace the project"
          Press "This Window"
          
       7) If you are prompted 
          Maven projects need to be imported
          Press "Enable Auto-Import"
          
          Now, maven has created a simple Java JAR project
         
 
 
 2. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
          a) Single-click on Inspections
          b) next to Typo -- Uncheck the checkbox
          c) Press Apply
          
          

 3. In Intellij, exclude build directory
    a. Pull File / Settings
    b. Search for maven
       Importing -> Uncheck exclude build directory
      
     

 4. Setup the Maven test directories for your Intellij project
    a. Right-click on src/test   -> New -> Directory:    resources
    b. Right-click on src/main   -> New -> Directory:    resources

    Now, you should have this directory structure
      src/main/java/ 
      src/main/resources/               # Holds logback.xml used by java main program     
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code


           
 5. Add dependencies for logging and apache-storm
    Your pom.xml should already have one dependency:
      <dependencies>
      
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.12</version>
          <scope>test</scope>
        </dependency>
        
      </dependencies>
    
        
        
    Add these additional dependencies into your pom.xml
    NOTE:  Add all of these dependencies should be between these tags:  
       <dependencies>
       . . .
       </dependencies>



      <dependency>
          <groupId>org.apache.storm</groupId>
          <artifactId>storm-core</artifactId>
          <version>0.9.3</version>
          
          <!-- keep storm out of the jar-with-dependencies -->
          <scope>compile</scope>

          <exclusions>
              <exclusion>
                  <groupId>ch.qos.logback</groupId>
                  <artifactId>logback-classic</artifactId>
              </exclusion>

              <exclusion>
                  <groupId>ch.qos.logback</groupId>
                  <artifactId>logback-core</artifactId>
              </exclusion>
          </exclusions>
      </dependency>       
     
     <dependency>
          <groupId>ch.qos.logback</groupId>
          <artifactId>logback-classic</artifactId>
          <version>1.0.13</version>
      </dependency>

      <dependency>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
          <version>19.0</version>
      </dependency>

      <dependency>
          <groupId>org.elasticsearch</groupId>
          <artifactId>elasticsearch</artifactId>
          <version>2.3.3</version>
      </dependency>

      <dependency>
          <!-- Use this to get Jackson's ObjectMapper -->
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
          <version>2.1.0</version>
      </dependency>



 6. Add the Maven plugins to build the Java JAR with all dependencies
    NOTE:  When you run mvn clean package
           Maven will generate two JAR files
              ./target/stormWordCount.jar        [which has all dependencies]
              ./target/stormWordCount_Lite.jar   [which is missing dependencies]
    a. Edit your pom.xml
        
       Add the following text so that appears before the <dependencies>...</dependencies> section
        
           <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.1</version>
                        <configuration>
                            <source>1.7</source>
                            <target>1.7</target>
                        </configuration>
                    </plugin>
        
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <version>2.3.2</version>
                        <configuration>
                            <!-- Set the name of the generated Java JAR filename *without* dependencies -->
                            <finalName>${project.artifactId}_Lite</finalName>
                        </configuration>
                    </plugin>
        
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
        
                        <configuration>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
        
                            <archive>
                                <manifest>
                                    <addClasspath>true</addClasspath>
                                    <mainClass>com.whatever.WordCountTopology</mainClass>
                                </manifest>
                            </archive>
                        </configuration>
        
                        <executions>
                            <execution>
                                <id>make-assembly</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <!-- Set the name of the generated Java JAR filename *with* dependencies -->
                                    <appendAssemblyId>false</appendAssemblyId>
                                    <finalName>${project.artifactId}</finalName>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
        
                </plugins>
            </build>
    


        
    
 7. Create this file:  logback.xml
    a. Browse to src/main/resources
    b. Right-click on classes -> New -> Other... -> Search for file
       filename:  logback.xml
       
        <?xml version="1.0" encoding="windows-1252" ?>
        <!DOCTYPE project>
        
        <configuration debug="false">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                </encoder>
            </appender>
        
        
        
            <logger name="com.whatever" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
        
            <root level="INFO">
                <appender-ref ref="CONSOLE"/>
            </root>
        </configuration>
   
   
   
 8. Add this spout:  MakeTestDataSpout
    a. Pull src / main / java / com.whatever -> New -> Java Class
       Name:  MakeTestDataSpout
       Kind:  Class
       press OK
    
    b. Copy this java code to MakeTestDataSpout.java    

            package com.whatever;
            
            /**
             * Created by adam on 6/24/16.
             */
            import backtype.storm.spout.SpoutOutputCollector;
            import backtype.storm.task.TopologyContext;
            import backtype.storm.topology.OutputFieldsDeclarer;
            import backtype.storm.topology.base.BaseRichSpout;
            import backtype.storm.tuple.Fields;
            import backtype.storm.tuple.Values;
            import com.google.common.collect.Iterables;
            import org.slf4j.Logger;
            import org.slf4j.LoggerFactory;
            
            import java.util.ArrayList;
            import java.util.Iterator;
            import java.util.Map;
            
            
            
            public class MakeTestDataSpout extends BaseRichSpout
            {
                private static final Logger logger = LoggerFactory.getLogger(MakeTestDataSpout.class);
            
                //Collector used to emit output
                private SpoutOutputCollector _collector;
            
                private Iterator<String> infiniteWordListIterator;
            
            
                /*********************************************************************************
                 * open()
                 *
                 * This method is called when an instance of the class is created
                 **********************************************************************************/
                @Override
                public void open(Map conf, TopologyContext context, SpoutOutputCollector collector)
                {
                    logger.debug("open() started");
            
                    //Set the instance collector to the one passed in
                    this._collector = collector;
            
                    ArrayList<String> words = new ArrayList<String>();
                    words.add("dog");
                    words.add("cat");
                    words.add("elephan");
                    words.add("lion");
            
                    // Make a list of strings that will iterate forever
                    this.infiniteWordListIterator = Iterables.cycle(words).iterator();
            
                    logger.debug("open() finished");
                }
            
            
            
                /*********************************************************************************
                 * nextTyple()
                 *
                 * Emit data to the stream
                 **********************************************************************************/
                @Override
                public void nextTuple()
                {
                    // Get the next word
                    String sWord = this.infiniteWordListIterator.next();
            
                    //Emit the sentence
                    logger.debug("Emitting this word={}", sWord);
                    _collector.emit(new Values(sWord));
                }
            
                //Ack is not implemented since this is a basic example
                @Override
                public void ack(Object id)
                {
                }
            
                //Fail is not implemented since this is a basic example
                @Override
                public void fail(Object id)
                {
                }
            
                //Declare the output fields. In this case, an sentence
                @Override
                public void declareOutputFields(OutputFieldsDeclarer declarer)
                {
                    declarer.declare(new Fields("word"));
                }
            }    
    
    
        
 9. Add this bolt:  WordCounterBolt
    a. Browse to src/main/java/com/whatever
    b. Right-click on classes -> New -> Java Class
       Name:  WordCounterBolt      
    c. Copy this to WordCounterBolt.java
    
        package com.whatever;
        
        import backtype.storm.task.OutputCollector;
        import backtype.storm.task.TopologyContext;
        import backtype.storm.topology.OutputFieldsDeclarer;
        import backtype.storm.topology.base.BaseRichBolt;
        import backtype.storm.tuple.Tuple;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        
        import java.util.*;
        
        /**
         * Created by adam on 6/24/16.
         */
        public class WordCounterBolt extends BaseRichBolt
        {
            private static final Logger logger = LoggerFactory.getLogger(WordCounterBolt.class);
        
            private HashMap<String, Long> counter;
            private int runningCount = 1;
        
            @Override
            public void prepare(Map map, TopologyContext topologyContext, OutputCollector outputCollector)
            {
                this.counter = new HashMap<String, Long>();
            }
        
            @Override
            public void execute(Tuple aTuple)
            {
                String sWord = (String) aTuple.getValueByField("word");
                Long lCount = counter.get(sWord);
                if (lCount == null)
                {
                    lCount = new Long(1);
                }
                else
                {
                    lCount++;
                }
                counter.put(sWord, lCount);
        
                if (this.runningCount == 100)
                {
                    logger.debug("In Execute().  Running Counts:\n{}\n", displayHashMapCounter(this.counter));
                    this.runningCount = 1;
                }
                else
                {
                    this.runningCount++;
                }
            }
        
        
            private String displayHashMapCounter(HashMap<String, Long> aCounter)
            {
                if ((aCounter == null) || (aCounter.size() == 0))
                {
                    return null;
                }
        
                StringBuilder sb = new StringBuilder();
                for (Map.Entry<String,Long> entry: aCounter.entrySet())
                {
                    String sWord = entry.getKey();
                    long lCount = entry.getValue();
        
                    sb.append(sWord)
                      .append(":")
                      .append(lCount)
                      .append("\n");
                }
        
                return sb.toString();
            }
        
            @Override
            public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer)
            {
        
            }
        }
 

10. Add this bolt:  WordCountTopology
    a. Browse to src/main/java/com/whatever
    b. Right-click on classes -> New -> Java Class
       Name:  WordCountTopology      
    c. Copy this to WordCountTopology.java
    
            package com.whatever;
            
            import backtype.storm.Config;
            import backtype.storm.LocalCluster;
            import backtype.storm.topology.TopologyBuilder;
            import org.slf4j.Logger;
            import org.slf4j.LoggerFactory;
            
            /**
             * Created by adam on 6/25/16.
             */
            public class WordCountTopology
            {
                private static final Logger logger = LoggerFactory.getLogger(WordCountTopology.class);
            
                private static final String TOPOLOGY_NAME = "word-count";
            
                public static void main(String[] args) throws Exception
                {
                    logger.debug("main() started");
            
                    Config config = new Config();
                    config.setDebug(true);
                    config.setMessageTimeoutSecs(120);
            
                    TopologyBuilder builder = new TopologyBuilder();
                    builder.setSpout("MakeTestDataSpout", new MakeTestDataSpout());
                    builder.setBolt("WordCounterBolt", new WordCounterBolt()).shuffleGrouping("MakeTestDataSpout");
            
                    final LocalCluster cluster = new LocalCluster();
                    cluster.submitTopology(TOPOLOGY_NAME, config, builder.createTopology());
            
                    //sleep
                    Thread.sleep(200000);
            
                    cluster.shutdown();
            
            
                    logger.debug("main() finished");
                }
            }


11. Debug the topology
    a. Right-click in WordCountTopology -> Debug -> WordCountTopology.main()
    
    
    

12. Add this bolt:  AddRecordsToDatabase
    a. Create this class:  DatasourceSingleton
    a. Right-click on /src/main/java -> New -> Java Class
       Name:  PostgresDatasource
       Kind:  Class
       Press OK
       
    b. Copy this to DatasourceSingleton.java 
            
            package com.whatever;
            
                
            /**
             * Created by adam on 6/25/16.
             */
            public enum DatasourceSingleton
            {
                INSTANCE;
            
                private DataSource dataSource;
            
                /******************************************************************
                 * Private DatasourceSingleton Constructor
                 * -- Do one-time initialization here
                 *******************************************************************/
                private DatasourceSingleton()
                {
                    // The very first time this singleton is called, we will initialize the ES Client
                    initializeDataSourceNoException();
                }
            
            
                /******************************************************************
                 * initializeDataSourceNoException()
                 * -- Attempt to initialize the datasource object
                 *******************************************************************/
                private void initializeDataSourceNoException()
                {
                    try {
                        
                        dataSource = ....
    
                    }
                    catch (Exception e)
                    {
                        // Convert the exception to a RunTime exception
                        RuntimeException re = new RuntimeException(e);
                        re.setStackTrace(e.getStackTrace());
                        throw re;
                    }
            
                }
            
                public DataSource getDataSource()
                {
                    return dataSource;
                }
            }











 9. Add this bolt:  IpAddressToIntegerBolt
         
 
 6. Add this bolt:  kmeansClusterBolt
     
 
 7. Add this bolt:  ElasticSearchBolt



 
 8. Configure the topology

 9. Turn on your ElasticSearch instance
    NOTE:  The code in AddToElasticSearch.initialize() assumes that ElasticSearch is 
           listening on the localhost at port 9200
    unix> sudo service elasticsearch start
    
    
           
10. Run the topology

    
    
    
11. Look inside your elastic search index to see the data
    Run this command:
       GET /my-index/_search


    NOTE:  To delete the index, run this command
       DELETE /my-index/
             