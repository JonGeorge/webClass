How to Install StreamParse  (to create bolts with Python)
----------------------------------------------------------
Streamparse lets you create Apache Storm bolts and spouts using Python

The lein build tool is used to
  + resolve dependencies to Storm itself
  + install it locally
  + run Storm topologies locally
  + add dependencies for community-supported JVM-based Spout implementations
  + offer an interactive debugging REPL
  + package your topologies as an "uberjar" for submission to a production Storm cluster. All of this is scripted under the hood using a small command-line Clojure program that is included with streamparse.


The Clojure DSL is essentially just a lightweight configuration file format that happens to be written in Clojure.


References
----------
https://github.com/Parsely/streamparse
https://streamparse.readthedocs.io/en/master/quickstart.html
https://github.com/technomancy/leiningen#leiningen
http://blog.zymr.com/apache-storm-streamparse-python
http://blog.zymr.com/introduction-to-apache-storm
http://hackersome.com/p/mbijon/streamparse


Procedure
---------
 1. Install lein
    a. Download the lein unix script and put is in a place that's in the path -- e.g., /sbin
       unix> sudo -s
       unix> cd /sbin
       unix> wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
   
    b. Run lein
       unix> lein
    
    c. Verify that lein is up to date
       unix> lein version
       Leiningen 2.6.1 on Java 1.8.0_73 Java HotSpot(TM) 64-Bit Server VM


2. Install streamparse using pip
   unix> pip --version
   pip 8.1.2 from /usr/local/lib/python2.7/site-packages/pip-8.1.2-py2.7.egg (python 2.7)
   
   unix> which pip
   /usr/local/bin/pip
   
   unix> sudo -s
   unix> export PATH=/usr/local/bin:$PATH
   unix> pip install streamparse
   Successfully installed MarkupSafe-0.23 contextlib2-0.5.3 ecdsa-0.13 fabric-1.11.1 invoke-0.12.2 jinja2-2.8 paramiko-1.17.0 prettytable-0.7.2 pycrypto-2.6.1 requests-2.10.0 simplejson-3.8.2 six-1.10.0 streamparse-2.1.4

 
 3. Try out the wordcount project
    
    a. Verify that sparse is in your PATH
       unix> sparse --version
       sparse 2.1.4

    b. Create the wordcount project
       unix> sparse quickstart wordcount
    
    c. Run the wordcount project
       unix> cd wordcount
       unix> sparse run
       
  
  4. Add logging to wordcount
     -- The Bolt and Spout classes have an embedded logger
     -- So, call self.log(message, level=None)
     
     
          from __future__ import absolute_import, print_function, unicode_literals
          
          from collections import Counter
          from streamparse.bolt import Bolt
          
          
          class WordCounter(Bolt):
          
              def initialize(self, conf, ctx):
                  self.log("WordCounter.initialize() called")
                  self.counts = Counter()
          
              def process(self, tup):
                  word = tup.values[0]
                  self.counts[word] += 1
                  self.emit([word, self.counts[word]])
                  self.log('%s: %d' % (word, self.counts[word]))



     
     
