How to setup a basic Spring MVC web application
-----------------------------------------------


Assumptions:  
 A) You have Eclipse installed
 B) You have Maven installed
 C) Your Maven configuration can download files from a maven repository
 
Procedures
----------
1. Create your "mywebapp1" Maven project in Eclipse
    a) Startup Eclipse
       If you see the "Weclome" page, press the "X" next to it -- to remove the Welcome page
	   If prompted for your workspace, use c:\tools\eclipse\workspace
	   
	b) Pull File / New / Project...
        -- Choose Web -> Dynamic Web Project
		-- Press Next
		
	c) In the next screen
		Project Name:  mywebapp1
		Check "Use the default workspace"
		Press "New Runtime..."
	   
		1) On New Server Runtime Environment
			 -- Select Apache Tomcat v7.0
			 -- Press "Next"
			 
		2) On Tomcat Server
			 -- Under Tomcat installation directory:  c:\tools\apache-tomcat-7.0.59   
				*OR* press "Browse" and browse to Computer -> Local Diskc (C:) -> tools -> apache-tomcat-7.0.59   
			 -- Press "Finish"
			 
	d) Back on Dynamic Web Project screen
	   Press "Next"
	   
	e) On the Java screen
	   Press "Next"
	   
	f) For the Web Module screen
	   Context root:         mywebapp1
	   Content directory:    WAR
	   Check the checkbox to "Generate web.xml deployment desciptor"
	   Press "Finish"
		
		
2. Convert your web project into a Maven project		
	a) Right-click on mywebapp1 -> Configure -> Convert to Maven Project
			   
	b) In the next screen
	   Group Id:     com.resnick
	   Artifact Id:  mywebapp1
	   Version:      0.0.1-SNAPSHOT
	   Packing:      war
	   Press Finish
		  
       NOTE:  This will generate a pom.xml file
	   
		   
3. Add dependencies for Spring, Web development, and Logback
   NOTE:  You can copy the <dependency> tags to your pom.xml *OR* 
          Enter each dependecy one at a time by right-clicking on mywebapp1 -> Maven -> Add Dependency

     a) Click on mywebapp1 -> Java Resources -> Libraries -> Maven Dependencies
	    NOTE:  You should see nothing
		
	 b) Add the dependency for the Spring MVC framework
	    Right-click on mywebapp1 -> Maven -> Add Dependency
		
		NOTE:  If no scope is listed here, then use the default scope of "compile"

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>4.1.1.RELEASE</version>
		</dependency>
 
 
 
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>4.1.1.RELEASE</version>
		</dependency>

	
		<!-- Spring Core -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>4.1.1.RELEASE</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
				

		
	
     c) Add the dependency for Java Server Template Library (jstl)	
	    Right-click on mywebapp1 -> Maven -> Add Dependency
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

			
     d) Add the dependencies for logging (part 1)
	    Right-click on mywebapp1 -> Maven -> Add Dependency			
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.0.13</version>
		</dependency>
			
     e) Add the dependencies for sending log4j logging to logback (part 2)
	    Right-click on mywebapp1 -> Maven -> Add Dependency			
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.7.5</version>
		</dependency>
		
			
	 f) Add the dependencies for Tomcat
	    Right-click on mywebapp1 -> Maven -> Add Dependency			
		NOTE:  Scope is *provided*
		
		<dependency> 
			<!-- Tomcat provides the servlet classes -->
			<groupId>javax.servlet</groupId> 
			<artifactId>javax.servlet-api</artifactId> 
			<version>3.0.1</version> 
			<scope>provided</scope> 
		</dependency>

9. Create your WAR / WEB-INF / classes directory
    a) Browse to mywebapp1 -> WAR -> WEB-INF
    b) Right-click on WEB-INF -> New -> Folder
       Folder name:  classes
	   Press "Finish"
	c) Right-click on your new classes directory -> Build Path -> Use as Source Folder
       
10. Create your WAR / WEB-INF / jsp directory
    a) Browse to mywebapp1 -> WAR -> WEB-INF
    b) Right-click on WEB-INF -> New -> Folder
       Folder name:  jsp
	   Press "Finish"

11. Create your WAR / WEB-INF / spring directory
    a) Browse to mywebapp1 -> WAR -> WEB-INF
    b) Right-click on WEB-INF -> New -> Folder
       Folder name:  spring
	   Press "Finish"
	   
12. Update your web.xml to load Spring
    a) Browse to webapp1 -> WAR -> WEB-INF -> web.xml
	
	   The original web.xml probably looks like this:
	   
		<?xml version="1.0" encoding="UTF-8"?>
		<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
		  <display-name>mywebapp1</display-name>
		  <welcome-file-list>
			<welcome-file>index.html</welcome-file>
			<welcome-file>index.htm</welcome-file>
			<welcome-file>index.jsp</welcome-file>
			<welcome-file>default.html</welcome-file>
			<welcome-file>default.htm</welcome-file>
			<welcome-file>default.jsp</welcome-file>
		  </welcome-file-list>
		</web-app>
	
	
		Change it to this:
		NOTE:   The file must *start* with <?xml...... There can be no loading spaces
		
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">

	<display-name>mywebapp1</display-name>
	
	<welcome-file-list>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<!-- Configure ContextLoaderListener to use XML files as configuration. -->
	<context-param>
	<description>Type of context to load - spring</description>
	<param-name>contextClass</param-name>
	<param-value>org.springframework.web.context.support.XmlWebApplicationContext</param-value>
	</context-param>


	<!-- Configure the application context XML file locations.  -->
	<context-param>
	<description>Location of context config file(s)</description>
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/spring/applicationContext.xml</param-value>
	</context-param>


	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/dispatch-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	  
</web-app>

	
13. Create your applicationContext.xml file
    mywebapp1 -> WAR -> WEB-INF -> spring -> new -> file
	File name:  applicationContext.xml
	Press "Finish"
	
	Copy this into your new file
		
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:aop="http://www.springframework.org/schema/aop" 
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:jee="http://www.springframework.org/schema/jee" 
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop.xsd
                            http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/jee
                            http://www.springframework.org/schema/jee/spring-jee.xsd 
                            http://www.springframework.org/schema/mvc
                            http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-xsd">

       
       <!-- Autodetect classes and register the corresponding beans -->
       <context:component-scan  
       		base-package="app1"
       		use-default-filters="true">
       	
       		<context:exclude-filter 
       			type="annotation"
       			expression="org.springframework.stereotype.Controller"/>
       	</context:component-scan>
       
       
       
        <!-- Allow the use of @Autowire and @Required -->
        <context:annotation-config />
        
       
        <!-- Map the relative address for certain locations -->
        <mvc:resources
        	mapping="/resources/**"
        	location="/resources/" />
       
       
        <!--
                This will automatically locate any and all property files you have
                within your classpath, provided they fall under the META-INF
                directory. The located property files are parsed and their values can
                then be used within application context files in the form of
                ${propertyKey}.
        -->
        <context:property-placeholder location="classpath*:*.properties" />
        
        
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        	<property name="order" value="2" />
        	<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        	<property name="prefix" value="/WEB-INF/jsp/" />
        	<property name="suffix" value=".jsp" />
        </bean>
         
</beans>
		
	
	
	
	
14. Create your dispatch-servlet.xml file
    mywebapp1 -> WAR -> WEB-INF -> spring -> new -> file
	File name:  dispatch-servlet.xml
	Press "Finish"
	
	Copy this into your new file
		
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:aop="http://www.springframework.org/schema/aop" 
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:jee="http://www.springframework.org/schema/jee" 
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop.xsd
                            http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/jee
                            http://www.springframework.org/schema/jee/spring-jee.xsd 
                            http://www.springframework.org/schema/mvc
                            http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-xsd">

		<!-- Autodetect classes and register the beans -->
		<!-- This context:component-scan should built upon the one 
			 that was already don in the applicationContext.  The goal is to add in the @Controller
			 annotations to the context since Spring MVC requires that those beans are
			 registered at this level.
			 
			 If context:component-scans a file, then it will overwrite anything
			 that wdone for that file in the applicationContext's component-scan.
			 So, you should use point to the package that was previously ignored,
			 or use the resource-pattern property to only scan the corret Java files
			 
			 Be careful if you use the filter tags within the component-scan
			 because that doesn't prevent the file from being scanned, and 
			 will likely cause you to overwrite something that you didn't mean to.
		 -->
		 <context:component-scan
				base-package="app1"
				use-default-filters="false">
				
				<!-- Make sure that the use-default filters property is set to false.
					 When a file is scanned with the @Controller annotation,
					 it should be included in the context at this point. -->
				<context:include-filter
					type="annotation"
					expression="org.springframework.stereotype.Controller" />
					
				<context:include-filter
					type="annotation"
					expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
		 </context:component-scan>
								  
								  
		<!-- Registers the DefaultAnnotationhandlerMapping and AnnotationMethodHandlerAdapter beans
			(that are required for Spring MVC to dispatch requests to @Controllers -->
		<mvc:annotation-driven />


		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="order"     value="2" />
			<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
			<property name="prefix"    value="/WEB-INF/jsp/" />
			<property name="suffix"    value="" />
		</bean>                       
						
</beans>            
	         
	
	
	
	
	
	


15. Add a logback.xml file to see logging
	a) Browse to mywebapp1 -> WAR -> WEB-INF -> classes
	b) Right-click on classes -> New -> File
	   filename:  logback.xml
	   
	c) Right-click on logback.xml -> Open With -> Text Editor
	   Copy this contents to your file
	
<?xml version="1.0" encoding="windows-1252" ?>
<configuration>
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{MM/dd/yyyy HH:mm:ss} %c %m%n</pattern>
		</encoder>
	</appender>
	
	
	<logger name="org.springframework" level="DEBUG" additivity="false">
		<appender-ref ref="CONSOLE"/>
	</logger>
	
	<logger name="app1" level="DEBUG" additivity="false">
		<appender-ref ref="CONSOLE"/>
	</logger>	
	
	<root level="DEBUG">
		<appender-ref ref="CONSOLE"/>
	</root>
	
</configuration>





16. Create your UserInfo object

    a) Right-click on mywebapp1 -> New -> Class
	   Package:  app1.model
	   Name:     UserInfo
	   Press "Finish"	
			   
	b) Copy this java code to UserInfo.java
		   
		package app1.model;

		public class UserInfo
		{
			private boolean isAdministrator = false;
			private String username;
			
			
			public UserInfo()
			{
				
			}
			
			public boolean getIsAdministrator()
			{
				return this.isAdministrator;
			}
			
			public void setIsAdministrator(boolean aValue)
			{
				this.isAdministrator = aValue;
			}
			
			public String getUserName()
			{
				return this.username;
			}
			
			public void setUserName(String aUserName)
			{
				this.username = aUserName;
			}
		}
	

	
	
17. Create your WelcomeController
    a) Right-click on mywebapp1 -> New -> Package
	   Name:  app1.controllers
	   
	b) Right-click on app1.controllers -> New -> Class
	   Name:  WelcomeController
	   Press "Finish"	
			   
	c) Copy this java code to WelcomeController.java
	
package app1.controllers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import app1.model.UserInfo;


@Controller
public class WelcomeController 
{
	private final static Logger logger = LoggerFactory.getLogger(WelcomeController.class);
	 
	/**********************************************************************
	 * mainPage()
	 * 
	 * The user browsed to the /welcome page
	 *  1) Get a userinfo object setup
	 *  2) Forward the user to the welcome.jsp page
	 ***********************************************************************/
	@RequestMapping("/welcome")
	public ModelAndView mainPage( Model aModel )
	{
		logger.debug("mainPage() started");
				
		// Create a modelAndView object
		ModelAndView mav = new ModelAndView();
		
		// Show the welcome.jsp page
		mav.setViewName("welcome.jsp");
		
		// Create a userInfo object
		UserInfo userInfo = new UserInfo();
		userInfo.setUserName("Adam");
		userInfo.setIsAdministrator(true);
		
		// Add the userInfo information to the view
		mav.addObject("userInfo", userInfo);
		
		logger.debug("mainPage() finished");
		return mav;
	}
}


			
17. Create this directory:  WEB-INF / jsp / include



18. Create your stdJspIncludes.jsp file
    Browse to WAR -> WEB-INF -> jsp -> include -> Right-Click -> New -> File
	File name:  stdJspIncludes.jsp

<%@ page session="false" language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" %>

<%-- Allow all JSPs to use the tag libraries --%>
<%@ taglib prefix='c'      uri='http://java.sun.com/jsp/jstl/core' %>
<%@ taglib prefix='spring' uri='http://www.springframework.org/tags' %>
<%@ taglib prefix='form'   uri='http://www.springframework.org/tags/form' %>

<%-- Allow all JSPs to have the contextPath variable --%>
<c:set var="contextPath" value="${pageContext.request.contextPath}" />
    
	
	
		
	
19. Create your stdHeader.jsp
    Browse to WAR -> WEB-INF -> jsp -> include -> Right-Click -> New -> File
	File name:  stdHeader.jsp

<table style="width: 100%; border: 1px solid black">
    <tr>
        <td align="center">Standard Header is here</td>
    </tr>
</table>
	
	
	
	
	
20. Create your stdFooter.jsp
	Browse to WAR -> WEB-INF -> jsp -> include -> Right-Click -> New -> File
	File name:  stdFooter.jsp

<table style="width: 100%; border: 1px solid black">
    <tr>
        <td align="center">Standard Footer is here</td>
    </tr>
</table>



	
	
	
21. Create your welcome.jsp page
    Browse to WAR -> WEB-INF -> jsp -> Right-Click -> New -> File
	File name:  welcome.jsp
	
<%@ include file="/WEB-INF/jsp/include/stdJspIncludes.jsp" %>

<!DOCTYPE HTML>

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
	<title>Welcome Page</title>
</head>

<body>
	
	<%-- S T A N D A R D       H E A D E R  --%>
	<%@ include file="/WEB-INF/jsp/include/stdHeader.jsp" %>
	
	<h2>welcome.jsp</h2>
	
	<br/>
	
	<br/>
	Hello ${userInfo.userName} <br/>
	Are you an administrator: ${userInfo.isAdministrator }


	<%-- S T A N D A R D       F O O T E R  --%>
	<%@ include file="/WEB-INF/jsp/include/stdFooter.jsp" %>
	
</body>
</html>
		
		

		
22. Add a default.jsp page
    Right-click on WAR -> New -> File
	File name:  default.jsp
	
	
<%@ page session="false" %>
<%@ page language="java" contentType="text/html;charset=UTF-8" %>
<!DOCTYPE html>

<%-- If a user visits http://localhost:8080/webapp1/, then forward them to http://localhost:8080/webapp1/welcome  --%>
<jsp:forward page="/welcome" />
		
		
		
23. Pull File / Save All
		
		
24. Startup the webapp in debug mode
    a) Right-click on mywebapp1 -> Debug As -> Debug on Server
	    1. In the "Debug on Server", 
		   Single-click on Tomcat v.7.0 Server
		   Check "Always use this server when running this projecdt"
		   Press "Next"
		   Press "Finish"
		   
	
	
What happens when you start the debugger
----------------------------------------
 1) Your browser opens to here:  http://localhost:8080/webapp1
    
 2)	Your tomcat will see if a default.jsp page exists
	It does, so Tomcat forwards you to http://localhost:8080/webapp1/default.jsp 
 
 3) Your default.jsp page forwards you to here: 
       http://localhost:8080/webapp1/welcome
	   
 4) Your WelcomeController has this line in it:
	@RequestMapping("/welcome")
	public ModelAndView mainPage( Model aModel )
	{
	
	}
	
	So your mainPage() method is executed
	
    
 5) The WelcomeController.mainPage() method then does the following
     a) Creates a UserInfo object
	 b) Binds that UserInfo object to your welcome.jsp
	 c) Forward the user to the welcome.jsp page  [with the UserInfo object bound to it].
	 
	 -- As a result, the user sees the welcome.jsp page  [with the information attached to it]